
Digital_Calculator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000750  08008be0  08008be0  00018be0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009330  08009330  00020224  2**0
                  CONTENTS
  4 .ARM          00000008  08009330  08009330  00019330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009338  08009338  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009338  08009338  00019338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800933c  0800933c  0001933c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  08009340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020224  2**0
                  CONTENTS
 10 .bss          00000094  20000224  20000224  00020224  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002b8  200002b8  00020224  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aaf9  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c3d  00000000  00000000  0002ad4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000818  00000000  00000000  0002c990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000758  00000000  00000000  0002d1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000215a7  00000000  00000000  0002d900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ae13  00000000  00000000  0004eea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3a6b  00000000  00000000  00059cba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011d725  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003680  00000000  00000000  0011d778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000224 	.word	0x20000224
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008bc4 	.word	0x08008bc4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000228 	.word	0x20000228
 80001cc:	08008bc4 	.word	0x08008bc4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b9a4 	b.w	8000f48 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f83c 	bl	8000c84 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2lz>:
 8000c18:	b538      	push	{r3, r4, r5, lr}
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	4604      	mov	r4, r0
 8000c20:	460d      	mov	r5, r1
 8000c22:	f7ff ff5b 	bl	8000adc <__aeabi_dcmplt>
 8000c26:	b928      	cbnz	r0, 8000c34 <__aeabi_d2lz+0x1c>
 8000c28:	4620      	mov	r0, r4
 8000c2a:	4629      	mov	r1, r5
 8000c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c30:	f000 b80a 	b.w	8000c48 <__aeabi_d2ulz>
 8000c34:	4620      	mov	r0, r4
 8000c36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c3a:	f000 f805 	bl	8000c48 <__aeabi_d2ulz>
 8000c3e:	4240      	negs	r0, r0
 8000c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c44:	bd38      	pop	{r3, r4, r5, pc}
 8000c46:	bf00      	nop

08000c48 <__aeabi_d2ulz>:
 8000c48:	b5d0      	push	{r4, r6, r7, lr}
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <__aeabi_d2ulz+0x34>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	4606      	mov	r6, r0
 8000c50:	460f      	mov	r7, r1
 8000c52:	f7ff fcd1 	bl	80005f8 <__aeabi_dmul>
 8000c56:	f7ff ffa7 	bl	8000ba8 <__aeabi_d2uiz>
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	f7ff fc52 	bl	8000504 <__aeabi_ui2d>
 8000c60:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <__aeabi_d2ulz+0x38>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	f7ff fcc8 	bl	80005f8 <__aeabi_dmul>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	4630      	mov	r0, r6
 8000c6e:	4639      	mov	r1, r7
 8000c70:	f7ff fb0a 	bl	8000288 <__aeabi_dsub>
 8000c74:	f7ff ff98 	bl	8000ba8 <__aeabi_d2uiz>
 8000c78:	4621      	mov	r1, r4
 8000c7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c7c:	3df00000 	.word	0x3df00000
 8000c80:	41f00000 	.word	0x41f00000

08000c84 <__udivmoddi4>:
 8000c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c88:	9d08      	ldr	r5, [sp, #32]
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	468c      	mov	ip, r1
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f040 8083 	bne.w	8000d9a <__udivmoddi4+0x116>
 8000c94:	428a      	cmp	r2, r1
 8000c96:	4617      	mov	r7, r2
 8000c98:	d947      	bls.n	8000d2a <__udivmoddi4+0xa6>
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	b142      	cbz	r2, 8000cb2 <__udivmoddi4+0x2e>
 8000ca0:	f1c2 0020 	rsb	r0, r2, #32
 8000ca4:	fa24 f000 	lsr.w	r0, r4, r0
 8000ca8:	4091      	lsls	r1, r2
 8000caa:	4097      	lsls	r7, r2
 8000cac:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb0:	4094      	lsls	r4, r2
 8000cb2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cb6:	0c23      	lsrs	r3, r4, #16
 8000cb8:	fbbc f6f8 	udiv	r6, ip, r8
 8000cbc:	fa1f fe87 	uxth.w	lr, r7
 8000cc0:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc8:	fb06 f10e 	mul.w	r1, r6, lr
 8000ccc:	4299      	cmp	r1, r3
 8000cce:	d909      	bls.n	8000ce4 <__udivmoddi4+0x60>
 8000cd0:	18fb      	adds	r3, r7, r3
 8000cd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cd6:	f080 8119 	bcs.w	8000f0c <__udivmoddi4+0x288>
 8000cda:	4299      	cmp	r1, r3
 8000cdc:	f240 8116 	bls.w	8000f0c <__udivmoddi4+0x288>
 8000ce0:	3e02      	subs	r6, #2
 8000ce2:	443b      	add	r3, r7
 8000ce4:	1a5b      	subs	r3, r3, r1
 8000ce6:	b2a4      	uxth	r4, r4
 8000ce8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cec:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cf8:	45a6      	cmp	lr, r4
 8000cfa:	d909      	bls.n	8000d10 <__udivmoddi4+0x8c>
 8000cfc:	193c      	adds	r4, r7, r4
 8000cfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d02:	f080 8105 	bcs.w	8000f10 <__udivmoddi4+0x28c>
 8000d06:	45a6      	cmp	lr, r4
 8000d08:	f240 8102 	bls.w	8000f10 <__udivmoddi4+0x28c>
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	443c      	add	r4, r7
 8000d10:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d14:	eba4 040e 	sub.w	r4, r4, lr
 8000d18:	2600      	movs	r6, #0
 8000d1a:	b11d      	cbz	r5, 8000d24 <__udivmoddi4+0xa0>
 8000d1c:	40d4      	lsrs	r4, r2
 8000d1e:	2300      	movs	r3, #0
 8000d20:	e9c5 4300 	strd	r4, r3, [r5]
 8000d24:	4631      	mov	r1, r6
 8000d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2a:	b902      	cbnz	r2, 8000d2e <__udivmoddi4+0xaa>
 8000d2c:	deff      	udf	#255	; 0xff
 8000d2e:	fab2 f282 	clz	r2, r2
 8000d32:	2a00      	cmp	r2, #0
 8000d34:	d150      	bne.n	8000dd8 <__udivmoddi4+0x154>
 8000d36:	1bcb      	subs	r3, r1, r7
 8000d38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3c:	fa1f f887 	uxth.w	r8, r7
 8000d40:	2601      	movs	r6, #1
 8000d42:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d46:	0c21      	lsrs	r1, r4, #16
 8000d48:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d50:	fb08 f30c 	mul.w	r3, r8, ip
 8000d54:	428b      	cmp	r3, r1
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0xe4>
 8000d58:	1879      	adds	r1, r7, r1
 8000d5a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0xe2>
 8000d60:	428b      	cmp	r3, r1
 8000d62:	f200 80e9 	bhi.w	8000f38 <__udivmoddi4+0x2b4>
 8000d66:	4684      	mov	ip, r0
 8000d68:	1ac9      	subs	r1, r1, r3
 8000d6a:	b2a3      	uxth	r3, r4
 8000d6c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d70:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d74:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d78:	fb08 f800 	mul.w	r8, r8, r0
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	d907      	bls.n	8000d90 <__udivmoddi4+0x10c>
 8000d80:	193c      	adds	r4, r7, r4
 8000d82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d86:	d202      	bcs.n	8000d8e <__udivmoddi4+0x10a>
 8000d88:	45a0      	cmp	r8, r4
 8000d8a:	f200 80d9 	bhi.w	8000f40 <__udivmoddi4+0x2bc>
 8000d8e:	4618      	mov	r0, r3
 8000d90:	eba4 0408 	sub.w	r4, r4, r8
 8000d94:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d98:	e7bf      	b.n	8000d1a <__udivmoddi4+0x96>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x12e>
 8000d9e:	2d00      	cmp	r5, #0
 8000da0:	f000 80b1 	beq.w	8000f06 <__udivmoddi4+0x282>
 8000da4:	2600      	movs	r6, #0
 8000da6:	e9c5 0100 	strd	r0, r1, [r5]
 8000daa:	4630      	mov	r0, r6
 8000dac:	4631      	mov	r1, r6
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	fab3 f683 	clz	r6, r3
 8000db6:	2e00      	cmp	r6, #0
 8000db8:	d14a      	bne.n	8000e50 <__udivmoddi4+0x1cc>
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	d302      	bcc.n	8000dc4 <__udivmoddi4+0x140>
 8000dbe:	4282      	cmp	r2, r0
 8000dc0:	f200 80b8 	bhi.w	8000f34 <__udivmoddi4+0x2b0>
 8000dc4:	1a84      	subs	r4, r0, r2
 8000dc6:	eb61 0103 	sbc.w	r1, r1, r3
 8000dca:	2001      	movs	r0, #1
 8000dcc:	468c      	mov	ip, r1
 8000dce:	2d00      	cmp	r5, #0
 8000dd0:	d0a8      	beq.n	8000d24 <__udivmoddi4+0xa0>
 8000dd2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0xa0>
 8000dd8:	f1c2 0320 	rsb	r3, r2, #32
 8000ddc:	fa20 f603 	lsr.w	r6, r0, r3
 8000de0:	4097      	lsls	r7, r2
 8000de2:	fa01 f002 	lsl.w	r0, r1, r2
 8000de6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dea:	40d9      	lsrs	r1, r3
 8000dec:	4330      	orrs	r0, r6
 8000dee:	0c03      	lsrs	r3, r0, #16
 8000df0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df4:	fa1f f887 	uxth.w	r8, r7
 8000df8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dfc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e00:	fb06 f108 	mul.w	r1, r6, r8
 8000e04:	4299      	cmp	r1, r3
 8000e06:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0a:	d909      	bls.n	8000e20 <__udivmoddi4+0x19c>
 8000e0c:	18fb      	adds	r3, r7, r3
 8000e0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e12:	f080 808d 	bcs.w	8000f30 <__udivmoddi4+0x2ac>
 8000e16:	4299      	cmp	r1, r3
 8000e18:	f240 808a 	bls.w	8000f30 <__udivmoddi4+0x2ac>
 8000e1c:	3e02      	subs	r6, #2
 8000e1e:	443b      	add	r3, r7
 8000e20:	1a5b      	subs	r3, r3, r1
 8000e22:	b281      	uxth	r1, r0
 8000e24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb00 f308 	mul.w	r3, r0, r8
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0x1c4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e3e:	d273      	bcs.n	8000f28 <__udivmoddi4+0x2a4>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	d971      	bls.n	8000f28 <__udivmoddi4+0x2a4>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4439      	add	r1, r7
 8000e48:	1acb      	subs	r3, r1, r3
 8000e4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e4e:	e778      	b.n	8000d42 <__udivmoddi4+0xbe>
 8000e50:	f1c6 0c20 	rsb	ip, r6, #32
 8000e54:	fa03 f406 	lsl.w	r4, r3, r6
 8000e58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e5c:	431c      	orrs	r4, r3
 8000e5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e62:	fa01 f306 	lsl.w	r3, r1, r6
 8000e66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e6e:	431f      	orrs	r7, r3
 8000e70:	0c3b      	lsrs	r3, r7, #16
 8000e72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e76:	fa1f f884 	uxth.w	r8, r4
 8000e7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e82:	fb09 fa08 	mul.w	sl, r9, r8
 8000e86:	458a      	cmp	sl, r1
 8000e88:	fa02 f206 	lsl.w	r2, r2, r6
 8000e8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000e90:	d908      	bls.n	8000ea4 <__udivmoddi4+0x220>
 8000e92:	1861      	adds	r1, r4, r1
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e98:	d248      	bcs.n	8000f2c <__udivmoddi4+0x2a8>
 8000e9a:	458a      	cmp	sl, r1
 8000e9c:	d946      	bls.n	8000f2c <__udivmoddi4+0x2a8>
 8000e9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea2:	4421      	add	r1, r4
 8000ea4:	eba1 010a 	sub.w	r1, r1, sl
 8000ea8:	b2bf      	uxth	r7, r7
 8000eaa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eb6:	fb00 f808 	mul.w	r8, r0, r8
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x24a>
 8000ebe:	19e7      	adds	r7, r4, r7
 8000ec0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec4:	d22e      	bcs.n	8000f24 <__udivmoddi4+0x2a0>
 8000ec6:	45b8      	cmp	r8, r7
 8000ec8:	d92c      	bls.n	8000f24 <__udivmoddi4+0x2a0>
 8000eca:	3802      	subs	r0, #2
 8000ecc:	4427      	add	r7, r4
 8000ece:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed2:	eba7 0708 	sub.w	r7, r7, r8
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	454f      	cmp	r7, r9
 8000edc:	46c6      	mov	lr, r8
 8000ede:	4649      	mov	r1, r9
 8000ee0:	d31a      	bcc.n	8000f18 <__udivmoddi4+0x294>
 8000ee2:	d017      	beq.n	8000f14 <__udivmoddi4+0x290>
 8000ee4:	b15d      	cbz	r5, 8000efe <__udivmoddi4+0x27a>
 8000ee6:	ebb3 020e 	subs.w	r2, r3, lr
 8000eea:	eb67 0701 	sbc.w	r7, r7, r1
 8000eee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef2:	40f2      	lsrs	r2, r6
 8000ef4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ef8:	40f7      	lsrs	r7, r6
 8000efa:	e9c5 2700 	strd	r2, r7, [r5]
 8000efe:	2600      	movs	r6, #0
 8000f00:	4631      	mov	r1, r6
 8000f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f06:	462e      	mov	r6, r5
 8000f08:	4628      	mov	r0, r5
 8000f0a:	e70b      	b.n	8000d24 <__udivmoddi4+0xa0>
 8000f0c:	4606      	mov	r6, r0
 8000f0e:	e6e9      	b.n	8000ce4 <__udivmoddi4+0x60>
 8000f10:	4618      	mov	r0, r3
 8000f12:	e6fd      	b.n	8000d10 <__udivmoddi4+0x8c>
 8000f14:	4543      	cmp	r3, r8
 8000f16:	d2e5      	bcs.n	8000ee4 <__udivmoddi4+0x260>
 8000f18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000f20:	3801      	subs	r0, #1
 8000f22:	e7df      	b.n	8000ee4 <__udivmoddi4+0x260>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e7d2      	b.n	8000ece <__udivmoddi4+0x24a>
 8000f28:	4660      	mov	r0, ip
 8000f2a:	e78d      	b.n	8000e48 <__udivmoddi4+0x1c4>
 8000f2c:	4681      	mov	r9, r0
 8000f2e:	e7b9      	b.n	8000ea4 <__udivmoddi4+0x220>
 8000f30:	4666      	mov	r6, ip
 8000f32:	e775      	b.n	8000e20 <__udivmoddi4+0x19c>
 8000f34:	4630      	mov	r0, r6
 8000f36:	e74a      	b.n	8000dce <__udivmoddi4+0x14a>
 8000f38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f3c:	4439      	add	r1, r7
 8000f3e:	e713      	b.n	8000d68 <__udivmoddi4+0xe4>
 8000f40:	3802      	subs	r0, #2
 8000f42:	443c      	add	r4, r7
 8000f44:	e724      	b.n	8000d90 <__udivmoddi4+0x10c>
 8000f46:	bf00      	nop

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <LCD_Send_Cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void LCD_Send_Cmd (char cmd)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af02      	add	r7, sp, #8
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	f023 030f 	bic.w	r3, r3, #15
 8000f5c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	011b      	lsls	r3, r3, #4
 8000f62:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	f043 030c 	orr.w	r3, r3, #12
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	f043 0308 	orr.w	r3, r3, #8
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000f78:	7bbb      	ldrb	r3, [r7, #14]
 8000f7a:	f043 030c 	orr.w	r3, r3, #12
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000f82:	7bbb      	ldrb	r3, [r7, #14]
 8000f84:	f043 0308 	orr.w	r3, r3, #8
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f8c:	f107 0208 	add.w	r2, r7, #8
 8000f90:	2364      	movs	r3, #100	; 0x64
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	2304      	movs	r3, #4
 8000f96:	214e      	movs	r1, #78	; 0x4e
 8000f98:	4804      	ldr	r0, [pc, #16]	; (8000fac <LCD_Send_Cmd+0x60>)
 8000f9a:	f001 fd01 	bl	80029a0 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8000f9e:	200a      	movs	r0, #10
 8000fa0:	f001 f8e2 	bl	8002168 <HAL_Delay>
}
 8000fa4:	bf00      	nop
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000250 	.word	0x20000250

08000fb0 <LCD_Send_Char>:

void LCD_Send_Char (char data)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af02      	add	r7, sp, #8
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	f023 030f 	bic.w	r3, r3, #15
 8000fc0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	011b      	lsls	r3, r3, #4
 8000fc6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
 8000fca:	f043 030d 	orr.w	r3, r3, #13
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	f043 0309 	orr.w	r3, r3, #9
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000fdc:	7bbb      	ldrb	r3, [r7, #14]
 8000fde:	f043 030d 	orr.w	r3, r3, #13
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000fe6:	7bbb      	ldrb	r3, [r7, #14]
 8000fe8:	f043 0309 	orr.w	r3, r3, #9
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000ff0:	f107 0208 	add.w	r2, r7, #8
 8000ff4:	2364      	movs	r3, #100	; 0x64
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	2304      	movs	r3, #4
 8000ffa:	214e      	movs	r1, #78	; 0x4e
 8000ffc:	4804      	ldr	r0, [pc, #16]	; (8001010 <LCD_Send_Char+0x60>)
 8000ffe:	f001 fccf 	bl	80029a0 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001002:	200a      	movs	r0, #10
 8001004:	f001 f8b0 	bl	8002168 <HAL_Delay>
}
 8001008:	bf00      	nop
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000250 	.word	0x20000250

08001014 <LCD_Init>:
    LCD_Send_Cmd (col);
}


void LCD_Init (void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  // 4 bit initialisation
  LCD_Send_Cmd (0x33); /* set 4-bits interface */
 8001018:	2033      	movs	r0, #51	; 0x33
 800101a:	f7ff ff97 	bl	8000f4c <LCD_Send_Cmd>
  HAL_Delay(10);
 800101e:	200a      	movs	r0, #10
 8001020:	f001 f8a2 	bl	8002168 <HAL_Delay>
  LCD_Send_Cmd (0x32);
 8001024:	2032      	movs	r0, #50	; 0x32
 8001026:	f7ff ff91 	bl	8000f4c <LCD_Send_Cmd>
  HAL_Delay(50);
 800102a:	2032      	movs	r0, #50	; 0x32
 800102c:	f001 f89c 	bl	8002168 <HAL_Delay>

  // dislay initialisation
  LCD_Send_Cmd (0x28); /* start to set LCD function */
 8001030:	2028      	movs	r0, #40	; 0x28
 8001032:	f7ff ff8b 	bl	8000f4c <LCD_Send_Cmd>
  HAL_Delay(50);
 8001036:	2032      	movs	r0, #50	; 0x32
 8001038:	f001 f896 	bl	8002168 <HAL_Delay>
  LCD_Send_Cmd (0x01); /* clear display */
 800103c:	2001      	movs	r0, #1
 800103e:	f7ff ff85 	bl	8000f4c <LCD_Send_Cmd>
  HAL_Delay(50);
 8001042:	2032      	movs	r0, #50	; 0x32
 8001044:	f001 f890 	bl	8002168 <HAL_Delay>
  LCD_Send_Cmd (0x06); /* set entry mode */
 8001048:	2006      	movs	r0, #6
 800104a:	f7ff ff7f 	bl	8000f4c <LCD_Send_Cmd>
  HAL_Delay(50);
 800104e:	2032      	movs	r0, #50	; 0x32
 8001050:	f001 f88a 	bl	8002168 <HAL_Delay>
  LCD_Send_Cmd (0x0D); /* set display to on */
 8001054:	200d      	movs	r0, #13
 8001056:	f7ff ff79 	bl	8000f4c <LCD_Send_Cmd>
  HAL_Delay(50);
 800105a:	2032      	movs	r0, #50	; 0x32
 800105c:	f001 f884 	bl	8002168 <HAL_Delay>
  LCD_Send_Cmd (0x80); /* move cursor to home and set data address to 0 */
 8001060:	2080      	movs	r0, #128	; 0x80
 8001062:	f7ff ff73 	bl	8000f4c <LCD_Send_Cmd>
  HAL_Delay(50);
 8001066:	2032      	movs	r0, #50	; 0x32
 8001068:	f001 f87e 	bl	8002168 <HAL_Delay>
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}

08001070 <LCD_Send_String>:

void LCD_Send_String (char *str)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	while (*str) LCD_Send_Char (*str++);
 8001078:	e006      	b.n	8001088 <LCD_Send_String+0x18>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	1c5a      	adds	r2, r3, #1
 800107e:	607a      	str	r2, [r7, #4]
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ff94 	bl	8000fb0 <LCD_Send_Char>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d1f4      	bne.n	800107a <LCD_Send_String+0xa>
}
 8001090:	bf00      	nop
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <Keypad_Init>:
// ColPins: PC4, PB0, PB2, PE8
GPIO_TypeDef *ColPort[NUMCOLS] = {GPIOC, GPIOB, GPIOB, GPIOE};
uint32_t ColPins[NUMCOLS] = {GPIO_PIN_4, GPIO_PIN_0, GPIO_PIN_2, GPIO_PIN_8};

void Keypad_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, ColPins[0], GPIO_PIN_SET);
 80010a0:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <Keypad_Init+0x48>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	2201      	movs	r2, #1
 80010a8:	4619      	mov	r1, r3
 80010aa:	480f      	ldr	r0, [pc, #60]	; (80010e8 <Keypad_Init+0x4c>)
 80010ac:	f001 fb1a 	bl	80026e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, ColPins[1], GPIO_PIN_SET);
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <Keypad_Init+0x48>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	2201      	movs	r2, #1
 80010b8:	4619      	mov	r1, r3
 80010ba:	480b      	ldr	r0, [pc, #44]	; (80010e8 <Keypad_Init+0x4c>)
 80010bc:	f001 fb12 	bl	80026e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, ColPins[2], GPIO_PIN_SET);
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <Keypad_Init+0x48>)
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	2201      	movs	r2, #1
 80010c8:	4619      	mov	r1, r3
 80010ca:	4807      	ldr	r0, [pc, #28]	; (80010e8 <Keypad_Init+0x4c>)
 80010cc:	f001 fb0a 	bl	80026e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, ColPins[3], GPIO_PIN_SET);
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <Keypad_Init+0x48>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	2201      	movs	r2, #1
 80010d8:	4619      	mov	r1, r3
 80010da:	4803      	ldr	r0, [pc, #12]	; (80010e8 <Keypad_Init+0x4c>)
 80010dc:	f001 fb02 	bl	80026e4 <HAL_GPIO_WritePin>
}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000030 	.word	0x20000030
 80010e8:	40020000 	.word	0x40020000

080010ec <Keypad_ReadKey>:

char Keypad_ReadKey(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
  char keyValue = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	71fb      	strb	r3, [r7, #7]
  while(keyValue == 0)
 80010f6:	e051      	b.n	800119c <Keypad_ReadKey+0xb0>
  {
	  for(int colum = 0; colum < NUMCOLS; colum++)
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	e04b      	b.n	8001196 <Keypad_ReadKey+0xaa>
	  {
	    HAL_GPIO_WritePin(ColPort[colum], ColPins[colum], GPIO_PIN_RESET);
 80010fe:	4a2b      	ldr	r2, [pc, #172]	; (80011ac <Keypad_ReadKey+0xc0>)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001106:	4a2a      	ldr	r2, [pc, #168]	; (80011b0 <Keypad_ReadKey+0xc4>)
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110e:	b29b      	uxth	r3, r3
 8001110:	2200      	movs	r2, #0
 8001112:	4619      	mov	r1, r3
 8001114:	f001 fae6 	bl	80026e4 <HAL_GPIO_WritePin>
	    for(int row = 0; row < NUMROWS; row++)
 8001118:	2300      	movs	r3, #0
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	e028      	b.n	8001170 <Keypad_ReadKey+0x84>
	    {
	      if(HAL_GPIO_ReadPin(GPIOA, RowPins[row]) == 0)
 800111e:	4a25      	ldr	r2, [pc, #148]	; (80011b4 <Keypad_ReadKey+0xc8>)
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001126:	b29b      	uxth	r3, r3
 8001128:	4619      	mov	r1, r3
 800112a:	4823      	ldr	r0, [pc, #140]	; (80011b8 <Keypad_ReadKey+0xcc>)
 800112c:	f001 fac2 	bl	80026b4 <HAL_GPIO_ReadPin>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d119      	bne.n	800116a <Keypad_ReadKey+0x7e>
	      {
	        HAL_Delay(50);// debound
 8001136:	2032      	movs	r0, #50	; 0x32
 8001138:	f001 f816 	bl	8002168 <HAL_Delay>
	        while(HAL_GPIO_ReadPin(GPIOA, RowPins[row])==0) {}
 800113c:	bf00      	nop
 800113e:	4a1d      	ldr	r2, [pc, #116]	; (80011b4 <Keypad_ReadKey+0xc8>)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001146:	b29b      	uxth	r3, r3
 8001148:	4619      	mov	r1, r3
 800114a:	481b      	ldr	r0, [pc, #108]	; (80011b8 <Keypad_ReadKey+0xcc>)
 800114c:	f001 fab2 	bl	80026b4 <HAL_GPIO_ReadPin>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d0f3      	beq.n	800113e <Keypad_ReadKey+0x52>
	        keyValue = KeyMap[row][colum];
 8001156:	4a19      	ldr	r2, [pc, #100]	; (80011bc <Keypad_ReadKey+0xd0>)
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	441a      	add	r2, r3
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	4413      	add	r3, r2
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	71fb      	strb	r3, [r7, #7]
	        return keyValue;
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	e01c      	b.n	80011a4 <Keypad_ReadKey+0xb8>
	    for(int row = 0; row < NUMROWS; row++)
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	3301      	adds	r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	2b03      	cmp	r3, #3
 8001174:	ddd3      	ble.n	800111e <Keypad_ReadKey+0x32>
	      }
	    }
	    HAL_GPIO_WritePin(ColPort[colum], ColPins[colum], GPIO_PIN_SET);
 8001176:	4a0d      	ldr	r2, [pc, #52]	; (80011ac <Keypad_ReadKey+0xc0>)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800117e:	4a0c      	ldr	r2, [pc, #48]	; (80011b0 <Keypad_ReadKey+0xc4>)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001186:	b29b      	uxth	r3, r3
 8001188:	2201      	movs	r2, #1
 800118a:	4619      	mov	r1, r3
 800118c:	f001 faaa 	bl	80026e4 <HAL_GPIO_WritePin>
	  for(int colum = 0; colum < NUMCOLS; colum++)
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	3301      	adds	r3, #1
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2b03      	cmp	r3, #3
 800119a:	ddb0      	ble.n	80010fe <Keypad_ReadKey+0x12>
  while(keyValue == 0)
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0aa      	beq.n	80010f8 <Keypad_ReadKey+0xc>
	  }

  }

  return 0;
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000020 	.word	0x20000020
 80011b0:	20000030 	.word	0x20000030
 80011b4:	20000010 	.word	0x20000010
 80011b8:	40020000 	.word	0x40020000
 80011bc:	20000000 	.word	0x20000000

080011c0 <DisplayNum>:
// Define the number of decimal place to be rounded
#define ROUND 6
#define PI 3.141592654
// Display number to LCD
void DisplayNum(double lfNum)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	ed87 0b00 	vstr	d0, [r7]
  // Khai báo mảng kí tự xuất ra màn hình
  char result_arr[20] = {0};
 80011ca:	2300      	movs	r3, #0
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	f107 030c 	add.w	r3, r7, #12
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
  int index = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]

  int nNum = (int)lfNum;	// lấy phần nguyên của số đưa vào
 80011e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011e4:	f7ff fcb8 	bl	8000b58 <__aeabi_d2iz>
 80011e8:	4603      	mov	r3, r0
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24

  itoa(nNum, result_arr, 10);  // chuyển số thành chuỗi và lưu vào mảng result_arr
 80011ec:	f107 0308 	add.w	r3, r7, #8
 80011f0:	220a      	movs	r2, #10
 80011f2:	4619      	mov	r1, r3
 80011f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011f6:	f002 fb81 	bl	80038fc <itoa>

  if(lfNum - nNum == 0)	// Kiểm tra nếu kq là số nguyên thì xuất chuỗi result_arr ra màn hình luôn
 80011fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011fc:	f7ff f992 	bl	8000524 <__aeabi_i2d>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001208:	f7ff f83e 	bl	8000288 <__aeabi_dsub>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	f04f 0300 	mov.w	r3, #0
 800121c:	f7ff fc54 	bl	8000ac8 <__aeabi_dcmpeq>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d005      	beq.n	8001232 <DisplayNum+0x72>
  {
    LCD_Send_String(result_arr);
 8001226:	f107 0308 	add.w	r3, r7, #8
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff ff20 	bl	8001070 <LCD_Send_String>
      nNum = (int)lfNum;
      result_arr[index + i] =  nNum + 48;
    }
    LCD_Send_String(result_arr);
  }
}
 8001230:	e05b      	b.n	80012ea <DisplayNum+0x12a>
    index = strlen(result_arr);
 8001232:	f107 0308 	add.w	r3, r7, #8
 8001236:	4618      	mov	r0, r3
 8001238:	f7fe ffca 	bl	80001d0 <strlen>
 800123c:	4603      	mov	r3, r0
 800123e:	61fb      	str	r3, [r7, #28]
    result_arr[index] = '.';
 8001240:	f107 0208 	add.w	r2, r7, #8
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	4413      	add	r3, r2
 8001248:	222e      	movs	r2, #46	; 0x2e
 800124a:	701a      	strb	r2, [r3, #0]
    index ++;
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	3301      	adds	r3, #1
 8001250:	61fb      	str	r3, [r7, #28]
    if(lfNum < 0) {
 8001252:	f04f 0200 	mov.w	r2, #0
 8001256:	f04f 0300 	mov.w	r3, #0
 800125a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800125e:	f7ff fc3d 	bl	8000adc <__aeabi_dcmplt>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d008      	beq.n	800127a <DisplayNum+0xba>
    	lfNum = -lfNum;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001272:	607b      	str	r3, [r7, #4]
    	nNum = -nNum;
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	425b      	negs	r3, r3
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
    for(int i = 0; i < ROUND; i++)
 800127a:	2300      	movs	r3, #0
 800127c:	623b      	str	r3, [r7, #32]
 800127e:	e02c      	b.n	80012da <DisplayNum+0x11a>
      lfNum = lfNum - nNum;
 8001280:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001282:	f7ff f94f 	bl	8000524 <__aeabi_i2d>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800128e:	f7fe fffb 	bl	8000288 <__aeabi_dsub>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	e9c7 2300 	strd	r2, r3, [r7]
      lfNum = lfNum * 10;
 800129a:	f04f 0200 	mov.w	r2, #0
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <DisplayNum+0x134>)
 80012a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012a4:	f7ff f9a8 	bl	80005f8 <__aeabi_dmul>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	e9c7 2300 	strd	r2, r3, [r7]
      nNum = (int)lfNum;
 80012b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012b4:	f7ff fc50 	bl	8000b58 <__aeabi_d2iz>
 80012b8:	4603      	mov	r3, r0
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
      result_arr[index + i] =  nNum + 48;
 80012bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	69f9      	ldr	r1, [r7, #28]
 80012c2:	6a3b      	ldr	r3, [r7, #32]
 80012c4:	440b      	add	r3, r1
 80012c6:	3230      	adds	r2, #48	; 0x30
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80012ce:	440b      	add	r3, r1
 80012d0:	f803 2c20 	strb.w	r2, [r3, #-32]
    for(int i = 0; i < ROUND; i++)
 80012d4:	6a3b      	ldr	r3, [r7, #32]
 80012d6:	3301      	adds	r3, #1
 80012d8:	623b      	str	r3, [r7, #32]
 80012da:	6a3b      	ldr	r3, [r7, #32]
 80012dc:	2b05      	cmp	r3, #5
 80012de:	ddcf      	ble.n	8001280 <DisplayNum+0xc0>
    LCD_Send_String(result_arr);
 80012e0:	f107 0308 	add.w	r3, r7, #8
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff fec3 	bl	8001070 <LCD_Send_String>
}
 80012ea:	bf00      	nop
 80012ec:	3728      	adds	r7, #40	; 0x28
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40240000 	.word	0x40240000

080012f8 <BasicCalculator>:

// Start calculating in basic mode
void BasicCalculator()
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08e      	sub	sp, #56	; 0x38
 80012fc:	af00      	add	r7, sp, #0
  // Clear LCD
  LCD_Send_Cmd(0x01);
 80012fe:	2001      	movs	r0, #1
 8001300:	f7ff fe24 	bl	8000f4c <LCD_Send_Cmd>
  LCD_Send_String("Basic Calculator");
 8001304:	48a9      	ldr	r0, [pc, #676]	; (80015ac <BasicCalculator+0x2b4>)
 8001306:	f7ff feb3 	bl	8001070 <LCD_Send_String>
  HAL_Delay(500);
 800130a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800130e:	f000 ff2b 	bl	8002168 <HAL_Delay>
  LCD_Send_Cmd(0x01);
 8001312:	2001      	movs	r0, #1
 8001314:	f7ff fe1a 	bl	8000f4c <LCD_Send_Cmd>

  // Declare variables and flag
  double lfOperand1 = 0, lfOperand2 = 0, lfResult = 0;
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	f04f 0300 	mov.w	r3, #0
 8001320:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	f04f 0300 	mov.w	r3, #0
 800132c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	f04f 0300 	mov.w	r3, #0
 8001338:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

  char oprd1_arr[10] = {0};
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	f107 0310 	add.w	r3, r7, #16
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	809a      	strh	r2, [r3, #4]
  char oprd2_arr[10] = {0};
 800134a:	2300      	movs	r3, #0
 800134c:	603b      	str	r3, [r7, #0]
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	809a      	strh	r2, [r3, #4]
  uint8_t oprd1_idx = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t oprd2_idx = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

  char temp_char = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  char operator = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t LCD_Cnt = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  bool isOperand2 = false;
 8001374:	2300      	movs	r3, #0
 8001376:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  //Start while loop to get expression
  while(1)
  {
    // Get character from keypad
    temp_char = Keypad_ReadKey();
 800137a:	f7ff feb7 	bl	80010ec <Keypad_ReadKey>
 800137e:	4603      	mov	r3, r0
 8001380:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    HAL_Delay(20);
 8001384:	2014      	movs	r0, #20
 8001386:	f000 feef 	bl	8002168 <HAL_Delay>
    if(temp_char == 'A')  temp_char = '+';
 800138a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800138e:	2b41      	cmp	r3, #65	; 0x41
 8001390:	d103      	bne.n	800139a <BasicCalculator+0xa2>
 8001392:	232b      	movs	r3, #43	; 0x2b
 8001394:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001398:	e023      	b.n	80013e2 <BasicCalculator+0xea>
    else if(temp_char == 'B')  temp_char = '-';
 800139a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800139e:	2b42      	cmp	r3, #66	; 0x42
 80013a0:	d103      	bne.n	80013aa <BasicCalculator+0xb2>
 80013a2:	232d      	movs	r3, #45	; 0x2d
 80013a4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80013a8:	e01b      	b.n	80013e2 <BasicCalculator+0xea>
    else if(temp_char == 'C')  temp_char = 'x';
 80013aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80013ae:	2b43      	cmp	r3, #67	; 0x43
 80013b0:	d103      	bne.n	80013ba <BasicCalculator+0xc2>
 80013b2:	2378      	movs	r3, #120	; 0x78
 80013b4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80013b8:	e013      	b.n	80013e2 <BasicCalculator+0xea>
    else if(temp_char == 'D')  temp_char = '/';
 80013ba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80013be:	2b44      	cmp	r3, #68	; 0x44
 80013c0:	d103      	bne.n	80013ca <BasicCalculator+0xd2>
 80013c2:	232f      	movs	r3, #47	; 0x2f
 80013c4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80013c8:	e00b      	b.n	80013e2 <BasicCalculator+0xea>
    else if(temp_char == '*')  temp_char = '.';
 80013ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80013ce:	2b2a      	cmp	r3, #42	; 0x2a
 80013d0:	d103      	bne.n	80013da <BasicCalculator+0xe2>
 80013d2:	232e      	movs	r3, #46	; 0x2e
 80013d4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80013d8:	e003      	b.n	80013e2 <BasicCalculator+0xea>
    else if(temp_char == '#')  break;
 80013da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80013de:	2b23      	cmp	r3, #35	; 0x23
 80013e0:	d06f      	beq.n	80014c2 <BasicCalculator+0x1ca>

    if(temp_char == '+' || temp_char == '-' || temp_char == 'x' || temp_char == '/')
 80013e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80013e6:	2b2b      	cmp	r3, #43	; 0x2b
 80013e8:	d00b      	beq.n	8001402 <BasicCalculator+0x10a>
 80013ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80013ee:	2b2d      	cmp	r3, #45	; 0x2d
 80013f0:	d007      	beq.n	8001402 <BasicCalculator+0x10a>
 80013f2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80013f6:	2b78      	cmp	r3, #120	; 0x78
 80013f8:	d003      	beq.n	8001402 <BasicCalculator+0x10a>
 80013fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80013fe:	2b2f      	cmp	r3, #47	; 0x2f
 8001400:	d113      	bne.n	800142a <BasicCalculator+0x132>
    {
      if(oprd1_idx != 0 && operator == 0)
 8001402:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00f      	beq.n	800142a <BasicCalculator+0x132>
 800140a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10b      	bne.n	800142a <BasicCalculator+0x132>
      {
    	  operator = temp_char;
 8001412:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001416:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    	  isOperand2 = true;
 800141a:	2301      	movs	r3, #1
 800141c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    	  LCD_Send_Char(operator);
 8001420:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fdc3 	bl	8000fb0 <LCD_Send_Char>
      }
    }

    if(isOperand2 == false && temp_char != operator)
 800142a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800142e:	f083 0301 	eor.w	r3, r3, #1
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b00      	cmp	r3, #0
 8001436:	d019      	beq.n	800146c <BasicCalculator+0x174>
 8001438:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800143c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001440:	429a      	cmp	r2, r3
 8001442:	d013      	beq.n	800146c <BasicCalculator+0x174>
    {
      LCD_Send_Char(temp_char);
 8001444:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fdb1 	bl	8000fb0 <LCD_Send_Char>
      oprd1_arr[oprd1_idx] = temp_char;
 800144e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001452:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001456:	4413      	add	r3, r2
 8001458:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800145c:	f803 2c2c 	strb.w	r2, [r3, #-44]
      oprd1_idx++;
 8001460:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001464:	3301      	adds	r3, #1
 8001466:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800146a:	e01c      	b.n	80014a6 <BasicCalculator+0x1ae>
    }
    else if(isOperand2 == true && temp_char != operator)
 800146c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001470:	2b00      	cmp	r3, #0
 8001472:	d018      	beq.n	80014a6 <BasicCalculator+0x1ae>
 8001474:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001478:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800147c:	429a      	cmp	r2, r3
 800147e:	d012      	beq.n	80014a6 <BasicCalculator+0x1ae>
    {
      LCD_Send_Char(temp_char);
 8001480:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff fd93 	bl	8000fb0 <LCD_Send_Char>
      oprd2_arr[oprd2_idx] = temp_char;
 800148a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800148e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001492:	4413      	add	r3, r2
 8001494:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001498:	f803 2c38 	strb.w	r2, [r3, #-56]
      oprd2_idx++;
 800149c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80014a0:	3301      	adds	r3, #1
 80014a2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    }

    // If data length > 16, shift left the screen when display data
    LCD_Cnt++;
 80014a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80014aa:	3301      	adds	r3, #1
 80014ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if(LCD_Cnt > 16)  LCD_Send_Cmd(0x18);
 80014b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80014b4:	2b10      	cmp	r3, #16
 80014b6:	f67f af60 	bls.w	800137a <BasicCalculator+0x82>
 80014ba:	2018      	movs	r0, #24
 80014bc:	f7ff fd46 	bl	8000f4c <LCD_Send_Cmd>
    temp_char = Keypad_ReadKey();
 80014c0:	e75b      	b.n	800137a <BasicCalculator+0x82>
    else if(temp_char == '#')  break;
 80014c2:	bf00      	nop

  // End while loop
  }

  lfOperand1 = atof(oprd1_arr);
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	4618      	mov	r0, r3
 80014ca:	f002 f9d1 	bl	8003870 <atof>
 80014ce:	ed87 0b08 	vstr	d0, [r7, #32]
  lfOperand2 = atof(oprd2_arr);
 80014d2:	463b      	mov	r3, r7
 80014d4:	4618      	mov	r0, r3
 80014d6:	f002 f9cb 	bl	8003870 <atof>
 80014da:	ed87 0b06 	vstr	d0, [r7, #24]

  // Start calculate
  switch(operator)
 80014de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80014e2:	2b78      	cmp	r3, #120	; 0x78
 80014e4:	d020      	beq.n	8001528 <BasicCalculator+0x230>
 80014e6:	2b78      	cmp	r3, #120	; 0x78
 80014e8:	dc4c      	bgt.n	8001584 <BasicCalculator+0x28c>
 80014ea:	2b2f      	cmp	r3, #47	; 0x2f
 80014ec:	d027      	beq.n	800153e <BasicCalculator+0x246>
 80014ee:	2b2f      	cmp	r3, #47	; 0x2f
 80014f0:	dc48      	bgt.n	8001584 <BasicCalculator+0x28c>
 80014f2:	2b2b      	cmp	r3, #43	; 0x2b
 80014f4:	d002      	beq.n	80014fc <BasicCalculator+0x204>
 80014f6:	2b2d      	cmp	r3, #45	; 0x2d
 80014f8:	d00b      	beq.n	8001512 <BasicCalculator+0x21a>
 80014fa:	e03a      	b.n	8001572 <BasicCalculator+0x27a>
  {
    case '+':
      lfResult = lfOperand1 + lfOperand2;
 80014fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001500:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001504:	f7fe fec2 	bl	800028c <__adddf3>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      break;
 8001510:	e02f      	b.n	8001572 <BasicCalculator+0x27a>
    case '-' :
      lfResult = lfOperand1 - lfOperand2;
 8001512:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001516:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800151a:	f7fe feb5 	bl	8000288 <__aeabi_dsub>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      break;
 8001526:	e024      	b.n	8001572 <BasicCalculator+0x27a>
    case 'x' :
      lfResult = lfOperand1 * lfOperand2;
 8001528:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800152c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001530:	f7ff f862 	bl	80005f8 <__aeabi_dmul>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      break;
 800153c:	e019      	b.n	8001572 <BasicCalculator+0x27a>
    case '/' :
      lfResult = lfOperand1 / lfOperand2;
 800153e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001542:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001546:	f7ff f981 	bl	800084c <__aeabi_ddiv>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      if (lfOperand2 ==0)  { LCD_Send_String("MATH ERROR"); return; }
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	f04f 0300 	mov.w	r3, #0
 800155a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800155e:	f7ff fab3 	bl	8000ac8 <__aeabi_dcmpeq>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d100      	bne.n	800156a <BasicCalculator+0x272>
      break;
 8001568:	e003      	b.n	8001572 <BasicCalculator+0x27a>
      if (lfOperand2 ==0)  { LCD_Send_String("MATH ERROR"); return; }
 800156a:	4811      	ldr	r0, [pc, #68]	; (80015b0 <BasicCalculator+0x2b8>)
 800156c:	f7ff fd80 	bl	8001070 <LCD_Send_String>
 8001570:	e019      	b.n	80015a6 <BasicCalculator+0x2ae>
  }

  // If expression is more than 16 characters, shift right the screen before display result
  while(LCD_Cnt - 16 > 0)
 8001572:	e007      	b.n	8001584 <BasicCalculator+0x28c>
  {
    LCD_Send_Cmd(0x1C);
 8001574:	201c      	movs	r0, #28
 8001576:	f7ff fce9 	bl	8000f4c <LCD_Send_Cmd>
    LCD_Cnt--;
 800157a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800157e:	3b01      	subs	r3, #1
 8001580:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  while(LCD_Cnt - 16 > 0)
 8001584:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001588:	2b10      	cmp	r3, #16
 800158a:	d8f3      	bhi.n	8001574 <BasicCalculator+0x27c>
  }

  HAL_Delay(50);
 800158c:	2032      	movs	r0, #50	; 0x32
 800158e:	f000 fdeb 	bl	8002168 <HAL_Delay>
  LCD_Send_Cmd(0xC0);
 8001592:	20c0      	movs	r0, #192	; 0xc0
 8001594:	f7ff fcda 	bl	8000f4c <LCD_Send_Cmd>
  LCD_Send_Char('=');
 8001598:	203d      	movs	r0, #61	; 0x3d
 800159a:	f7ff fd09 	bl	8000fb0 <LCD_Send_Char>

  // Display result to LCD
  DisplayNum(lfResult);
 800159e:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80015a2:	f7ff fe0d 	bl	80011c0 <DisplayNum>

  //End basic calculator
}
 80015a6:	3738      	adds	r7, #56	; 0x38
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	08008be0 	.word	0x08008be0
 80015b0:	08008bf4 	.word	0x08008bf4

080015b4 <AdvanceCalculator>:
 * B = Căn bậc 2
 * C = Căn bậc 3
 * D = exp
 * */
void AdvanceCalculator(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08e      	sub	sp, #56	; 0x38
 80015b8:	af00      	add	r7, sp, #0
  // Clear LCD
  LCD_Send_Cmd(0x01);
 80015ba:	2001      	movs	r0, #1
 80015bc:	f7ff fcc6 	bl	8000f4c <LCD_Send_Cmd>
  LCD_Send_String("Advance Calculator");
 80015c0:	487e      	ldr	r0, [pc, #504]	; (80017bc <AdvanceCalculator+0x208>)
 80015c2:	f7ff fd55 	bl	8001070 <LCD_Send_String>
  HAL_Delay(500);
 80015c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015ca:	f000 fdcd 	bl	8002168 <HAL_Delay>
  LCD_Send_Cmd(0x01);
 80015ce:	2001      	movs	r0, #1
 80015d0:	f7ff fcbc 	bl	8000f4c <LCD_Send_Cmd>

  // Declare variables and flag
  double lfOperand1 = 0, lfOperand2 = 0, lfResult = 0;
 80015d4:	f04f 0200 	mov.w	r2, #0
 80015d8:	f04f 0300 	mov.w	r3, #0
 80015dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	f04f 0300 	mov.w	r3, #0
 80015e8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80015ec:	f04f 0200 	mov.w	r2, #0
 80015f0:	f04f 0300 	mov.w	r3, #0
 80015f4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  char oprd1_arr[10] = {0};
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	f107 0310 	add.w	r3, r7, #16
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	809a      	strh	r2, [r3, #4]
  char oprd2_arr[10] = {0};
 8001606:	2300      	movs	r3, #0
 8001608:	603b      	str	r3, [r7, #0]
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	809a      	strh	r2, [r3, #4]
  uint8_t oprd1_idx = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t oprd2_idx = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  char operator = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  char temp_char = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  bool isOperand2 = false;
 800162a:	2300      	movs	r3, #0
 800162c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  //Start while loop to get expression
  while(1)
  {
    // Get character from keypad
    temp_char = Keypad_ReadKey();
 8001630:	f7ff fd5c 	bl	80010ec <Keypad_ReadKey>
 8001634:	4603      	mov	r3, r0
 8001636:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    HAL_Delay(20);
 800163a:	2014      	movs	r0, #20
 800163c:	f000 fd94 	bl	8002168 <HAL_Delay>

    switch(temp_char)
 8001640:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001644:	2b43      	cmp	r3, #67	; 0x43
 8001646:	d019      	beq.n	800167c <AdvanceCalculator+0xc8>
 8001648:	2b43      	cmp	r3, #67	; 0x43
 800164a:	dc1f      	bgt.n	800168c <AdvanceCalculator+0xd8>
 800164c:	2b41      	cmp	r3, #65	; 0x41
 800164e:	d002      	beq.n	8001656 <AdvanceCalculator+0xa2>
 8001650:	2b42      	cmp	r3, #66	; 0x42
 8001652:	d00b      	beq.n	800166c <AdvanceCalculator+0xb8>
 8001654:	e01a      	b.n	800168c <AdvanceCalculator+0xd8>
    {
      case 'A':
        operator = temp_char;
 8001656:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800165a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        isOperand2 = true;
 800165e:	2301      	movs	r3, #1
 8001660:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        LCD_Send_String("^(");
 8001664:	4856      	ldr	r0, [pc, #344]	; (80017c0 <AdvanceCalculator+0x20c>)
 8001666:	f7ff fd03 	bl	8001070 <LCD_Send_String>
        break;
 800166a:	e00f      	b.n	800168c <AdvanceCalculator+0xd8>
      case 'B':
        operator = temp_char;
 800166c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001670:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        LCD_Send_String("sqrt(");
 8001674:	4853      	ldr	r0, [pc, #332]	; (80017c4 <AdvanceCalculator+0x210>)
 8001676:	f7ff fcfb 	bl	8001070 <LCD_Send_String>
        break;
 800167a:	e007      	b.n	800168c <AdvanceCalculator+0xd8>
      case 'C':
        operator = temp_char;
 800167c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001680:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        LCD_Send_String("cbrt(");
 8001684:	4850      	ldr	r0, [pc, #320]	; (80017c8 <AdvanceCalculator+0x214>)
 8001686:	f7ff fcf3 	bl	8001070 <LCD_Send_String>
        break;
 800168a:	bf00      	nop
    }

    if(temp_char == 'D')  temp_char = '-';
 800168c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001690:	2b44      	cmp	r3, #68	; 0x44
 8001692:	d103      	bne.n	800169c <AdvanceCalculator+0xe8>
 8001694:	232d      	movs	r3, #45	; 0x2d
 8001696:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800169a:	e00b      	b.n	80016b4 <AdvanceCalculator+0x100>
    else if(temp_char == '*')  temp_char = '.';
 800169c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016a0:	2b2a      	cmp	r3, #42	; 0x2a
 80016a2:	d103      	bne.n	80016ac <AdvanceCalculator+0xf8>
 80016a4:	232e      	movs	r3, #46	; 0x2e
 80016a6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80016aa:	e003      	b.n	80016b4 <AdvanceCalculator+0x100>
    else if (temp_char == '#')  break;
 80016ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016b0:	2b23      	cmp	r3, #35	; 0x23
 80016b2:	d03e      	beq.n	8001732 <AdvanceCalculator+0x17e>

    // Check the character read from keypad and store in operand array
    if(isOperand2 == false && temp_char != operator)
 80016b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016b8:	f083 0301 	eor.w	r3, r3, #1
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d019      	beq.n	80016f6 <AdvanceCalculator+0x142>
 80016c2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80016c6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d013      	beq.n	80016f6 <AdvanceCalculator+0x142>
    {
      LCD_Send_Char(temp_char);
 80016ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fc6c 	bl	8000fb0 <LCD_Send_Char>
      oprd1_arr[oprd1_idx] = temp_char;
 80016d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016dc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80016e0:	4413      	add	r3, r2
 80016e2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80016e6:	f803 2c2c 	strb.w	r2, [r3, #-44]
      oprd1_idx++;
 80016ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016ee:	3301      	adds	r3, #1
 80016f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016f4:	e01c      	b.n	8001730 <AdvanceCalculator+0x17c>
    }
    else if(isOperand2 == true && temp_char != operator)
 80016f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d098      	beq.n	8001630 <AdvanceCalculator+0x7c>
 80016fe:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001702:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001706:	429a      	cmp	r2, r3
 8001708:	d092      	beq.n	8001630 <AdvanceCalculator+0x7c>
    {
      LCD_Send_Char(temp_char);
 800170a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fc4e 	bl	8000fb0 <LCD_Send_Char>
      oprd2_arr[oprd2_idx] = temp_char;
 8001714:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001718:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800171c:	4413      	add	r3, r2
 800171e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001722:	f803 2c38 	strb.w	r2, [r3, #-56]
      oprd2_idx++;
 8001726:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800172a:	3301      	adds	r3, #1
 800172c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    temp_char = Keypad_ReadKey();
 8001730:	e77e      	b.n	8001630 <AdvanceCalculator+0x7c>
    else if (temp_char == '#')  break;
 8001732:	bf00      	nop
    }

  // End while loop
  }

  lfOperand1 = atof(oprd1_arr);
 8001734:	f107 030c 	add.w	r3, r7, #12
 8001738:	4618      	mov	r0, r3
 800173a:	f002 f899 	bl	8003870 <atof>
 800173e:	ed87 0b06 	vstr	d0, [r7, #24]
  if(isOperand2 == true)  lfOperand2 = atof(oprd2_arr);
 8001742:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001746:	2b00      	cmp	r3, #0
 8001748:	d005      	beq.n	8001756 <AdvanceCalculator+0x1a2>
 800174a:	463b      	mov	r3, r7
 800174c:	4618      	mov	r0, r3
 800174e:	f002 f88f 	bl	8003870 <atof>
 8001752:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30

  switch (operator)
 8001756:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800175a:	2b43      	cmp	r3, #67	; 0x43
 800175c:	d016      	beq.n	800178c <AdvanceCalculator+0x1d8>
 800175e:	2b43      	cmp	r3, #67	; 0x43
 8001760:	dc1b      	bgt.n	800179a <AdvanceCalculator+0x1e6>
 8001762:	2b41      	cmp	r3, #65	; 0x41
 8001764:	d002      	beq.n	800176c <AdvanceCalculator+0x1b8>
 8001766:	2b42      	cmp	r3, #66	; 0x42
 8001768:	d009      	beq.n	800177e <AdvanceCalculator+0x1ca>
 800176a:	e016      	b.n	800179a <AdvanceCalculator+0x1e6>
  {
    case 'A':
      lfResult = pow(lfOperand1, lfOperand2);
 800176c:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8001770:	ed97 0b06 	vldr	d0, [r7, #24]
 8001774:	f005 f91c 	bl	80069b0 <pow>
 8001778:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
      break;
 800177c:	e00d      	b.n	800179a <AdvanceCalculator+0x1e6>
    case 'B':
      lfResult = sqrt(lfOperand1);
 800177e:	ed97 0b06 	vldr	d0, [r7, #24]
 8001782:	f005 f9c3 	bl	8006b0c <sqrt>
 8001786:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
      break;
 800178a:	e006      	b.n	800179a <AdvanceCalculator+0x1e6>
    case 'C':
      lfResult = cbrt(lfOperand1);
 800178c:	ed97 0b06 	vldr	d0, [r7, #24]
 8001790:	f004 ff76 	bl	8006680 <cbrt>
 8001794:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
      break;
 8001798:	bf00      	nop
  }

  LCD_Send_Char(')');
 800179a:	2029      	movs	r0, #41	; 0x29
 800179c:	f7ff fc08 	bl	8000fb0 <LCD_Send_Char>
  LCD_Send_Cmd(0xC0);
 80017a0:	20c0      	movs	r0, #192	; 0xc0
 80017a2:	f7ff fbd3 	bl	8000f4c <LCD_Send_Cmd>
  LCD_Send_Char('=');
 80017a6:	203d      	movs	r0, #61	; 0x3d
 80017a8:	f7ff fc02 	bl	8000fb0 <LCD_Send_Char>

  DisplayNum(lfResult);
 80017ac:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 80017b0:	f7ff fd06 	bl	80011c0 <DisplayNum>
// End Advance Calculator
}
 80017b4:	bf00      	nop
 80017b6:	3738      	adds	r7, #56	; 0x38
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	08008c00 	.word	0x08008c00
 80017c0:	08008c14 	.word	0x08008c14
 80017c4:	08008c18 	.word	0x08008c18
 80017c8:	08008c20 	.word	0x08008c20
 80017cc:	00000000 	.word	0x00000000

080017d0 <TrigonometricCalculator>:

void TrigonometricCalculator(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08c      	sub	sp, #48	; 0x30
 80017d4:	af00      	add	r7, sp, #0
  // Clear LCD
  LCD_Send_Cmd(0x01);
 80017d6:	2001      	movs	r0, #1
 80017d8:	f7ff fbb8 	bl	8000f4c <LCD_Send_Cmd>
  LCD_Send_String("Trigonometric");
 80017dc:	4888      	ldr	r0, [pc, #544]	; (8001a00 <TrigonometricCalculator+0x230>)
 80017de:	f7ff fc47 	bl	8001070 <LCD_Send_String>
  LCD_Send_Cmd(0xC0);
 80017e2:	20c0      	movs	r0, #192	; 0xc0
 80017e4:	f7ff fbb2 	bl	8000f4c <LCD_Send_Cmd>
  LCD_Send_String("Calculator");
 80017e8:	4886      	ldr	r0, [pc, #536]	; (8001a04 <TrigonometricCalculator+0x234>)
 80017ea:	f7ff fc41 	bl	8001070 <LCD_Send_String>
  HAL_Delay(500);
 80017ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017f2:	f000 fcb9 	bl	8002168 <HAL_Delay>
  LCD_Send_Cmd(0x01);
 80017f6:	2001      	movs	r0, #1
 80017f8:	f7ff fba8 	bl	8000f4c <LCD_Send_Cmd>

  // Declare variables and flag
  double lfOperand = 0, lfResult = 0;
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	f04f 0300 	mov.w	r3, #0
 8001804:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  char oprd_arr[10] = {0};
 8001814:	2300      	movs	r3, #0
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	f107 0308 	add.w	r3, r7, #8
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	809a      	strh	r2, [r3, #4]
  uint8_t oprd_idx = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  char operator = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  char temp_char = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  //Start while loop to get expression
  while(1)
  {
	// Get character from keypad
	temp_char = Keypad_ReadKey();
 8001834:	f7ff fc5a 	bl	80010ec <Keypad_ReadKey>
 8001838:	4603      	mov	r3, r0
 800183a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	HAL_Delay(20);
 800183e:	2014      	movs	r0, #20
 8001840:	f000 fc92 	bl	8002168 <HAL_Delay>

	switch(temp_char)
 8001844:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001848:	3b41      	subs	r3, #65	; 0x41
 800184a:	2b03      	cmp	r3, #3
 800184c:	d82a      	bhi.n	80018a4 <TrigonometricCalculator+0xd4>
 800184e:	a201      	add	r2, pc, #4	; (adr r2, 8001854 <TrigonometricCalculator+0x84>)
 8001850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001854:	08001865 	.word	0x08001865
 8001858:	08001875 	.word	0x08001875
 800185c:	08001885 	.word	0x08001885
 8001860:	08001895 	.word	0x08001895
	{
	  case 'A':
		operator = temp_char;
 8001864:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001868:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		LCD_Send_String("sin(");
 800186c:	4866      	ldr	r0, [pc, #408]	; (8001a08 <TrigonometricCalculator+0x238>)
 800186e:	f7ff fbff 	bl	8001070 <LCD_Send_String>
		break;
 8001872:	e017      	b.n	80018a4 <TrigonometricCalculator+0xd4>
	  case 'B':
		operator = temp_char;
 8001874:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001878:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		LCD_Send_String("cos(");
 800187c:	4863      	ldr	r0, [pc, #396]	; (8001a0c <TrigonometricCalculator+0x23c>)
 800187e:	f7ff fbf7 	bl	8001070 <LCD_Send_String>
		break;
 8001882:	e00f      	b.n	80018a4 <TrigonometricCalculator+0xd4>
	  case 'C':
		operator = temp_char;
 8001884:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001888:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		LCD_Send_String("tan(");
 800188c:	4860      	ldr	r0, [pc, #384]	; (8001a10 <TrigonometricCalculator+0x240>)
 800188e:	f7ff fbef 	bl	8001070 <LCD_Send_String>
		break;
 8001892:	e007      	b.n	80018a4 <TrigonometricCalculator+0xd4>
	  case 'D':
	    operator = temp_char;
 8001894:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001898:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	    LCD_Send_String("cot(");
 800189c:	485d      	ldr	r0, [pc, #372]	; (8001a14 <TrigonometricCalculator+0x244>)
 800189e:	f7ff fbe7 	bl	8001070 <LCD_Send_String>
	    break;
 80018a2:	bf00      	nop
	}

	if(temp_char == '*')  temp_char = '.';
 80018a4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80018a8:	2b2a      	cmp	r3, #42	; 0x2a
 80018aa:	d103      	bne.n	80018b4 <TrigonometricCalculator+0xe4>
 80018ac:	232e      	movs	r3, #46	; 0x2e
 80018ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80018b2:	e003      	b.n	80018bc <TrigonometricCalculator+0xec>
	else if (temp_char == '#')  break;
 80018b4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80018b8:	2b23      	cmp	r3, #35	; 0x23
 80018ba:	d019      	beq.n	80018f0 <TrigonometricCalculator+0x120>

	if(temp_char != operator)
 80018bc:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80018c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d0b5      	beq.n	8001834 <TrigonometricCalculator+0x64>
	{
      LCD_Send_Char(temp_char);
 80018c8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fb6f 	bl	8000fb0 <LCD_Send_Char>
	  oprd_arr[oprd_idx] = temp_char;
 80018d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018d6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80018da:	4413      	add	r3, r2
 80018dc:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80018e0:	f803 2c2c 	strb.w	r2, [r3, #-44]
	  oprd_idx++;
 80018e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018e8:	3301      	adds	r3, #1
 80018ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	temp_char = Keypad_ReadKey();
 80018ee:	e7a1      	b.n	8001834 <TrigonometricCalculator+0x64>
	else if (temp_char == '#')  break;
 80018f0:	bf00      	nop
	}

  // End while loop
  }

  double degreeNum = atof(oprd_arr);
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	4618      	mov	r0, r3
 80018f6:	f001 ffbb 	bl	8003870 <atof>
 80018fa:	ed87 0b04 	vstr	d0, [r7, #16]
  // Convert degree to gradient
  lfOperand = (degreeNum * PI) / 180.0;
 80018fe:	a33e      	add	r3, pc, #248	; (adr r3, 80019f8 <TrigonometricCalculator+0x228>)
 8001900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001904:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001908:	f7fe fe76 	bl	80005f8 <__aeabi_dmul>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4610      	mov	r0, r2
 8001912:	4619      	mov	r1, r3
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	4b3f      	ldr	r3, [pc, #252]	; (8001a18 <TrigonometricCalculator+0x248>)
 800191a:	f7fe ff97 	bl	800084c <__aeabi_ddiv>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	e9c7 2306 	strd	r2, r3, [r7, #24]

  switch (operator)
 8001926:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800192a:	3b41      	subs	r3, #65	; 0x41
 800192c:	2b03      	cmp	r3, #3
 800192e:	d853      	bhi.n	80019d8 <TrigonometricCalculator+0x208>
 8001930:	a201      	add	r2, pc, #4	; (adr r2, 8001938 <TrigonometricCalculator+0x168>)
 8001932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001936:	bf00      	nop
 8001938:	08001949 	.word	0x08001949
 800193c:	08001957 	.word	0x08001957
 8001940:	08001965 	.word	0x08001965
 8001944:	08001995 	.word	0x08001995
  {
	case 'A':
	  lfResult = sin(lfOperand);
 8001948:	ed97 0b06 	vldr	d0, [r7, #24]
 800194c:	f004 ffac 	bl	80068a8 <sin>
 8001950:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	  break;
 8001954:	e040      	b.n	80019d8 <TrigonometricCalculator+0x208>
	case 'B':
	  lfResult = cos(lfOperand);
 8001956:	ed97 0b06 	vldr	d0, [r7, #24]
 800195a:	f004 ff55 	bl	8006808 <cos>
 800195e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	  break;
 8001962:	e039      	b.n	80019d8 <TrigonometricCalculator+0x208>
	case 'C':
	  if(degreeNum == 90)
 8001964:	f04f 0200 	mov.w	r2, #0
 8001968:	4b2c      	ldr	r3, [pc, #176]	; (8001a1c <TrigonometricCalculator+0x24c>)
 800196a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800196e:	f7ff f8ab 	bl	8000ac8 <__aeabi_dcmpeq>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d006      	beq.n	8001986 <TrigonometricCalculator+0x1b6>
	  {
	    LCD_Send_Cmd(0x01);
 8001978:	2001      	movs	r0, #1
 800197a:	f7ff fae7 	bl	8000f4c <LCD_Send_Cmd>
	    LCD_Send_String("Math Error");
 800197e:	4828      	ldr	r0, [pc, #160]	; (8001a20 <TrigonometricCalculator+0x250>)
 8001980:	f7ff fb76 	bl	8001070 <LCD_Send_String>
	    return;
 8001984:	e035      	b.n	80019f2 <TrigonometricCalculator+0x222>
	  }
	  lfResult = tan(lfOperand);
 8001986:	ed97 0b06 	vldr	d0, [r7, #24]
 800198a:	f004 ffe1 	bl	8006950 <tan>
 800198e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	  break;
 8001992:	e021      	b.n	80019d8 <TrigonometricCalculator+0x208>
	case 'D':
	  if(degreeNum == 0)
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	f04f 0300 	mov.w	r3, #0
 800199c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019a0:	f7ff f892 	bl	8000ac8 <__aeabi_dcmpeq>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d006      	beq.n	80019b8 <TrigonometricCalculator+0x1e8>
	  {
	    LCD_Send_Cmd(0x01);
 80019aa:	2001      	movs	r0, #1
 80019ac:	f7ff face 	bl	8000f4c <LCD_Send_Cmd>
	    LCD_Send_String("Math Error");
 80019b0:	481b      	ldr	r0, [pc, #108]	; (8001a20 <TrigonometricCalculator+0x250>)
 80019b2:	f7ff fb5d 	bl	8001070 <LCD_Send_String>
	    return;
 80019b6:	e01c      	b.n	80019f2 <TrigonometricCalculator+0x222>
	  }
	  lfResult = 1.0 / tan(lfOperand);
 80019b8:	ed97 0b06 	vldr	d0, [r7, #24]
 80019bc:	f004 ffc8 	bl	8006950 <tan>
 80019c0:	ec53 2b10 	vmov	r2, r3, d0
 80019c4:	f04f 0000 	mov.w	r0, #0
 80019c8:	4916      	ldr	r1, [pc, #88]	; (8001a24 <TrigonometricCalculator+0x254>)
 80019ca:	f7fe ff3f 	bl	800084c <__aeabi_ddiv>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	  break;
 80019d6:	bf00      	nop
  }

  LCD_Send_Char(')');
 80019d8:	2029      	movs	r0, #41	; 0x29
 80019da:	f7ff fae9 	bl	8000fb0 <LCD_Send_Char>
  LCD_Send_Cmd(0xC0);
 80019de:	20c0      	movs	r0, #192	; 0xc0
 80019e0:	f7ff fab4 	bl	8000f4c <LCD_Send_Cmd>
  LCD_Send_Char('=');
 80019e4:	203d      	movs	r0, #61	; 0x3d
 80019e6:	f7ff fae3 	bl	8000fb0 <LCD_Send_Char>

  DisplayNum(lfResult);
 80019ea:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 80019ee:	f7ff fbe7 	bl	80011c0 <DisplayNum>
}
 80019f2:	3730      	adds	r7, #48	; 0x30
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	54524550 	.word	0x54524550
 80019fc:	400921fb 	.word	0x400921fb
 8001a00:	08008c28 	.word	0x08008c28
 8001a04:	08008c38 	.word	0x08008c38
 8001a08:	08008c44 	.word	0x08008c44
 8001a0c:	08008c4c 	.word	0x08008c4c
 8001a10:	08008c54 	.word	0x08008c54
 8001a14:	08008c5c 	.word	0x08008c5c
 8001a18:	40668000 	.word	0x40668000
 8001a1c:	40568000 	.word	0x40568000
 8001a20:	08008c64 	.word	0x08008c64
 8001a24:	3ff00000 	.word	0x3ff00000

08001a28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a2c:	f000 fb2a 	bl	8002084 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a30:	f000 f848 	bl	8001ac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a34:	f000 f8de 	bl	8001bf4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001a38:	f000 f8ae 	bl	8001b98 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init ();
 8001a3c:	f7ff faea 	bl	8001014 <LCD_Init>
  Keypad_Init();
 8001a40:	f7ff fb2c 	bl	800109c <Keypad_Init>

  LCD_Send_String ("Hello World");
 8001a44:	481b      	ldr	r0, [pc, #108]	; (8001ab4 <main+0x8c>)
 8001a46:	f7ff fb13 	bl	8001070 <LCD_Send_String>
  HAL_Delay(1000);
 8001a4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a4e:	f000 fb8b 	bl	8002168 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    LCD_Send_Cmd(0x01);
 8001a52:	2001      	movs	r0, #1
 8001a54:	f7ff fa7a 	bl	8000f4c <LCD_Send_Cmd>
    HAL_Delay(50);
 8001a58:	2032      	movs	r0, #50	; 0x32
 8001a5a:	f000 fb85 	bl	8002168 <HAL_Delay>
    LCD_Send_String("1Basic 2Advance");
 8001a5e:	4816      	ldr	r0, [pc, #88]	; (8001ab8 <main+0x90>)
 8001a60:	f7ff fb06 	bl	8001070 <LCD_Send_String>

    LCD_Send_Cmd(0xC0);
 8001a64:	20c0      	movs	r0, #192	; 0xc0
 8001a66:	f7ff fa71 	bl	8000f4c <LCD_Send_Cmd>
    LCD_Send_String("3.Trigonometric");
 8001a6a:	4814      	ldr	r0, [pc, #80]	; (8001abc <main+0x94>)
 8001a6c:	f7ff fb00 	bl	8001070 <LCD_Send_String>

    keypadValue = Keypad_ReadKey();
 8001a70:	f7ff fb3c 	bl	80010ec <Keypad_ReadKey>
 8001a74:	4603      	mov	r3, r0
 8001a76:	461a      	mov	r2, r3
 8001a78:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <main+0x98>)
 8001a7a:	701a      	strb	r2, [r3, #0]
    switch(keypadValue)
 8001a7c:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <main+0x98>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b33      	cmp	r3, #51	; 0x33
 8001a82:	d010      	beq.n	8001aa6 <main+0x7e>
 8001a84:	2b33      	cmp	r3, #51	; 0x33
 8001a86:	dce4      	bgt.n	8001a52 <main+0x2a>
 8001a88:	2b31      	cmp	r3, #49	; 0x31
 8001a8a:	d002      	beq.n	8001a92 <main+0x6a>
 8001a8c:	2b32      	cmp	r3, #50	; 0x32
 8001a8e:	d005      	beq.n	8001a9c <main+0x74>
 8001a90:	e00e      	b.n	8001ab0 <main+0x88>
    {
      case '1':
        BasicCalculator();
 8001a92:	f7ff fc31 	bl	80012f8 <BasicCalculator>
        Keypad_ReadKey();
 8001a96:	f7ff fb29 	bl	80010ec <Keypad_ReadKey>
        break;
 8001a9a:	e009      	b.n	8001ab0 <main+0x88>
      case '2':
    	AdvanceCalculator();
 8001a9c:	f7ff fd8a 	bl	80015b4 <AdvanceCalculator>
    	Keypad_ReadKey();
 8001aa0:	f7ff fb24 	bl	80010ec <Keypad_ReadKey>
    	break;
 8001aa4:	e004      	b.n	8001ab0 <main+0x88>
      case '3':
        TrigonometricCalculator();
 8001aa6:	f7ff fe93 	bl	80017d0 <TrigonometricCalculator>
        Keypad_ReadKey();
 8001aaa:	f7ff fb1f 	bl	80010ec <Keypad_ReadKey>
    	break;
 8001aae:	bf00      	nop
    LCD_Send_Cmd(0x01);
 8001ab0:	e7cf      	b.n	8001a52 <main+0x2a>
 8001ab2:	bf00      	nop
 8001ab4:	08008c70 	.word	0x08008c70
 8001ab8:	08008c7c 	.word	0x08008c7c
 8001abc:	08008c8c 	.word	0x08008c8c
 8001ac0:	20000240 	.word	0x20000240

08001ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b094      	sub	sp, #80	; 0x50
 8001ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aca:	f107 0320 	add.w	r3, r7, #32
 8001ace:	2230      	movs	r2, #48	; 0x30
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f001 ff14 	bl	8003900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ad8:	f107 030c 	add.w	r3, r7, #12
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	4b28      	ldr	r3, [pc, #160]	; (8001b90 <SystemClock_Config+0xcc>)
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	4a27      	ldr	r2, [pc, #156]	; (8001b90 <SystemClock_Config+0xcc>)
 8001af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af6:	6413      	str	r3, [r2, #64]	; 0x40
 8001af8:	4b25      	ldr	r3, [pc, #148]	; (8001b90 <SystemClock_Config+0xcc>)
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b04:	2300      	movs	r3, #0
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	4b22      	ldr	r3, [pc, #136]	; (8001b94 <SystemClock_Config+0xd0>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a21      	ldr	r2, [pc, #132]	; (8001b94 <SystemClock_Config+0xd0>)
 8001b0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	4b1f      	ldr	r3, [pc, #124]	; (8001b94 <SystemClock_Config+0xd0>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b20:	2301      	movs	r3, #1
 8001b22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b34:	2304      	movs	r3, #4
 8001b36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b38:	23a8      	movs	r3, #168	; 0xa8
 8001b3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b40:	2304      	movs	r3, #4
 8001b42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b44:	f107 0320 	add.w	r3, r7, #32
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f001 fa31 	bl	8002fb0 <HAL_RCC_OscConfig>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b54:	f000 f8f4 	bl	8001d40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b58:	230f      	movs	r3, #15
 8001b5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b64:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b70:	f107 030c 	add.w	r3, r7, #12
 8001b74:	2105      	movs	r1, #5
 8001b76:	4618      	mov	r0, r3
 8001b78:	f001 fc92 	bl	80034a0 <HAL_RCC_ClockConfig>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b82:	f000 f8dd 	bl	8001d40 <Error_Handler>
  }
}
 8001b86:	bf00      	nop
 8001b88:	3750      	adds	r7, #80	; 0x50
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40007000 	.word	0x40007000

08001b98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b9c:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <MX_I2C1_Init+0x50>)
 8001b9e:	4a13      	ldr	r2, [pc, #76]	; (8001bec <MX_I2C1_Init+0x54>)
 8001ba0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ba2:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <MX_I2C1_Init+0x50>)
 8001ba4:	4a12      	ldr	r2, [pc, #72]	; (8001bf0 <MX_I2C1_Init+0x58>)
 8001ba6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <MX_I2C1_Init+0x50>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001bae:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <MX_I2C1_Init+0x50>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <MX_I2C1_Init+0x50>)
 8001bb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bbc:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <MX_I2C1_Init+0x50>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001bc2:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <MX_I2C1_Init+0x50>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bc8:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <MX_I2C1_Init+0x50>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bce:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <MX_I2C1_Init+0x50>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bd4:	4804      	ldr	r0, [pc, #16]	; (8001be8 <MX_I2C1_Init+0x50>)
 8001bd6:	f000 fd9f 	bl	8002718 <HAL_I2C_Init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001be0:	f000 f8ae 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000250 	.word	0x20000250
 8001bec:	40005400 	.word	0x40005400
 8001bf0:	000186a0 	.word	0x000186a0

08001bf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08a      	sub	sp, #40	; 0x28
 8001bf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfa:	f107 0314 	add.w	r3, r7, #20
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]
 8001c04:	609a      	str	r2, [r3, #8]
 8001c06:	60da      	str	r2, [r3, #12]
 8001c08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	4b47      	ldr	r3, [pc, #284]	; (8001d2c <MX_GPIO_Init+0x138>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a46      	ldr	r2, [pc, #280]	; (8001d2c <MX_GPIO_Init+0x138>)
 8001c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b44      	ldr	r3, [pc, #272]	; (8001d2c <MX_GPIO_Init+0x138>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	4b40      	ldr	r3, [pc, #256]	; (8001d2c <MX_GPIO_Init+0x138>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a3f      	ldr	r2, [pc, #252]	; (8001d2c <MX_GPIO_Init+0x138>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b3d      	ldr	r3, [pc, #244]	; (8001d2c <MX_GPIO_Init+0x138>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	4b39      	ldr	r3, [pc, #228]	; (8001d2c <MX_GPIO_Init+0x138>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a38      	ldr	r2, [pc, #224]	; (8001d2c <MX_GPIO_Init+0x138>)
 8001c4c:	f043 0304 	orr.w	r3, r3, #4
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b36      	ldr	r3, [pc, #216]	; (8001d2c <MX_GPIO_Init+0x138>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	4b32      	ldr	r3, [pc, #200]	; (8001d2c <MX_GPIO_Init+0x138>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a31      	ldr	r2, [pc, #196]	; (8001d2c <MX_GPIO_Init+0x138>)
 8001c68:	f043 0302 	orr.w	r3, r3, #2
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b2f      	ldr	r3, [pc, #188]	; (8001d2c <MX_GPIO_Init+0x138>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	607b      	str	r3, [r7, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	603b      	str	r3, [r7, #0]
 8001c7e:	4b2b      	ldr	r3, [pc, #172]	; (8001d2c <MX_GPIO_Init+0x138>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a2a      	ldr	r2, [pc, #168]	; (8001d2c <MX_GPIO_Init+0x138>)
 8001c84:	f043 0310 	orr.w	r3, r3, #16
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b28      	ldr	r3, [pc, #160]	; (8001d2c <MX_GPIO_Init+0x138>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f003 0310 	and.w	r3, r3, #16
 8001c92:	603b      	str	r3, [r7, #0]
 8001c94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2110      	movs	r1, #16
 8001c9a:	4825      	ldr	r0, [pc, #148]	; (8001d30 <MX_GPIO_Init+0x13c>)
 8001c9c:	f000 fd22 	bl	80026e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2105      	movs	r1, #5
 8001ca4:	4823      	ldr	r0, [pc, #140]	; (8001d34 <MX_GPIO_Init+0x140>)
 8001ca6:	f000 fd1d 	bl	80026e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8001caa:	2200      	movs	r2, #0
 8001cac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cb0:	4821      	ldr	r0, [pc, #132]	; (8001d38 <MX_GPIO_Init+0x144>)
 8001cb2:	f000 fd17 	bl	80026e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA2 PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6;
 8001cb6:	2355      	movs	r3, #85	; 0x55
 8001cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc2:	f107 0314 	add.w	r3, r7, #20
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	481c      	ldr	r0, [pc, #112]	; (8001d3c <MX_GPIO_Init+0x148>)
 8001cca:	f000 fb57 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001cce:	2310      	movs	r3, #16
 8001cd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cde:	f107 0314 	add.w	r3, r7, #20
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4812      	ldr	r0, [pc, #72]	; (8001d30 <MX_GPIO_Init+0x13c>)
 8001ce6:	f000 fb49 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8001cea:	2305      	movs	r3, #5
 8001cec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	4619      	mov	r1, r3
 8001d00:	480c      	ldr	r0, [pc, #48]	; (8001d34 <MX_GPIO_Init+0x140>)
 8001d02:	f000 fb3b 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d10:	2301      	movs	r3, #1
 8001d12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d14:	2300      	movs	r3, #0
 8001d16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4806      	ldr	r0, [pc, #24]	; (8001d38 <MX_GPIO_Init+0x144>)
 8001d20:	f000 fb2c 	bl	800237c <HAL_GPIO_Init>

}
 8001d24:	bf00      	nop
 8001d26:	3728      	adds	r7, #40	; 0x28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40020800 	.word	0x40020800
 8001d34:	40020400 	.word	0x40020400
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40020000 	.word	0x40020000

08001d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d44:	b672      	cpsid	i
}
 8001d46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d48:	e7fe      	b.n	8001d48 <Error_Handler+0x8>
	...

08001d4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	607b      	str	r3, [r7, #4]
 8001d56:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5a:	4a0f      	ldr	r2, [pc, #60]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d60:	6453      	str	r3, [r2, #68]	; 0x44
 8001d62:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d6a:	607b      	str	r3, [r7, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	603b      	str	r3, [r7, #0]
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	4a08      	ldr	r2, [pc, #32]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7e:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800

08001d9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08a      	sub	sp, #40	; 0x28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a19      	ldr	r2, [pc, #100]	; (8001e20 <HAL_I2C_MspInit+0x84>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d12b      	bne.n	8001e16 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	4b18      	ldr	r3, [pc, #96]	; (8001e24 <HAL_I2C_MspInit+0x88>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	4a17      	ldr	r2, [pc, #92]	; (8001e24 <HAL_I2C_MspInit+0x88>)
 8001dc8:	f043 0302 	orr.w	r3, r3, #2
 8001dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dce:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <HAL_I2C_MspInit+0x88>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dda:	23c0      	movs	r3, #192	; 0xc0
 8001ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dde:	2312      	movs	r3, #18
 8001de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001de2:	2301      	movs	r3, #1
 8001de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de6:	2303      	movs	r3, #3
 8001de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dea:	2304      	movs	r3, #4
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dee:	f107 0314 	add.w	r3, r7, #20
 8001df2:	4619      	mov	r1, r3
 8001df4:	480c      	ldr	r0, [pc, #48]	; (8001e28 <HAL_I2C_MspInit+0x8c>)
 8001df6:	f000 fac1 	bl	800237c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <HAL_I2C_MspInit+0x88>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	4a08      	ldr	r2, [pc, #32]	; (8001e24 <HAL_I2C_MspInit+0x88>)
 8001e04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e08:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_I2C_MspInit+0x88>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e16:	bf00      	nop
 8001e18:	3728      	adds	r7, #40	; 0x28
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40005400 	.word	0x40005400
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40020400 	.word	0x40020400

08001e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e30:	e7fe      	b.n	8001e30 <NMI_Handler+0x4>

08001e32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e36:	e7fe      	b.n	8001e36 <HardFault_Handler+0x4>

08001e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e3c:	e7fe      	b.n	8001e3c <MemManage_Handler+0x4>

08001e3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e42:	e7fe      	b.n	8001e42 <BusFault_Handler+0x4>

08001e44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e48:	e7fe      	b.n	8001e48 <UsageFault_Handler+0x4>

08001e4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e78:	f000 f956 	bl	8002128 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e7c:	bf00      	nop
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
	return 1;
 8001e84:	2301      	movs	r3, #1
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <_kill>:

int _kill(int pid, int sig)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e9a:	f001 fced 	bl	8003878 <__errno>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2216      	movs	r2, #22
 8001ea2:	601a      	str	r2, [r3, #0]
	return -1;
 8001ea4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <_exit>:

void _exit (int status)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7ff ffe7 	bl	8001e90 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ec2:	e7fe      	b.n	8001ec2 <_exit+0x12>

08001ec4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
 8001ed4:	e00a      	b.n	8001eec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ed6:	f3af 8000 	nop.w
 8001eda:	4601      	mov	r1, r0
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	60ba      	str	r2, [r7, #8]
 8001ee2:	b2ca      	uxtb	r2, r1
 8001ee4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	dbf0      	blt.n	8001ed6 <_read+0x12>
	}

return len;
 8001ef4:	687b      	ldr	r3, [r7, #4]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b086      	sub	sp, #24
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	60f8      	str	r0, [r7, #12]
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	e009      	b.n	8001f24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	1c5a      	adds	r2, r3, #1
 8001f14:	60ba      	str	r2, [r7, #8]
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	3301      	adds	r3, #1
 8001f22:	617b      	str	r3, [r7, #20]
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	dbf1      	blt.n	8001f10 <_write+0x12>
	}
	return len;
 8001f2c:	687b      	ldr	r3, [r7, #4]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <_close>:

int _close(int file)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
	return -1;
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f5e:	605a      	str	r2, [r3, #4]
	return 0;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <_isatty>:

int _isatty(int file)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
	return 1;
 8001f76:	2301      	movs	r3, #1
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
	return 0;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fa8:	4a14      	ldr	r2, [pc, #80]	; (8001ffc <_sbrk+0x5c>)
 8001faa:	4b15      	ldr	r3, [pc, #84]	; (8002000 <_sbrk+0x60>)
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fb4:	4b13      	ldr	r3, [pc, #76]	; (8002004 <_sbrk+0x64>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d102      	bne.n	8001fc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fbc:	4b11      	ldr	r3, [pc, #68]	; (8002004 <_sbrk+0x64>)
 8001fbe:	4a12      	ldr	r2, [pc, #72]	; (8002008 <_sbrk+0x68>)
 8001fc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fc2:	4b10      	ldr	r3, [pc, #64]	; (8002004 <_sbrk+0x64>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d207      	bcs.n	8001fe0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fd0:	f001 fc52 	bl	8003878 <__errno>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	220c      	movs	r2, #12
 8001fd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fda:	f04f 33ff 	mov.w	r3, #4294967295
 8001fde:	e009      	b.n	8001ff4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fe0:	4b08      	ldr	r3, [pc, #32]	; (8002004 <_sbrk+0x64>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fe6:	4b07      	ldr	r3, [pc, #28]	; (8002004 <_sbrk+0x64>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	4a05      	ldr	r2, [pc, #20]	; (8002004 <_sbrk+0x64>)
 8001ff0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20020000 	.word	0x20020000
 8002000:	00000400 	.word	0x00000400
 8002004:	20000244 	.word	0x20000244
 8002008:	200002b8 	.word	0x200002b8

0800200c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <SystemInit+0x20>)
 8002012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002016:	4a05      	ldr	r2, [pc, #20]	; (800202c <SystemInit+0x20>)
 8002018:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800201c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002030:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002068 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002034:	480d      	ldr	r0, [pc, #52]	; (800206c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002036:	490e      	ldr	r1, [pc, #56]	; (8002070 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002038:	4a0e      	ldr	r2, [pc, #56]	; (8002074 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800203a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800203c:	e002      	b.n	8002044 <LoopCopyDataInit>

0800203e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800203e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002042:	3304      	adds	r3, #4

08002044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002048:	d3f9      	bcc.n	800203e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800204a:	4a0b      	ldr	r2, [pc, #44]	; (8002078 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800204c:	4c0b      	ldr	r4, [pc, #44]	; (800207c <LoopFillZerobss+0x26>)
  movs r3, #0
 800204e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002050:	e001      	b.n	8002056 <LoopFillZerobss>

08002052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002054:	3204      	adds	r2, #4

08002056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002058:	d3fb      	bcc.n	8002052 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800205a:	f7ff ffd7 	bl	800200c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800205e:	f001 fc11 	bl	8003884 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002062:	f7ff fce1 	bl	8001a28 <main>
  bx  lr    
 8002066:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002068:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800206c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002070:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8002074:	08009340 	.word	0x08009340
  ldr r2, =_sbss
 8002078:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 800207c:	200002b8 	.word	0x200002b8

08002080 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002080:	e7fe      	b.n	8002080 <ADC_IRQHandler>
	...

08002084 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002088:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <HAL_Init+0x40>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a0d      	ldr	r2, [pc, #52]	; (80020c4 <HAL_Init+0x40>)
 800208e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002092:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002094:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <HAL_Init+0x40>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a0a      	ldr	r2, [pc, #40]	; (80020c4 <HAL_Init+0x40>)
 800209a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800209e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020a0:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <HAL_Init+0x40>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a07      	ldr	r2, [pc, #28]	; (80020c4 <HAL_Init+0x40>)
 80020a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020ac:	2003      	movs	r0, #3
 80020ae:	f000 f931 	bl	8002314 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020b2:	200f      	movs	r0, #15
 80020b4:	f000 f808 	bl	80020c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020b8:	f7ff fe48 	bl	8001d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40023c00 	.word	0x40023c00

080020c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020d0:	4b12      	ldr	r3, [pc, #72]	; (800211c <HAL_InitTick+0x54>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	4b12      	ldr	r3, [pc, #72]	; (8002120 <HAL_InitTick+0x58>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	4619      	mov	r1, r3
 80020da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020de:	fbb3 f3f1 	udiv	r3, r3, r1
 80020e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 f93b 	bl	8002362 <HAL_SYSTICK_Config>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e00e      	b.n	8002114 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b0f      	cmp	r3, #15
 80020fa:	d80a      	bhi.n	8002112 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020fc:	2200      	movs	r2, #0
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	f04f 30ff 	mov.w	r0, #4294967295
 8002104:	f000 f911 	bl	800232a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002108:	4a06      	ldr	r2, [pc, #24]	; (8002124 <HAL_InitTick+0x5c>)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800210e:	2300      	movs	r3, #0
 8002110:	e000      	b.n	8002114 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
}
 8002114:	4618      	mov	r0, r3
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20000040 	.word	0x20000040
 8002120:	20000048 	.word	0x20000048
 8002124:	20000044 	.word	0x20000044

08002128 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <HAL_IncTick+0x20>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	461a      	mov	r2, r3
 8002132:	4b06      	ldr	r3, [pc, #24]	; (800214c <HAL_IncTick+0x24>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4413      	add	r3, r2
 8002138:	4a04      	ldr	r2, [pc, #16]	; (800214c <HAL_IncTick+0x24>)
 800213a:	6013      	str	r3, [r2, #0]
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	20000048 	.word	0x20000048
 800214c:	200002a4 	.word	0x200002a4

08002150 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return uwTick;
 8002154:	4b03      	ldr	r3, [pc, #12]	; (8002164 <HAL_GetTick+0x14>)
 8002156:	681b      	ldr	r3, [r3, #0]
}
 8002158:	4618      	mov	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	200002a4 	.word	0x200002a4

08002168 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002170:	f7ff ffee 	bl	8002150 <HAL_GetTick>
 8002174:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002180:	d005      	beq.n	800218e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002182:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <HAL_Delay+0x44>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	461a      	mov	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4413      	add	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800218e:	bf00      	nop
 8002190:	f7ff ffde 	bl	8002150 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	429a      	cmp	r2, r3
 800219e:	d8f7      	bhi.n	8002190 <HAL_Delay+0x28>
  {
  }
}
 80021a0:	bf00      	nop
 80021a2:	bf00      	nop
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000048 	.word	0x20000048

080021b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <__NVIC_SetPriorityGrouping+0x44>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021cc:	4013      	ands	r3, r2
 80021ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021e2:	4a04      	ldr	r2, [pc, #16]	; (80021f4 <__NVIC_SetPriorityGrouping+0x44>)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	60d3      	str	r3, [r2, #12]
}
 80021e8:	bf00      	nop
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021fc:	4b04      	ldr	r3, [pc, #16]	; (8002210 <__NVIC_GetPriorityGrouping+0x18>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	0a1b      	lsrs	r3, r3, #8
 8002202:	f003 0307 	and.w	r3, r3, #7
}
 8002206:	4618      	mov	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	6039      	str	r1, [r7, #0]
 800221e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002224:	2b00      	cmp	r3, #0
 8002226:	db0a      	blt.n	800223e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	b2da      	uxtb	r2, r3
 800222c:	490c      	ldr	r1, [pc, #48]	; (8002260 <__NVIC_SetPriority+0x4c>)
 800222e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002232:	0112      	lsls	r2, r2, #4
 8002234:	b2d2      	uxtb	r2, r2
 8002236:	440b      	add	r3, r1
 8002238:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800223c:	e00a      	b.n	8002254 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	b2da      	uxtb	r2, r3
 8002242:	4908      	ldr	r1, [pc, #32]	; (8002264 <__NVIC_SetPriority+0x50>)
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	3b04      	subs	r3, #4
 800224c:	0112      	lsls	r2, r2, #4
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	440b      	add	r3, r1
 8002252:	761a      	strb	r2, [r3, #24]
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	e000e100 	.word	0xe000e100
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002268:	b480      	push	{r7}
 800226a:	b089      	sub	sp, #36	; 0x24
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f1c3 0307 	rsb	r3, r3, #7
 8002282:	2b04      	cmp	r3, #4
 8002284:	bf28      	it	cs
 8002286:	2304      	movcs	r3, #4
 8002288:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3304      	adds	r3, #4
 800228e:	2b06      	cmp	r3, #6
 8002290:	d902      	bls.n	8002298 <NVIC_EncodePriority+0x30>
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3b03      	subs	r3, #3
 8002296:	e000      	b.n	800229a <NVIC_EncodePriority+0x32>
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800229c:	f04f 32ff 	mov.w	r2, #4294967295
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	43da      	mvns	r2, r3
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	401a      	ands	r2, r3
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022b0:	f04f 31ff 	mov.w	r1, #4294967295
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ba:	43d9      	mvns	r1, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c0:	4313      	orrs	r3, r2
         );
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3724      	adds	r7, #36	; 0x24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
	...

080022d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3b01      	subs	r3, #1
 80022dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022e0:	d301      	bcc.n	80022e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022e2:	2301      	movs	r3, #1
 80022e4:	e00f      	b.n	8002306 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022e6:	4a0a      	ldr	r2, [pc, #40]	; (8002310 <SysTick_Config+0x40>)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ee:	210f      	movs	r1, #15
 80022f0:	f04f 30ff 	mov.w	r0, #4294967295
 80022f4:	f7ff ff8e 	bl	8002214 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022f8:	4b05      	ldr	r3, [pc, #20]	; (8002310 <SysTick_Config+0x40>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022fe:	4b04      	ldr	r3, [pc, #16]	; (8002310 <SysTick_Config+0x40>)
 8002300:	2207      	movs	r2, #7
 8002302:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	e000e010 	.word	0xe000e010

08002314 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7ff ff47 	bl	80021b0 <__NVIC_SetPriorityGrouping>
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800232a:	b580      	push	{r7, lr}
 800232c:	b086      	sub	sp, #24
 800232e:	af00      	add	r7, sp, #0
 8002330:	4603      	mov	r3, r0
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	607a      	str	r2, [r7, #4]
 8002336:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800233c:	f7ff ff5c 	bl	80021f8 <__NVIC_GetPriorityGrouping>
 8002340:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	68b9      	ldr	r1, [r7, #8]
 8002346:	6978      	ldr	r0, [r7, #20]
 8002348:	f7ff ff8e 	bl	8002268 <NVIC_EncodePriority>
 800234c:	4602      	mov	r2, r0
 800234e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002352:	4611      	mov	r1, r2
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff ff5d 	bl	8002214 <__NVIC_SetPriority>
}
 800235a:	bf00      	nop
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b082      	sub	sp, #8
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff ffb0 	bl	80022d0 <SysTick_Config>
 8002370:	4603      	mov	r3, r0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800237c:	b480      	push	{r7}
 800237e:	b089      	sub	sp, #36	; 0x24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800238a:	2300      	movs	r3, #0
 800238c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800238e:	2300      	movs	r3, #0
 8002390:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
 8002396:	e16b      	b.n	8002670 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002398:	2201      	movs	r2, #1
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	4013      	ands	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	f040 815a 	bne.w	800266a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d005      	beq.n	80023ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d130      	bne.n	8002430 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	2203      	movs	r2, #3
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002404:	2201      	movs	r2, #1
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	091b      	lsrs	r3, r3, #4
 800241a:	f003 0201 	and.w	r2, r3, #1
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	2b03      	cmp	r3, #3
 800243a:	d017      	beq.n	800246c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	2203      	movs	r2, #3
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d123      	bne.n	80024c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	08da      	lsrs	r2, r3, #3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3208      	adds	r2, #8
 8002480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002484:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	220f      	movs	r2, #15
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	691a      	ldr	r2, [r3, #16]
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	08da      	lsrs	r2, r3, #3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3208      	adds	r2, #8
 80024ba:	69b9      	ldr	r1, [r7, #24]
 80024bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	2203      	movs	r2, #3
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 0203 	and.w	r2, r3, #3
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 80b4 	beq.w	800266a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	4b60      	ldr	r3, [pc, #384]	; (8002688 <HAL_GPIO_Init+0x30c>)
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	4a5f      	ldr	r2, [pc, #380]	; (8002688 <HAL_GPIO_Init+0x30c>)
 800250c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002510:	6453      	str	r3, [r2, #68]	; 0x44
 8002512:	4b5d      	ldr	r3, [pc, #372]	; (8002688 <HAL_GPIO_Init+0x30c>)
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800251e:	4a5b      	ldr	r2, [pc, #364]	; (800268c <HAL_GPIO_Init+0x310>)
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	089b      	lsrs	r3, r3, #2
 8002524:	3302      	adds	r3, #2
 8002526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	220f      	movs	r2, #15
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a52      	ldr	r2, [pc, #328]	; (8002690 <HAL_GPIO_Init+0x314>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d02b      	beq.n	80025a2 <HAL_GPIO_Init+0x226>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a51      	ldr	r2, [pc, #324]	; (8002694 <HAL_GPIO_Init+0x318>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d025      	beq.n	800259e <HAL_GPIO_Init+0x222>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a50      	ldr	r2, [pc, #320]	; (8002698 <HAL_GPIO_Init+0x31c>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d01f      	beq.n	800259a <HAL_GPIO_Init+0x21e>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a4f      	ldr	r2, [pc, #316]	; (800269c <HAL_GPIO_Init+0x320>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d019      	beq.n	8002596 <HAL_GPIO_Init+0x21a>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a4e      	ldr	r2, [pc, #312]	; (80026a0 <HAL_GPIO_Init+0x324>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d013      	beq.n	8002592 <HAL_GPIO_Init+0x216>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a4d      	ldr	r2, [pc, #308]	; (80026a4 <HAL_GPIO_Init+0x328>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d00d      	beq.n	800258e <HAL_GPIO_Init+0x212>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a4c      	ldr	r2, [pc, #304]	; (80026a8 <HAL_GPIO_Init+0x32c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d007      	beq.n	800258a <HAL_GPIO_Init+0x20e>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a4b      	ldr	r2, [pc, #300]	; (80026ac <HAL_GPIO_Init+0x330>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d101      	bne.n	8002586 <HAL_GPIO_Init+0x20a>
 8002582:	2307      	movs	r3, #7
 8002584:	e00e      	b.n	80025a4 <HAL_GPIO_Init+0x228>
 8002586:	2308      	movs	r3, #8
 8002588:	e00c      	b.n	80025a4 <HAL_GPIO_Init+0x228>
 800258a:	2306      	movs	r3, #6
 800258c:	e00a      	b.n	80025a4 <HAL_GPIO_Init+0x228>
 800258e:	2305      	movs	r3, #5
 8002590:	e008      	b.n	80025a4 <HAL_GPIO_Init+0x228>
 8002592:	2304      	movs	r3, #4
 8002594:	e006      	b.n	80025a4 <HAL_GPIO_Init+0x228>
 8002596:	2303      	movs	r3, #3
 8002598:	e004      	b.n	80025a4 <HAL_GPIO_Init+0x228>
 800259a:	2302      	movs	r3, #2
 800259c:	e002      	b.n	80025a4 <HAL_GPIO_Init+0x228>
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <HAL_GPIO_Init+0x228>
 80025a2:	2300      	movs	r3, #0
 80025a4:	69fa      	ldr	r2, [r7, #28]
 80025a6:	f002 0203 	and.w	r2, r2, #3
 80025aa:	0092      	lsls	r2, r2, #2
 80025ac:	4093      	lsls	r3, r2
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025b4:	4935      	ldr	r1, [pc, #212]	; (800268c <HAL_GPIO_Init+0x310>)
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	089b      	lsrs	r3, r3, #2
 80025ba:	3302      	adds	r3, #2
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025c2:	4b3b      	ldr	r3, [pc, #236]	; (80026b0 <HAL_GPIO_Init+0x334>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	43db      	mvns	r3, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4013      	ands	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025e6:	4a32      	ldr	r2, [pc, #200]	; (80026b0 <HAL_GPIO_Init+0x334>)
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025ec:	4b30      	ldr	r3, [pc, #192]	; (80026b0 <HAL_GPIO_Init+0x334>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	4313      	orrs	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002610:	4a27      	ldr	r2, [pc, #156]	; (80026b0 <HAL_GPIO_Init+0x334>)
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002616:	4b26      	ldr	r3, [pc, #152]	; (80026b0 <HAL_GPIO_Init+0x334>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	43db      	mvns	r3, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4013      	ands	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	4313      	orrs	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800263a:	4a1d      	ldr	r2, [pc, #116]	; (80026b0 <HAL_GPIO_Init+0x334>)
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002640:	4b1b      	ldr	r3, [pc, #108]	; (80026b0 <HAL_GPIO_Init+0x334>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	43db      	mvns	r3, r3
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4013      	ands	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4313      	orrs	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002664:	4a12      	ldr	r2, [pc, #72]	; (80026b0 <HAL_GPIO_Init+0x334>)
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3301      	adds	r3, #1
 800266e:	61fb      	str	r3, [r7, #28]
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	2b0f      	cmp	r3, #15
 8002674:	f67f ae90 	bls.w	8002398 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002678:	bf00      	nop
 800267a:	bf00      	nop
 800267c:	3724      	adds	r7, #36	; 0x24
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	40023800 	.word	0x40023800
 800268c:	40013800 	.word	0x40013800
 8002690:	40020000 	.word	0x40020000
 8002694:	40020400 	.word	0x40020400
 8002698:	40020800 	.word	0x40020800
 800269c:	40020c00 	.word	0x40020c00
 80026a0:	40021000 	.word	0x40021000
 80026a4:	40021400 	.word	0x40021400
 80026a8:	40021800 	.word	0x40021800
 80026ac:	40021c00 	.word	0x40021c00
 80026b0:	40013c00 	.word	0x40013c00

080026b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	887b      	ldrh	r3, [r7, #2]
 80026c6:	4013      	ands	r3, r2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026cc:	2301      	movs	r3, #1
 80026ce:	73fb      	strb	r3, [r7, #15]
 80026d0:	e001      	b.n	80026d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026d2:	2300      	movs	r3, #0
 80026d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	807b      	strh	r3, [r7, #2]
 80026f0:	4613      	mov	r3, r2
 80026f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026f4:	787b      	ldrb	r3, [r7, #1]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026fa:	887a      	ldrh	r2, [r7, #2]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002700:	e003      	b.n	800270a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002702:	887b      	ldrh	r3, [r7, #2]
 8002704:	041a      	lsls	r2, r3, #16
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	619a      	str	r2, [r3, #24]
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
	...

08002718 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e12b      	b.n	8002982 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d106      	bne.n	8002744 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7ff fb2c 	bl	8001d9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2224      	movs	r2, #36	; 0x24
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0201 	bic.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800276a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800277a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800277c:	f001 f864 	bl	8003848 <HAL_RCC_GetPCLK1Freq>
 8002780:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	4a81      	ldr	r2, [pc, #516]	; (800298c <HAL_I2C_Init+0x274>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d807      	bhi.n	800279c <HAL_I2C_Init+0x84>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4a80      	ldr	r2, [pc, #512]	; (8002990 <HAL_I2C_Init+0x278>)
 8002790:	4293      	cmp	r3, r2
 8002792:	bf94      	ite	ls
 8002794:	2301      	movls	r3, #1
 8002796:	2300      	movhi	r3, #0
 8002798:	b2db      	uxtb	r3, r3
 800279a:	e006      	b.n	80027aa <HAL_I2C_Init+0x92>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4a7d      	ldr	r2, [pc, #500]	; (8002994 <HAL_I2C_Init+0x27c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	bf94      	ite	ls
 80027a4:	2301      	movls	r3, #1
 80027a6:	2300      	movhi	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e0e7      	b.n	8002982 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	4a78      	ldr	r2, [pc, #480]	; (8002998 <HAL_I2C_Init+0x280>)
 80027b6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ba:	0c9b      	lsrs	r3, r3, #18
 80027bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	4a6a      	ldr	r2, [pc, #424]	; (800298c <HAL_I2C_Init+0x274>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d802      	bhi.n	80027ec <HAL_I2C_Init+0xd4>
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	3301      	adds	r3, #1
 80027ea:	e009      	b.n	8002800 <HAL_I2C_Init+0xe8>
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027f2:	fb02 f303 	mul.w	r3, r2, r3
 80027f6:	4a69      	ldr	r2, [pc, #420]	; (800299c <HAL_I2C_Init+0x284>)
 80027f8:	fba2 2303 	umull	r2, r3, r2, r3
 80027fc:	099b      	lsrs	r3, r3, #6
 80027fe:	3301      	adds	r3, #1
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	6812      	ldr	r2, [r2, #0]
 8002804:	430b      	orrs	r3, r1
 8002806:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002812:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	495c      	ldr	r1, [pc, #368]	; (800298c <HAL_I2C_Init+0x274>)
 800281c:	428b      	cmp	r3, r1
 800281e:	d819      	bhi.n	8002854 <HAL_I2C_Init+0x13c>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	1e59      	subs	r1, r3, #1
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	fbb1 f3f3 	udiv	r3, r1, r3
 800282e:	1c59      	adds	r1, r3, #1
 8002830:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002834:	400b      	ands	r3, r1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <HAL_I2C_Init+0x138>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	1e59      	subs	r1, r3, #1
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	fbb1 f3f3 	udiv	r3, r1, r3
 8002848:	3301      	adds	r3, #1
 800284a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800284e:	e051      	b.n	80028f4 <HAL_I2C_Init+0x1dc>
 8002850:	2304      	movs	r3, #4
 8002852:	e04f      	b.n	80028f4 <HAL_I2C_Init+0x1dc>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d111      	bne.n	8002880 <HAL_I2C_Init+0x168>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	1e58      	subs	r0, r3, #1
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6859      	ldr	r1, [r3, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	440b      	add	r3, r1
 800286a:	fbb0 f3f3 	udiv	r3, r0, r3
 800286e:	3301      	adds	r3, #1
 8002870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002874:	2b00      	cmp	r3, #0
 8002876:	bf0c      	ite	eq
 8002878:	2301      	moveq	r3, #1
 800287a:	2300      	movne	r3, #0
 800287c:	b2db      	uxtb	r3, r3
 800287e:	e012      	b.n	80028a6 <HAL_I2C_Init+0x18e>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	1e58      	subs	r0, r3, #1
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6859      	ldr	r1, [r3, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	0099      	lsls	r1, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	fbb0 f3f3 	udiv	r3, r0, r3
 8002896:	3301      	adds	r3, #1
 8002898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800289c:	2b00      	cmp	r3, #0
 800289e:	bf0c      	ite	eq
 80028a0:	2301      	moveq	r3, #1
 80028a2:	2300      	movne	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_I2C_Init+0x196>
 80028aa:	2301      	movs	r3, #1
 80028ac:	e022      	b.n	80028f4 <HAL_I2C_Init+0x1dc>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10e      	bne.n	80028d4 <HAL_I2C_Init+0x1bc>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	1e58      	subs	r0, r3, #1
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6859      	ldr	r1, [r3, #4]
 80028be:	460b      	mov	r3, r1
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	440b      	add	r3, r1
 80028c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80028c8:	3301      	adds	r3, #1
 80028ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028d2:	e00f      	b.n	80028f4 <HAL_I2C_Init+0x1dc>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	1e58      	subs	r0, r3, #1
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6859      	ldr	r1, [r3, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	0099      	lsls	r1, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ea:	3301      	adds	r3, #1
 80028ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	6809      	ldr	r1, [r1, #0]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69da      	ldr	r2, [r3, #28]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002922:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	6911      	ldr	r1, [r2, #16]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	68d2      	ldr	r2, [r2, #12]
 800292e:	4311      	orrs	r1, r2
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6812      	ldr	r2, [r2, #0]
 8002934:	430b      	orrs	r3, r1
 8002936:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	695a      	ldr	r2, [r3, #20]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0201 	orr.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2220      	movs	r2, #32
 800296e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	000186a0 	.word	0x000186a0
 8002990:	001e847f 	.word	0x001e847f
 8002994:	003d08ff 	.word	0x003d08ff
 8002998:	431bde83 	.word	0x431bde83
 800299c:	10624dd3 	.word	0x10624dd3

080029a0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b088      	sub	sp, #32
 80029a4:	af02      	add	r7, sp, #8
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	607a      	str	r2, [r7, #4]
 80029aa:	461a      	mov	r2, r3
 80029ac:	460b      	mov	r3, r1
 80029ae:	817b      	strh	r3, [r7, #10]
 80029b0:	4613      	mov	r3, r2
 80029b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029b4:	f7ff fbcc 	bl	8002150 <HAL_GetTick>
 80029b8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b20      	cmp	r3, #32
 80029c4:	f040 80e0 	bne.w	8002b88 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	2319      	movs	r3, #25
 80029ce:	2201      	movs	r2, #1
 80029d0:	4970      	ldr	r1, [pc, #448]	; (8002b94 <HAL_I2C_Master_Transmit+0x1f4>)
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f000 f964 	bl	8002ca0 <I2C_WaitOnFlagUntilTimeout>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80029de:	2302      	movs	r3, #2
 80029e0:	e0d3      	b.n	8002b8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_I2C_Master_Transmit+0x50>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e0cc      	b.n	8002b8a <HAL_I2C_Master_Transmit+0x1ea>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d007      	beq.n	8002a16 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f042 0201 	orr.w	r2, r2, #1
 8002a14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2221      	movs	r2, #33	; 0x21
 8002a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2210      	movs	r2, #16
 8002a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	893a      	ldrh	r2, [r7, #8]
 8002a46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	4a50      	ldr	r2, [pc, #320]	; (8002b98 <HAL_I2C_Master_Transmit+0x1f8>)
 8002a56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a58:	8979      	ldrh	r1, [r7, #10]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	6a3a      	ldr	r2, [r7, #32]
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 f89c 	bl	8002b9c <I2C_MasterRequestWrite>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e08d      	b.n	8002b8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a6e:	2300      	movs	r3, #0
 8002a70:	613b      	str	r3, [r7, #16]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	613b      	str	r3, [r7, #16]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	613b      	str	r3, [r7, #16]
 8002a82:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a84:	e066      	b.n	8002b54 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	6a39      	ldr	r1, [r7, #32]
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 f9de 	bl	8002e4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00d      	beq.n	8002ab2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d107      	bne.n	8002aae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e06b      	b.n	8002b8a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	781a      	ldrb	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac2:	1c5a      	adds	r2, r3, #1
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ada:	3b01      	subs	r3, #1
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	d11b      	bne.n	8002b28 <HAL_I2C_Master_Transmit+0x188>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d017      	beq.n	8002b28 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	781a      	ldrb	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	1c5a      	adds	r2, r3, #1
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	6a39      	ldr	r1, [r7, #32]
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 f9ce 	bl	8002ece <I2C_WaitOnBTFFlagUntilTimeout>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00d      	beq.n	8002b54 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d107      	bne.n	8002b50 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b4e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e01a      	b.n	8002b8a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d194      	bne.n	8002a86 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b84:	2300      	movs	r3, #0
 8002b86:	e000      	b.n	8002b8a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b88:	2302      	movs	r3, #2
  }
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3718      	adds	r7, #24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	00100002 	.word	0x00100002
 8002b98:	ffff0000 	.word	0xffff0000

08002b9c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b088      	sub	sp, #32
 8002ba0:	af02      	add	r7, sp, #8
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	607a      	str	r2, [r7, #4]
 8002ba6:	603b      	str	r3, [r7, #0]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	d006      	beq.n	8002bc6 <I2C_MasterRequestWrite+0x2a>
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d003      	beq.n	8002bc6 <I2C_MasterRequestWrite+0x2a>
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bc4:	d108      	bne.n	8002bd8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	e00b      	b.n	8002bf0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bdc:	2b12      	cmp	r3, #18
 8002bde:	d107      	bne.n	8002bf0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f000 f84f 	bl	8002ca0 <I2C_WaitOnFlagUntilTimeout>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00d      	beq.n	8002c24 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c16:	d103      	bne.n	8002c20 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e035      	b.n	8002c90 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c2c:	d108      	bne.n	8002c40 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c2e:	897b      	ldrh	r3, [r7, #10]
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	461a      	mov	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c3c:	611a      	str	r2, [r3, #16]
 8002c3e:	e01b      	b.n	8002c78 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c40:	897b      	ldrh	r3, [r7, #10]
 8002c42:	11db      	asrs	r3, r3, #7
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	f003 0306 	and.w	r3, r3, #6
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	f063 030f 	orn	r3, r3, #15
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	490e      	ldr	r1, [pc, #56]	; (8002c98 <I2C_MasterRequestWrite+0xfc>)
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 f875 	bl	8002d4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e010      	b.n	8002c90 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c6e:	897b      	ldrh	r3, [r7, #10]
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	4907      	ldr	r1, [pc, #28]	; (8002c9c <I2C_MasterRequestWrite+0x100>)
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 f865 	bl	8002d4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e000      	b.n	8002c90 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	00010008 	.word	0x00010008
 8002c9c:	00010002 	.word	0x00010002

08002ca0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	603b      	str	r3, [r7, #0]
 8002cac:	4613      	mov	r3, r2
 8002cae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cb0:	e025      	b.n	8002cfe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb8:	d021      	beq.n	8002cfe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cba:	f7ff fa49 	bl	8002150 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d302      	bcc.n	8002cd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d116      	bne.n	8002cfe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2220      	movs	r2, #32
 8002cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	f043 0220 	orr.w	r2, r3, #32
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e023      	b.n	8002d46 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	0c1b      	lsrs	r3, r3, #16
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d10d      	bne.n	8002d24 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	43da      	mvns	r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	4013      	ands	r3, r2
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	bf0c      	ite	eq
 8002d1a:	2301      	moveq	r3, #1
 8002d1c:	2300      	movne	r3, #0
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	e00c      	b.n	8002d3e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	43da      	mvns	r2, r3
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	bf0c      	ite	eq
 8002d36:	2301      	moveq	r3, #1
 8002d38:	2300      	movne	r3, #0
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	79fb      	ldrb	r3, [r7, #7]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d0b6      	beq.n	8002cb2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b084      	sub	sp, #16
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	60f8      	str	r0, [r7, #12]
 8002d56:	60b9      	str	r1, [r7, #8]
 8002d58:	607a      	str	r2, [r7, #4]
 8002d5a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d5c:	e051      	b.n	8002e02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d6c:	d123      	bne.n	8002db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d7c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d86:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2220      	movs	r2, #32
 8002d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	f043 0204 	orr.w	r2, r3, #4
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e046      	b.n	8002e44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dbc:	d021      	beq.n	8002e02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dbe:	f7ff f9c7 	bl	8002150 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d302      	bcc.n	8002dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d116      	bne.n	8002e02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	f043 0220 	orr.w	r2, r3, #32
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e020      	b.n	8002e44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	0c1b      	lsrs	r3, r3, #16
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d10c      	bne.n	8002e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	43da      	mvns	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	4013      	ands	r3, r2
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	bf14      	ite	ne
 8002e1e:	2301      	movne	r3, #1
 8002e20:	2300      	moveq	r3, #0
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	e00b      	b.n	8002e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	43da      	mvns	r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	4013      	ands	r3, r2
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	bf14      	ite	ne
 8002e38:	2301      	movne	r3, #1
 8002e3a:	2300      	moveq	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d18d      	bne.n	8002d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e58:	e02d      	b.n	8002eb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 f878 	bl	8002f50 <I2C_IsAcknowledgeFailed>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e02d      	b.n	8002ec6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e70:	d021      	beq.n	8002eb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e72:	f7ff f96d 	bl	8002150 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d302      	bcc.n	8002e88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d116      	bne.n	8002eb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2220      	movs	r2, #32
 8002e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	f043 0220 	orr.w	r2, r3, #32
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e007      	b.n	8002ec6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec0:	2b80      	cmp	r3, #128	; 0x80
 8002ec2:	d1ca      	bne.n	8002e5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b084      	sub	sp, #16
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	60f8      	str	r0, [r7, #12]
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002eda:	e02d      	b.n	8002f38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 f837 	bl	8002f50 <I2C_IsAcknowledgeFailed>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e02d      	b.n	8002f48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef2:	d021      	beq.n	8002f38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef4:	f7ff f92c 	bl	8002150 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d302      	bcc.n	8002f0a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d116      	bne.n	8002f38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2220      	movs	r2, #32
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	f043 0220 	orr.w	r2, r3, #32
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e007      	b.n	8002f48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f003 0304 	and.w	r3, r3, #4
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d1ca      	bne.n	8002edc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f66:	d11b      	bne.n	8002fa0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f70:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	f043 0204 	orr.w	r2, r3, #4
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e000      	b.n	8002fa2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
	...

08002fb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e264      	b.n	800348c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d075      	beq.n	80030ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fce:	4ba3      	ldr	r3, [pc, #652]	; (800325c <HAL_RCC_OscConfig+0x2ac>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d00c      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fda:	4ba0      	ldr	r3, [pc, #640]	; (800325c <HAL_RCC_OscConfig+0x2ac>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fe2:	2b08      	cmp	r3, #8
 8002fe4:	d112      	bne.n	800300c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fe6:	4b9d      	ldr	r3, [pc, #628]	; (800325c <HAL_RCC_OscConfig+0x2ac>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ff2:	d10b      	bne.n	800300c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff4:	4b99      	ldr	r3, [pc, #612]	; (800325c <HAL_RCC_OscConfig+0x2ac>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d05b      	beq.n	80030b8 <HAL_RCC_OscConfig+0x108>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d157      	bne.n	80030b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e23f      	b.n	800348c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003014:	d106      	bne.n	8003024 <HAL_RCC_OscConfig+0x74>
 8003016:	4b91      	ldr	r3, [pc, #580]	; (800325c <HAL_RCC_OscConfig+0x2ac>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a90      	ldr	r2, [pc, #576]	; (800325c <HAL_RCC_OscConfig+0x2ac>)
 800301c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	e01d      	b.n	8003060 <HAL_RCC_OscConfig+0xb0>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800302c:	d10c      	bne.n	8003048 <HAL_RCC_OscConfig+0x98>
 800302e:	4b8b      	ldr	r3, [pc, #556]	; (800325c <HAL_RCC_OscConfig+0x2ac>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a8a      	ldr	r2, [pc, #552]	; (800325c <HAL_RCC_OscConfig+0x2ac>)
 8003034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	4b88      	ldr	r3, [pc, #544]	; (800325c <HAL_RCC_OscConfig+0x2ac>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a87      	ldr	r2, [pc, #540]	; (800325c <HAL_RCC_OscConfig+0x2ac>)
 8003040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003044:	6013      	str	r3, [r2, #0]
 8003046:	e00b      	b.n	8003060 <HAL_RCC_OscConfig+0xb0>
 8003048:	4b84      	ldr	r3, [pc, #528]	; (800325c <HAL_RCC_OscConfig+0x2ac>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a83      	ldr	r2, [pc, #524]	; (800325c <HAL_RCC_OscConfig+0x2ac>)
 800304e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003052:	6013      	str	r3, [r2, #0]
 8003054:	4b81      	ldr	r3, [pc, #516]	; (800325c <HAL_RCC_OscConfig+0x2ac>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a80      	ldr	r2, [pc, #512]	; (800325c <HAL_RCC_OscConfig+0x2ac>)
 800305a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800305e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d013      	beq.n	8003090 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003068:	f7ff f872 	bl	8002150 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003070:	f7ff f86e 	bl	8002150 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b64      	cmp	r3, #100	; 0x64
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e204      	b.n	800348c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003082:	4b76      	ldr	r3, [pc, #472]	; (800325c <HAL_RCC_OscConfig+0x2ac>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0f0      	beq.n	8003070 <HAL_RCC_OscConfig+0xc0>
 800308e:	e014      	b.n	80030ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003090:	f7ff f85e 	bl	8002150 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003098:	f7ff f85a 	bl	8002150 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b64      	cmp	r3, #100	; 0x64
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e1f0      	b.n	800348c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030aa:	4b6c      	ldr	r3, [pc, #432]	; (800325c <HAL_RCC_OscConfig+0x2ac>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1f0      	bne.n	8003098 <HAL_RCC_OscConfig+0xe8>
 80030b6:	e000      	b.n	80030ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d063      	beq.n	800318e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030c6:	4b65      	ldr	r3, [pc, #404]	; (800325c <HAL_RCC_OscConfig+0x2ac>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 030c 	and.w	r3, r3, #12
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00b      	beq.n	80030ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030d2:	4b62      	ldr	r3, [pc, #392]	; (800325c <HAL_RCC_OscConfig+0x2ac>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030da:	2b08      	cmp	r3, #8
 80030dc:	d11c      	bne.n	8003118 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030de:	4b5f      	ldr	r3, [pc, #380]	; (800325c <HAL_RCC_OscConfig+0x2ac>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d116      	bne.n	8003118 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ea:	4b5c      	ldr	r3, [pc, #368]	; (800325c <HAL_RCC_OscConfig+0x2ac>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d005      	beq.n	8003102 <HAL_RCC_OscConfig+0x152>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d001      	beq.n	8003102 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e1c4      	b.n	800348c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003102:	4b56      	ldr	r3, [pc, #344]	; (800325c <HAL_RCC_OscConfig+0x2ac>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	4952      	ldr	r1, [pc, #328]	; (800325c <HAL_RCC_OscConfig+0x2ac>)
 8003112:	4313      	orrs	r3, r2
 8003114:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003116:	e03a      	b.n	800318e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d020      	beq.n	8003162 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003120:	4b4f      	ldr	r3, [pc, #316]	; (8003260 <HAL_RCC_OscConfig+0x2b0>)
 8003122:	2201      	movs	r2, #1
 8003124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003126:	f7ff f813 	bl	8002150 <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800312e:	f7ff f80f 	bl	8002150 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e1a5      	b.n	800348c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003140:	4b46      	ldr	r3, [pc, #280]	; (800325c <HAL_RCC_OscConfig+0x2ac>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0f0      	beq.n	800312e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800314c:	4b43      	ldr	r3, [pc, #268]	; (800325c <HAL_RCC_OscConfig+0x2ac>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	4940      	ldr	r1, [pc, #256]	; (800325c <HAL_RCC_OscConfig+0x2ac>)
 800315c:	4313      	orrs	r3, r2
 800315e:	600b      	str	r3, [r1, #0]
 8003160:	e015      	b.n	800318e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003162:	4b3f      	ldr	r3, [pc, #252]	; (8003260 <HAL_RCC_OscConfig+0x2b0>)
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003168:	f7fe fff2 	bl	8002150 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003170:	f7fe ffee 	bl	8002150 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e184      	b.n	800348c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003182:	4b36      	ldr	r3, [pc, #216]	; (800325c <HAL_RCC_OscConfig+0x2ac>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f0      	bne.n	8003170 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b00      	cmp	r3, #0
 8003198:	d030      	beq.n	80031fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d016      	beq.n	80031d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031a2:	4b30      	ldr	r3, [pc, #192]	; (8003264 <HAL_RCC_OscConfig+0x2b4>)
 80031a4:	2201      	movs	r2, #1
 80031a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a8:	f7fe ffd2 	bl	8002150 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031b0:	f7fe ffce 	bl	8002150 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e164      	b.n	800348c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031c2:	4b26      	ldr	r3, [pc, #152]	; (800325c <HAL_RCC_OscConfig+0x2ac>)
 80031c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0f0      	beq.n	80031b0 <HAL_RCC_OscConfig+0x200>
 80031ce:	e015      	b.n	80031fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031d0:	4b24      	ldr	r3, [pc, #144]	; (8003264 <HAL_RCC_OscConfig+0x2b4>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d6:	f7fe ffbb 	bl	8002150 <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031de:	f7fe ffb7 	bl	8002150 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e14d      	b.n	800348c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031f0:	4b1a      	ldr	r3, [pc, #104]	; (800325c <HAL_RCC_OscConfig+0x2ac>)
 80031f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1f0      	bne.n	80031de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 80a0 	beq.w	800334a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800320a:	2300      	movs	r3, #0
 800320c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800320e:	4b13      	ldr	r3, [pc, #76]	; (800325c <HAL_RCC_OscConfig+0x2ac>)
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10f      	bne.n	800323a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800321a:	2300      	movs	r3, #0
 800321c:	60bb      	str	r3, [r7, #8]
 800321e:	4b0f      	ldr	r3, [pc, #60]	; (800325c <HAL_RCC_OscConfig+0x2ac>)
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	4a0e      	ldr	r2, [pc, #56]	; (800325c <HAL_RCC_OscConfig+0x2ac>)
 8003224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003228:	6413      	str	r3, [r2, #64]	; 0x40
 800322a:	4b0c      	ldr	r3, [pc, #48]	; (800325c <HAL_RCC_OscConfig+0x2ac>)
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003232:	60bb      	str	r3, [r7, #8]
 8003234:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003236:	2301      	movs	r3, #1
 8003238:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800323a:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <HAL_RCC_OscConfig+0x2b8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003242:	2b00      	cmp	r3, #0
 8003244:	d121      	bne.n	800328a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003246:	4b08      	ldr	r3, [pc, #32]	; (8003268 <HAL_RCC_OscConfig+0x2b8>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a07      	ldr	r2, [pc, #28]	; (8003268 <HAL_RCC_OscConfig+0x2b8>)
 800324c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003250:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003252:	f7fe ff7d 	bl	8002150 <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003258:	e011      	b.n	800327e <HAL_RCC_OscConfig+0x2ce>
 800325a:	bf00      	nop
 800325c:	40023800 	.word	0x40023800
 8003260:	42470000 	.word	0x42470000
 8003264:	42470e80 	.word	0x42470e80
 8003268:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800326c:	f7fe ff70 	bl	8002150 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e106      	b.n	800348c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327e:	4b85      	ldr	r3, [pc, #532]	; (8003494 <HAL_RCC_OscConfig+0x4e4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0f0      	beq.n	800326c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d106      	bne.n	80032a0 <HAL_RCC_OscConfig+0x2f0>
 8003292:	4b81      	ldr	r3, [pc, #516]	; (8003498 <HAL_RCC_OscConfig+0x4e8>)
 8003294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003296:	4a80      	ldr	r2, [pc, #512]	; (8003498 <HAL_RCC_OscConfig+0x4e8>)
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	6713      	str	r3, [r2, #112]	; 0x70
 800329e:	e01c      	b.n	80032da <HAL_RCC_OscConfig+0x32a>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	2b05      	cmp	r3, #5
 80032a6:	d10c      	bne.n	80032c2 <HAL_RCC_OscConfig+0x312>
 80032a8:	4b7b      	ldr	r3, [pc, #492]	; (8003498 <HAL_RCC_OscConfig+0x4e8>)
 80032aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ac:	4a7a      	ldr	r2, [pc, #488]	; (8003498 <HAL_RCC_OscConfig+0x4e8>)
 80032ae:	f043 0304 	orr.w	r3, r3, #4
 80032b2:	6713      	str	r3, [r2, #112]	; 0x70
 80032b4:	4b78      	ldr	r3, [pc, #480]	; (8003498 <HAL_RCC_OscConfig+0x4e8>)
 80032b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b8:	4a77      	ldr	r2, [pc, #476]	; (8003498 <HAL_RCC_OscConfig+0x4e8>)
 80032ba:	f043 0301 	orr.w	r3, r3, #1
 80032be:	6713      	str	r3, [r2, #112]	; 0x70
 80032c0:	e00b      	b.n	80032da <HAL_RCC_OscConfig+0x32a>
 80032c2:	4b75      	ldr	r3, [pc, #468]	; (8003498 <HAL_RCC_OscConfig+0x4e8>)
 80032c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c6:	4a74      	ldr	r2, [pc, #464]	; (8003498 <HAL_RCC_OscConfig+0x4e8>)
 80032c8:	f023 0301 	bic.w	r3, r3, #1
 80032cc:	6713      	str	r3, [r2, #112]	; 0x70
 80032ce:	4b72      	ldr	r3, [pc, #456]	; (8003498 <HAL_RCC_OscConfig+0x4e8>)
 80032d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d2:	4a71      	ldr	r2, [pc, #452]	; (8003498 <HAL_RCC_OscConfig+0x4e8>)
 80032d4:	f023 0304 	bic.w	r3, r3, #4
 80032d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d015      	beq.n	800330e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e2:	f7fe ff35 	bl	8002150 <HAL_GetTick>
 80032e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e8:	e00a      	b.n	8003300 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032ea:	f7fe ff31 	bl	8002150 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e0c5      	b.n	800348c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003300:	4b65      	ldr	r3, [pc, #404]	; (8003498 <HAL_RCC_OscConfig+0x4e8>)
 8003302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0ee      	beq.n	80032ea <HAL_RCC_OscConfig+0x33a>
 800330c:	e014      	b.n	8003338 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800330e:	f7fe ff1f 	bl	8002150 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003314:	e00a      	b.n	800332c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003316:	f7fe ff1b 	bl	8002150 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	f241 3288 	movw	r2, #5000	; 0x1388
 8003324:	4293      	cmp	r3, r2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e0af      	b.n	800348c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800332c:	4b5a      	ldr	r3, [pc, #360]	; (8003498 <HAL_RCC_OscConfig+0x4e8>)
 800332e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1ee      	bne.n	8003316 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003338:	7dfb      	ldrb	r3, [r7, #23]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d105      	bne.n	800334a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800333e:	4b56      	ldr	r3, [pc, #344]	; (8003498 <HAL_RCC_OscConfig+0x4e8>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	4a55      	ldr	r2, [pc, #340]	; (8003498 <HAL_RCC_OscConfig+0x4e8>)
 8003344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003348:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 809b 	beq.w	800348a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003354:	4b50      	ldr	r3, [pc, #320]	; (8003498 <HAL_RCC_OscConfig+0x4e8>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 030c 	and.w	r3, r3, #12
 800335c:	2b08      	cmp	r3, #8
 800335e:	d05c      	beq.n	800341a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	2b02      	cmp	r3, #2
 8003366:	d141      	bne.n	80033ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003368:	4b4c      	ldr	r3, [pc, #304]	; (800349c <HAL_RCC_OscConfig+0x4ec>)
 800336a:	2200      	movs	r2, #0
 800336c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336e:	f7fe feef 	bl	8002150 <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003376:	f7fe feeb 	bl	8002150 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e081      	b.n	800348c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003388:	4b43      	ldr	r3, [pc, #268]	; (8003498 <HAL_RCC_OscConfig+0x4e8>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1f0      	bne.n	8003376 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	69da      	ldr	r2, [r3, #28]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	431a      	orrs	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a2:	019b      	lsls	r3, r3, #6
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033aa:	085b      	lsrs	r3, r3, #1
 80033ac:	3b01      	subs	r3, #1
 80033ae:	041b      	lsls	r3, r3, #16
 80033b0:	431a      	orrs	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b6:	061b      	lsls	r3, r3, #24
 80033b8:	4937      	ldr	r1, [pc, #220]	; (8003498 <HAL_RCC_OscConfig+0x4e8>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033be:	4b37      	ldr	r3, [pc, #220]	; (800349c <HAL_RCC_OscConfig+0x4ec>)
 80033c0:	2201      	movs	r2, #1
 80033c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c4:	f7fe fec4 	bl	8002150 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033cc:	f7fe fec0 	bl	8002150 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e056      	b.n	800348c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033de:	4b2e      	ldr	r3, [pc, #184]	; (8003498 <HAL_RCC_OscConfig+0x4e8>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0f0      	beq.n	80033cc <HAL_RCC_OscConfig+0x41c>
 80033ea:	e04e      	b.n	800348a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ec:	4b2b      	ldr	r3, [pc, #172]	; (800349c <HAL_RCC_OscConfig+0x4ec>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f2:	f7fe fead 	bl	8002150 <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033f8:	e008      	b.n	800340c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033fa:	f7fe fea9 	bl	8002150 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e03f      	b.n	800348c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800340c:	4b22      	ldr	r3, [pc, #136]	; (8003498 <HAL_RCC_OscConfig+0x4e8>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1f0      	bne.n	80033fa <HAL_RCC_OscConfig+0x44a>
 8003418:	e037      	b.n	800348a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d101      	bne.n	8003426 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e032      	b.n	800348c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003426:	4b1c      	ldr	r3, [pc, #112]	; (8003498 <HAL_RCC_OscConfig+0x4e8>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d028      	beq.n	8003486 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800343e:	429a      	cmp	r2, r3
 8003440:	d121      	bne.n	8003486 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800344c:	429a      	cmp	r2, r3
 800344e:	d11a      	bne.n	8003486 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003456:	4013      	ands	r3, r2
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800345c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800345e:	4293      	cmp	r3, r2
 8003460:	d111      	bne.n	8003486 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346c:	085b      	lsrs	r3, r3, #1
 800346e:	3b01      	subs	r3, #1
 8003470:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003472:	429a      	cmp	r2, r3
 8003474:	d107      	bne.n	8003486 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003480:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003482:	429a      	cmp	r2, r3
 8003484:	d001      	beq.n	800348a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40007000 	.word	0x40007000
 8003498:	40023800 	.word	0x40023800
 800349c:	42470060 	.word	0x42470060

080034a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e0cc      	b.n	800364e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034b4:	4b68      	ldr	r3, [pc, #416]	; (8003658 <HAL_RCC_ClockConfig+0x1b8>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d90c      	bls.n	80034dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c2:	4b65      	ldr	r3, [pc, #404]	; (8003658 <HAL_RCC_ClockConfig+0x1b8>)
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ca:	4b63      	ldr	r3, [pc, #396]	; (8003658 <HAL_RCC_ClockConfig+0x1b8>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d001      	beq.n	80034dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e0b8      	b.n	800364e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d020      	beq.n	800352a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d005      	beq.n	8003500 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034f4:	4b59      	ldr	r3, [pc, #356]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	4a58      	ldr	r2, [pc, #352]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	2b00      	cmp	r3, #0
 800350a:	d005      	beq.n	8003518 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800350c:	4b53      	ldr	r3, [pc, #332]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	4a52      	ldr	r2, [pc, #328]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 8003512:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003516:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003518:	4b50      	ldr	r3, [pc, #320]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	494d      	ldr	r1, [pc, #308]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 8003526:	4313      	orrs	r3, r2
 8003528:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d044      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d107      	bne.n	800354e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353e:	4b47      	ldr	r3, [pc, #284]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d119      	bne.n	800357e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e07f      	b.n	800364e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b02      	cmp	r3, #2
 8003554:	d003      	beq.n	800355e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800355a:	2b03      	cmp	r3, #3
 800355c:	d107      	bne.n	800356e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355e:	4b3f      	ldr	r3, [pc, #252]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d109      	bne.n	800357e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e06f      	b.n	800364e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356e:	4b3b      	ldr	r3, [pc, #236]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e067      	b.n	800364e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800357e:	4b37      	ldr	r3, [pc, #220]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f023 0203 	bic.w	r2, r3, #3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	4934      	ldr	r1, [pc, #208]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 800358c:	4313      	orrs	r3, r2
 800358e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003590:	f7fe fdde 	bl	8002150 <HAL_GetTick>
 8003594:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003596:	e00a      	b.n	80035ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003598:	f7fe fdda 	bl	8002150 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e04f      	b.n	800364e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ae:	4b2b      	ldr	r3, [pc, #172]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 020c 	and.w	r2, r3, #12
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	429a      	cmp	r2, r3
 80035be:	d1eb      	bne.n	8003598 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035c0:	4b25      	ldr	r3, [pc, #148]	; (8003658 <HAL_RCC_ClockConfig+0x1b8>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d20c      	bcs.n	80035e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ce:	4b22      	ldr	r3, [pc, #136]	; (8003658 <HAL_RCC_ClockConfig+0x1b8>)
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d6:	4b20      	ldr	r3, [pc, #128]	; (8003658 <HAL_RCC_ClockConfig+0x1b8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d001      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e032      	b.n	800364e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d008      	beq.n	8003606 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035f4:	4b19      	ldr	r3, [pc, #100]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	4916      	ldr	r1, [pc, #88]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	4313      	orrs	r3, r2
 8003604:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	2b00      	cmp	r3, #0
 8003610:	d009      	beq.n	8003626 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003612:	4b12      	ldr	r3, [pc, #72]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	490e      	ldr	r1, [pc, #56]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	4313      	orrs	r3, r2
 8003624:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003626:	f000 f821 	bl	800366c <HAL_RCC_GetSysClockFreq>
 800362a:	4602      	mov	r2, r0
 800362c:	4b0b      	ldr	r3, [pc, #44]	; (800365c <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	091b      	lsrs	r3, r3, #4
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	490a      	ldr	r1, [pc, #40]	; (8003660 <HAL_RCC_ClockConfig+0x1c0>)
 8003638:	5ccb      	ldrb	r3, [r1, r3]
 800363a:	fa22 f303 	lsr.w	r3, r2, r3
 800363e:	4a09      	ldr	r2, [pc, #36]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 8003640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003642:	4b09      	ldr	r3, [pc, #36]	; (8003668 <HAL_RCC_ClockConfig+0x1c8>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f7fe fd3e 	bl	80020c8 <HAL_InitTick>

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	40023c00 	.word	0x40023c00
 800365c:	40023800 	.word	0x40023800
 8003660:	08008c9c 	.word	0x08008c9c
 8003664:	20000040 	.word	0x20000040
 8003668:	20000044 	.word	0x20000044

0800366c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800366c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003670:	b084      	sub	sp, #16
 8003672:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003674:	2300      	movs	r3, #0
 8003676:	607b      	str	r3, [r7, #4]
 8003678:	2300      	movs	r3, #0
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	2300      	movs	r3, #0
 800367e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003680:	2300      	movs	r3, #0
 8003682:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003684:	4b67      	ldr	r3, [pc, #412]	; (8003824 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 030c 	and.w	r3, r3, #12
 800368c:	2b08      	cmp	r3, #8
 800368e:	d00d      	beq.n	80036ac <HAL_RCC_GetSysClockFreq+0x40>
 8003690:	2b08      	cmp	r3, #8
 8003692:	f200 80bd 	bhi.w	8003810 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003696:	2b00      	cmp	r3, #0
 8003698:	d002      	beq.n	80036a0 <HAL_RCC_GetSysClockFreq+0x34>
 800369a:	2b04      	cmp	r3, #4
 800369c:	d003      	beq.n	80036a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800369e:	e0b7      	b.n	8003810 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036a0:	4b61      	ldr	r3, [pc, #388]	; (8003828 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80036a2:	60bb      	str	r3, [r7, #8]
       break;
 80036a4:	e0b7      	b.n	8003816 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036a6:	4b61      	ldr	r3, [pc, #388]	; (800382c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80036a8:	60bb      	str	r3, [r7, #8]
      break;
 80036aa:	e0b4      	b.n	8003816 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036ac:	4b5d      	ldr	r3, [pc, #372]	; (8003824 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036b4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036b6:	4b5b      	ldr	r3, [pc, #364]	; (8003824 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d04d      	beq.n	800375e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036c2:	4b58      	ldr	r3, [pc, #352]	; (8003824 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	099b      	lsrs	r3, r3, #6
 80036c8:	461a      	mov	r2, r3
 80036ca:	f04f 0300 	mov.w	r3, #0
 80036ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80036d2:	f04f 0100 	mov.w	r1, #0
 80036d6:	ea02 0800 	and.w	r8, r2, r0
 80036da:	ea03 0901 	and.w	r9, r3, r1
 80036de:	4640      	mov	r0, r8
 80036e0:	4649      	mov	r1, r9
 80036e2:	f04f 0200 	mov.w	r2, #0
 80036e6:	f04f 0300 	mov.w	r3, #0
 80036ea:	014b      	lsls	r3, r1, #5
 80036ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80036f0:	0142      	lsls	r2, r0, #5
 80036f2:	4610      	mov	r0, r2
 80036f4:	4619      	mov	r1, r3
 80036f6:	ebb0 0008 	subs.w	r0, r0, r8
 80036fa:	eb61 0109 	sbc.w	r1, r1, r9
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	f04f 0300 	mov.w	r3, #0
 8003706:	018b      	lsls	r3, r1, #6
 8003708:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800370c:	0182      	lsls	r2, r0, #6
 800370e:	1a12      	subs	r2, r2, r0
 8003710:	eb63 0301 	sbc.w	r3, r3, r1
 8003714:	f04f 0000 	mov.w	r0, #0
 8003718:	f04f 0100 	mov.w	r1, #0
 800371c:	00d9      	lsls	r1, r3, #3
 800371e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003722:	00d0      	lsls	r0, r2, #3
 8003724:	4602      	mov	r2, r0
 8003726:	460b      	mov	r3, r1
 8003728:	eb12 0208 	adds.w	r2, r2, r8
 800372c:	eb43 0309 	adc.w	r3, r3, r9
 8003730:	f04f 0000 	mov.w	r0, #0
 8003734:	f04f 0100 	mov.w	r1, #0
 8003738:	0259      	lsls	r1, r3, #9
 800373a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800373e:	0250      	lsls	r0, r2, #9
 8003740:	4602      	mov	r2, r0
 8003742:	460b      	mov	r3, r1
 8003744:	4610      	mov	r0, r2
 8003746:	4619      	mov	r1, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	461a      	mov	r2, r3
 800374c:	f04f 0300 	mov.w	r3, #0
 8003750:	f7fd fa4a 	bl	8000be8 <__aeabi_uldivmod>
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	4613      	mov	r3, r2
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	e04a      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800375e:	4b31      	ldr	r3, [pc, #196]	; (8003824 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	099b      	lsrs	r3, r3, #6
 8003764:	461a      	mov	r2, r3
 8003766:	f04f 0300 	mov.w	r3, #0
 800376a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800376e:	f04f 0100 	mov.w	r1, #0
 8003772:	ea02 0400 	and.w	r4, r2, r0
 8003776:	ea03 0501 	and.w	r5, r3, r1
 800377a:	4620      	mov	r0, r4
 800377c:	4629      	mov	r1, r5
 800377e:	f04f 0200 	mov.w	r2, #0
 8003782:	f04f 0300 	mov.w	r3, #0
 8003786:	014b      	lsls	r3, r1, #5
 8003788:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800378c:	0142      	lsls	r2, r0, #5
 800378e:	4610      	mov	r0, r2
 8003790:	4619      	mov	r1, r3
 8003792:	1b00      	subs	r0, r0, r4
 8003794:	eb61 0105 	sbc.w	r1, r1, r5
 8003798:	f04f 0200 	mov.w	r2, #0
 800379c:	f04f 0300 	mov.w	r3, #0
 80037a0:	018b      	lsls	r3, r1, #6
 80037a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80037a6:	0182      	lsls	r2, r0, #6
 80037a8:	1a12      	subs	r2, r2, r0
 80037aa:	eb63 0301 	sbc.w	r3, r3, r1
 80037ae:	f04f 0000 	mov.w	r0, #0
 80037b2:	f04f 0100 	mov.w	r1, #0
 80037b6:	00d9      	lsls	r1, r3, #3
 80037b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037bc:	00d0      	lsls	r0, r2, #3
 80037be:	4602      	mov	r2, r0
 80037c0:	460b      	mov	r3, r1
 80037c2:	1912      	adds	r2, r2, r4
 80037c4:	eb45 0303 	adc.w	r3, r5, r3
 80037c8:	f04f 0000 	mov.w	r0, #0
 80037cc:	f04f 0100 	mov.w	r1, #0
 80037d0:	0299      	lsls	r1, r3, #10
 80037d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80037d6:	0290      	lsls	r0, r2, #10
 80037d8:	4602      	mov	r2, r0
 80037da:	460b      	mov	r3, r1
 80037dc:	4610      	mov	r0, r2
 80037de:	4619      	mov	r1, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	461a      	mov	r2, r3
 80037e4:	f04f 0300 	mov.w	r3, #0
 80037e8:	f7fd f9fe 	bl	8000be8 <__aeabi_uldivmod>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	4613      	mov	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037f4:	4b0b      	ldr	r3, [pc, #44]	; (8003824 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	0c1b      	lsrs	r3, r3, #16
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	3301      	adds	r3, #1
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	fbb2 f3f3 	udiv	r3, r2, r3
 800380c:	60bb      	str	r3, [r7, #8]
      break;
 800380e:	e002      	b.n	8003816 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003810:	4b05      	ldr	r3, [pc, #20]	; (8003828 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003812:	60bb      	str	r3, [r7, #8]
      break;
 8003814:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003816:	68bb      	ldr	r3, [r7, #8]
}
 8003818:	4618      	mov	r0, r3
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003822:	bf00      	nop
 8003824:	40023800 	.word	0x40023800
 8003828:	00f42400 	.word	0x00f42400
 800382c:	007a1200 	.word	0x007a1200

08003830 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003834:	4b03      	ldr	r3, [pc, #12]	; (8003844 <HAL_RCC_GetHCLKFreq+0x14>)
 8003836:	681b      	ldr	r3, [r3, #0]
}
 8003838:	4618      	mov	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	20000040 	.word	0x20000040

08003848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800384c:	f7ff fff0 	bl	8003830 <HAL_RCC_GetHCLKFreq>
 8003850:	4602      	mov	r2, r0
 8003852:	4b05      	ldr	r3, [pc, #20]	; (8003868 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	0a9b      	lsrs	r3, r3, #10
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	4903      	ldr	r1, [pc, #12]	; (800386c <HAL_RCC_GetPCLK1Freq+0x24>)
 800385e:	5ccb      	ldrb	r3, [r1, r3]
 8003860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003864:	4618      	mov	r0, r3
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40023800 	.word	0x40023800
 800386c:	08008cac 	.word	0x08008cac

08003870 <atof>:
 8003870:	2100      	movs	r1, #0
 8003872:	f000 be73 	b.w	800455c <strtod>
	...

08003878 <__errno>:
 8003878:	4b01      	ldr	r3, [pc, #4]	; (8003880 <__errno+0x8>)
 800387a:	6818      	ldr	r0, [r3, #0]
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	2000004c 	.word	0x2000004c

08003884 <__libc_init_array>:
 8003884:	b570      	push	{r4, r5, r6, lr}
 8003886:	4d0d      	ldr	r5, [pc, #52]	; (80038bc <__libc_init_array+0x38>)
 8003888:	4c0d      	ldr	r4, [pc, #52]	; (80038c0 <__libc_init_array+0x3c>)
 800388a:	1b64      	subs	r4, r4, r5
 800388c:	10a4      	asrs	r4, r4, #2
 800388e:	2600      	movs	r6, #0
 8003890:	42a6      	cmp	r6, r4
 8003892:	d109      	bne.n	80038a8 <__libc_init_array+0x24>
 8003894:	4d0b      	ldr	r5, [pc, #44]	; (80038c4 <__libc_init_array+0x40>)
 8003896:	4c0c      	ldr	r4, [pc, #48]	; (80038c8 <__libc_init_array+0x44>)
 8003898:	f005 f994 	bl	8008bc4 <_init>
 800389c:	1b64      	subs	r4, r4, r5
 800389e:	10a4      	asrs	r4, r4, #2
 80038a0:	2600      	movs	r6, #0
 80038a2:	42a6      	cmp	r6, r4
 80038a4:	d105      	bne.n	80038b2 <__libc_init_array+0x2e>
 80038a6:	bd70      	pop	{r4, r5, r6, pc}
 80038a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ac:	4798      	blx	r3
 80038ae:	3601      	adds	r6, #1
 80038b0:	e7ee      	b.n	8003890 <__libc_init_array+0xc>
 80038b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80038b6:	4798      	blx	r3
 80038b8:	3601      	adds	r6, #1
 80038ba:	e7f2      	b.n	80038a2 <__libc_init_array+0x1e>
 80038bc:	08009338 	.word	0x08009338
 80038c0:	08009338 	.word	0x08009338
 80038c4:	08009338 	.word	0x08009338
 80038c8:	0800933c 	.word	0x0800933c

080038cc <__itoa>:
 80038cc:	1e93      	subs	r3, r2, #2
 80038ce:	2b22      	cmp	r3, #34	; 0x22
 80038d0:	b510      	push	{r4, lr}
 80038d2:	460c      	mov	r4, r1
 80038d4:	d904      	bls.n	80038e0 <__itoa+0x14>
 80038d6:	2300      	movs	r3, #0
 80038d8:	700b      	strb	r3, [r1, #0]
 80038da:	461c      	mov	r4, r3
 80038dc:	4620      	mov	r0, r4
 80038de:	bd10      	pop	{r4, pc}
 80038e0:	2a0a      	cmp	r2, #10
 80038e2:	d109      	bne.n	80038f8 <__itoa+0x2c>
 80038e4:	2800      	cmp	r0, #0
 80038e6:	da07      	bge.n	80038f8 <__itoa+0x2c>
 80038e8:	232d      	movs	r3, #45	; 0x2d
 80038ea:	700b      	strb	r3, [r1, #0]
 80038ec:	4240      	negs	r0, r0
 80038ee:	2101      	movs	r1, #1
 80038f0:	4421      	add	r1, r4
 80038f2:	f000 fe3f 	bl	8004574 <__utoa>
 80038f6:	e7f1      	b.n	80038dc <__itoa+0x10>
 80038f8:	2100      	movs	r1, #0
 80038fa:	e7f9      	b.n	80038f0 <__itoa+0x24>

080038fc <itoa>:
 80038fc:	f7ff bfe6 	b.w	80038cc <__itoa>

08003900 <memset>:
 8003900:	4402      	add	r2, r0
 8003902:	4603      	mov	r3, r0
 8003904:	4293      	cmp	r3, r2
 8003906:	d100      	bne.n	800390a <memset+0xa>
 8003908:	4770      	bx	lr
 800390a:	f803 1b01 	strb.w	r1, [r3], #1
 800390e:	e7f9      	b.n	8003904 <memset+0x4>

08003910 <sulp>:
 8003910:	b570      	push	{r4, r5, r6, lr}
 8003912:	4604      	mov	r4, r0
 8003914:	460d      	mov	r5, r1
 8003916:	ec45 4b10 	vmov	d0, r4, r5
 800391a:	4616      	mov	r6, r2
 800391c:	f001 fd68 	bl	80053f0 <__ulp>
 8003920:	ec51 0b10 	vmov	r0, r1, d0
 8003924:	b17e      	cbz	r6, 8003946 <sulp+0x36>
 8003926:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800392a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800392e:	2b00      	cmp	r3, #0
 8003930:	dd09      	ble.n	8003946 <sulp+0x36>
 8003932:	051b      	lsls	r3, r3, #20
 8003934:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003938:	2400      	movs	r4, #0
 800393a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800393e:	4622      	mov	r2, r4
 8003940:	462b      	mov	r3, r5
 8003942:	f7fc fe59 	bl	80005f8 <__aeabi_dmul>
 8003946:	bd70      	pop	{r4, r5, r6, pc}

08003948 <_strtod_l>:
 8003948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800394c:	b0a3      	sub	sp, #140	; 0x8c
 800394e:	461f      	mov	r7, r3
 8003950:	2300      	movs	r3, #0
 8003952:	931e      	str	r3, [sp, #120]	; 0x78
 8003954:	4ba4      	ldr	r3, [pc, #656]	; (8003be8 <_strtod_l+0x2a0>)
 8003956:	9219      	str	r2, [sp, #100]	; 0x64
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	9307      	str	r3, [sp, #28]
 800395c:	4604      	mov	r4, r0
 800395e:	4618      	mov	r0, r3
 8003960:	4688      	mov	r8, r1
 8003962:	f7fc fc35 	bl	80001d0 <strlen>
 8003966:	f04f 0a00 	mov.w	sl, #0
 800396a:	4605      	mov	r5, r0
 800396c:	f04f 0b00 	mov.w	fp, #0
 8003970:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8003974:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003976:	781a      	ldrb	r2, [r3, #0]
 8003978:	2a2b      	cmp	r2, #43	; 0x2b
 800397a:	d04c      	beq.n	8003a16 <_strtod_l+0xce>
 800397c:	d839      	bhi.n	80039f2 <_strtod_l+0xaa>
 800397e:	2a0d      	cmp	r2, #13
 8003980:	d832      	bhi.n	80039e8 <_strtod_l+0xa0>
 8003982:	2a08      	cmp	r2, #8
 8003984:	d832      	bhi.n	80039ec <_strtod_l+0xa4>
 8003986:	2a00      	cmp	r2, #0
 8003988:	d03c      	beq.n	8003a04 <_strtod_l+0xbc>
 800398a:	2300      	movs	r3, #0
 800398c:	930e      	str	r3, [sp, #56]	; 0x38
 800398e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8003990:	7833      	ldrb	r3, [r6, #0]
 8003992:	2b30      	cmp	r3, #48	; 0x30
 8003994:	f040 80b4 	bne.w	8003b00 <_strtod_l+0x1b8>
 8003998:	7873      	ldrb	r3, [r6, #1]
 800399a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800399e:	2b58      	cmp	r3, #88	; 0x58
 80039a0:	d16c      	bne.n	8003a7c <_strtod_l+0x134>
 80039a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80039a4:	9301      	str	r3, [sp, #4]
 80039a6:	ab1e      	add	r3, sp, #120	; 0x78
 80039a8:	9702      	str	r7, [sp, #8]
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	4a8f      	ldr	r2, [pc, #572]	; (8003bec <_strtod_l+0x2a4>)
 80039ae:	ab1f      	add	r3, sp, #124	; 0x7c
 80039b0:	a91d      	add	r1, sp, #116	; 0x74
 80039b2:	4620      	mov	r0, r4
 80039b4:	f000 fe88 	bl	80046c8 <__gethex>
 80039b8:	f010 0707 	ands.w	r7, r0, #7
 80039bc:	4605      	mov	r5, r0
 80039be:	d005      	beq.n	80039cc <_strtod_l+0x84>
 80039c0:	2f06      	cmp	r7, #6
 80039c2:	d12a      	bne.n	8003a1a <_strtod_l+0xd2>
 80039c4:	3601      	adds	r6, #1
 80039c6:	2300      	movs	r3, #0
 80039c8:	961d      	str	r6, [sp, #116]	; 0x74
 80039ca:	930e      	str	r3, [sp, #56]	; 0x38
 80039cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f040 8596 	bne.w	8004500 <_strtod_l+0xbb8>
 80039d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80039d6:	b1db      	cbz	r3, 8003a10 <_strtod_l+0xc8>
 80039d8:	4652      	mov	r2, sl
 80039da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80039de:	ec43 2b10 	vmov	d0, r2, r3
 80039e2:	b023      	add	sp, #140	; 0x8c
 80039e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039e8:	2a20      	cmp	r2, #32
 80039ea:	d1ce      	bne.n	800398a <_strtod_l+0x42>
 80039ec:	3301      	adds	r3, #1
 80039ee:	931d      	str	r3, [sp, #116]	; 0x74
 80039f0:	e7c0      	b.n	8003974 <_strtod_l+0x2c>
 80039f2:	2a2d      	cmp	r2, #45	; 0x2d
 80039f4:	d1c9      	bne.n	800398a <_strtod_l+0x42>
 80039f6:	2201      	movs	r2, #1
 80039f8:	920e      	str	r2, [sp, #56]	; 0x38
 80039fa:	1c5a      	adds	r2, r3, #1
 80039fc:	921d      	str	r2, [sp, #116]	; 0x74
 80039fe:	785b      	ldrb	r3, [r3, #1]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1c4      	bne.n	800398e <_strtod_l+0x46>
 8003a04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003a06:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f040 8576 	bne.w	80044fc <_strtod_l+0xbb4>
 8003a10:	4652      	mov	r2, sl
 8003a12:	465b      	mov	r3, fp
 8003a14:	e7e3      	b.n	80039de <_strtod_l+0x96>
 8003a16:	2200      	movs	r2, #0
 8003a18:	e7ee      	b.n	80039f8 <_strtod_l+0xb0>
 8003a1a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003a1c:	b13a      	cbz	r2, 8003a2e <_strtod_l+0xe6>
 8003a1e:	2135      	movs	r1, #53	; 0x35
 8003a20:	a820      	add	r0, sp, #128	; 0x80
 8003a22:	f001 fdf0 	bl	8005606 <__copybits>
 8003a26:	991e      	ldr	r1, [sp, #120]	; 0x78
 8003a28:	4620      	mov	r0, r4
 8003a2a:	f001 f9b5 	bl	8004d98 <_Bfree>
 8003a2e:	3f01      	subs	r7, #1
 8003a30:	2f05      	cmp	r7, #5
 8003a32:	d807      	bhi.n	8003a44 <_strtod_l+0xfc>
 8003a34:	e8df f007 	tbb	[pc, r7]
 8003a38:	1d180b0e 	.word	0x1d180b0e
 8003a3c:	030e      	.short	0x030e
 8003a3e:	f04f 0b00 	mov.w	fp, #0
 8003a42:	46da      	mov	sl, fp
 8003a44:	0728      	lsls	r0, r5, #28
 8003a46:	d5c1      	bpl.n	80039cc <_strtod_l+0x84>
 8003a48:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8003a4c:	e7be      	b.n	80039cc <_strtod_l+0x84>
 8003a4e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8003a52:	e7f7      	b.n	8003a44 <_strtod_l+0xfc>
 8003a54:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8003a58:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8003a5a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003a5e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003a62:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8003a66:	e7ed      	b.n	8003a44 <_strtod_l+0xfc>
 8003a68:	f8df b184 	ldr.w	fp, [pc, #388]	; 8003bf0 <_strtod_l+0x2a8>
 8003a6c:	f04f 0a00 	mov.w	sl, #0
 8003a70:	e7e8      	b.n	8003a44 <_strtod_l+0xfc>
 8003a72:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8003a76:	f04f 3aff 	mov.w	sl, #4294967295
 8003a7a:	e7e3      	b.n	8003a44 <_strtod_l+0xfc>
 8003a7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003a7e:	1c5a      	adds	r2, r3, #1
 8003a80:	921d      	str	r2, [sp, #116]	; 0x74
 8003a82:	785b      	ldrb	r3, [r3, #1]
 8003a84:	2b30      	cmp	r3, #48	; 0x30
 8003a86:	d0f9      	beq.n	8003a7c <_strtod_l+0x134>
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d09f      	beq.n	80039cc <_strtod_l+0x84>
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	f04f 0900 	mov.w	r9, #0
 8003a92:	9304      	str	r3, [sp, #16]
 8003a94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003a96:	930a      	str	r3, [sp, #40]	; 0x28
 8003a98:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8003a9c:	464f      	mov	r7, r9
 8003a9e:	220a      	movs	r2, #10
 8003aa0:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003aa2:	7806      	ldrb	r6, [r0, #0]
 8003aa4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8003aa8:	b2d9      	uxtb	r1, r3
 8003aaa:	2909      	cmp	r1, #9
 8003aac:	d92a      	bls.n	8003b04 <_strtod_l+0x1bc>
 8003aae:	9907      	ldr	r1, [sp, #28]
 8003ab0:	462a      	mov	r2, r5
 8003ab2:	f001 fe6d 	bl	8005790 <strncmp>
 8003ab6:	b398      	cbz	r0, 8003b20 <_strtod_l+0x1d8>
 8003ab8:	2000      	movs	r0, #0
 8003aba:	4633      	mov	r3, r6
 8003abc:	463d      	mov	r5, r7
 8003abe:	9007      	str	r0, [sp, #28]
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	2b65      	cmp	r3, #101	; 0x65
 8003ac4:	d001      	beq.n	8003aca <_strtod_l+0x182>
 8003ac6:	2b45      	cmp	r3, #69	; 0x45
 8003ac8:	d118      	bne.n	8003afc <_strtod_l+0x1b4>
 8003aca:	b91d      	cbnz	r5, 8003ad4 <_strtod_l+0x18c>
 8003acc:	9b04      	ldr	r3, [sp, #16]
 8003ace:	4303      	orrs	r3, r0
 8003ad0:	d098      	beq.n	8003a04 <_strtod_l+0xbc>
 8003ad2:	2500      	movs	r5, #0
 8003ad4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8003ad8:	f108 0301 	add.w	r3, r8, #1
 8003adc:	931d      	str	r3, [sp, #116]	; 0x74
 8003ade:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003ae2:	2b2b      	cmp	r3, #43	; 0x2b
 8003ae4:	d075      	beq.n	8003bd2 <_strtod_l+0x28a>
 8003ae6:	2b2d      	cmp	r3, #45	; 0x2d
 8003ae8:	d07b      	beq.n	8003be2 <_strtod_l+0x29a>
 8003aea:	f04f 0c00 	mov.w	ip, #0
 8003aee:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8003af2:	2909      	cmp	r1, #9
 8003af4:	f240 8082 	bls.w	8003bfc <_strtod_l+0x2b4>
 8003af8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8003afc:	2600      	movs	r6, #0
 8003afe:	e09d      	b.n	8003c3c <_strtod_l+0x2f4>
 8003b00:	2300      	movs	r3, #0
 8003b02:	e7c4      	b.n	8003a8e <_strtod_l+0x146>
 8003b04:	2f08      	cmp	r7, #8
 8003b06:	bfd8      	it	le
 8003b08:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8003b0a:	f100 0001 	add.w	r0, r0, #1
 8003b0e:	bfda      	itte	le
 8003b10:	fb02 3301 	mlale	r3, r2, r1, r3
 8003b14:	9309      	strle	r3, [sp, #36]	; 0x24
 8003b16:	fb02 3909 	mlagt	r9, r2, r9, r3
 8003b1a:	3701      	adds	r7, #1
 8003b1c:	901d      	str	r0, [sp, #116]	; 0x74
 8003b1e:	e7bf      	b.n	8003aa0 <_strtod_l+0x158>
 8003b20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003b22:	195a      	adds	r2, r3, r5
 8003b24:	921d      	str	r2, [sp, #116]	; 0x74
 8003b26:	5d5b      	ldrb	r3, [r3, r5]
 8003b28:	2f00      	cmp	r7, #0
 8003b2a:	d037      	beq.n	8003b9c <_strtod_l+0x254>
 8003b2c:	9007      	str	r0, [sp, #28]
 8003b2e:	463d      	mov	r5, r7
 8003b30:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003b34:	2a09      	cmp	r2, #9
 8003b36:	d912      	bls.n	8003b5e <_strtod_l+0x216>
 8003b38:	2201      	movs	r2, #1
 8003b3a:	e7c2      	b.n	8003ac2 <_strtod_l+0x17a>
 8003b3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003b3e:	1c5a      	adds	r2, r3, #1
 8003b40:	921d      	str	r2, [sp, #116]	; 0x74
 8003b42:	785b      	ldrb	r3, [r3, #1]
 8003b44:	3001      	adds	r0, #1
 8003b46:	2b30      	cmp	r3, #48	; 0x30
 8003b48:	d0f8      	beq.n	8003b3c <_strtod_l+0x1f4>
 8003b4a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8003b4e:	2a08      	cmp	r2, #8
 8003b50:	f200 84db 	bhi.w	800450a <_strtod_l+0xbc2>
 8003b54:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003b56:	9007      	str	r0, [sp, #28]
 8003b58:	2000      	movs	r0, #0
 8003b5a:	920a      	str	r2, [sp, #40]	; 0x28
 8003b5c:	4605      	mov	r5, r0
 8003b5e:	3b30      	subs	r3, #48	; 0x30
 8003b60:	f100 0201 	add.w	r2, r0, #1
 8003b64:	d014      	beq.n	8003b90 <_strtod_l+0x248>
 8003b66:	9907      	ldr	r1, [sp, #28]
 8003b68:	4411      	add	r1, r2
 8003b6a:	9107      	str	r1, [sp, #28]
 8003b6c:	462a      	mov	r2, r5
 8003b6e:	eb00 0e05 	add.w	lr, r0, r5
 8003b72:	210a      	movs	r1, #10
 8003b74:	4572      	cmp	r2, lr
 8003b76:	d113      	bne.n	8003ba0 <_strtod_l+0x258>
 8003b78:	182a      	adds	r2, r5, r0
 8003b7a:	2a08      	cmp	r2, #8
 8003b7c:	f105 0501 	add.w	r5, r5, #1
 8003b80:	4405      	add	r5, r0
 8003b82:	dc1c      	bgt.n	8003bbe <_strtod_l+0x276>
 8003b84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003b86:	220a      	movs	r2, #10
 8003b88:	fb02 3301 	mla	r3, r2, r1, r3
 8003b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8003b8e:	2200      	movs	r2, #0
 8003b90:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003b92:	1c59      	adds	r1, r3, #1
 8003b94:	911d      	str	r1, [sp, #116]	; 0x74
 8003b96:	785b      	ldrb	r3, [r3, #1]
 8003b98:	4610      	mov	r0, r2
 8003b9a:	e7c9      	b.n	8003b30 <_strtod_l+0x1e8>
 8003b9c:	4638      	mov	r0, r7
 8003b9e:	e7d2      	b.n	8003b46 <_strtod_l+0x1fe>
 8003ba0:	2a08      	cmp	r2, #8
 8003ba2:	dc04      	bgt.n	8003bae <_strtod_l+0x266>
 8003ba4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003ba6:	434e      	muls	r6, r1
 8003ba8:	9609      	str	r6, [sp, #36]	; 0x24
 8003baa:	3201      	adds	r2, #1
 8003bac:	e7e2      	b.n	8003b74 <_strtod_l+0x22c>
 8003bae:	f102 0c01 	add.w	ip, r2, #1
 8003bb2:	f1bc 0f10 	cmp.w	ip, #16
 8003bb6:	bfd8      	it	le
 8003bb8:	fb01 f909 	mulle.w	r9, r1, r9
 8003bbc:	e7f5      	b.n	8003baa <_strtod_l+0x262>
 8003bbe:	2d10      	cmp	r5, #16
 8003bc0:	bfdc      	itt	le
 8003bc2:	220a      	movle	r2, #10
 8003bc4:	fb02 3909 	mlale	r9, r2, r9, r3
 8003bc8:	e7e1      	b.n	8003b8e <_strtod_l+0x246>
 8003bca:	2300      	movs	r3, #0
 8003bcc:	9307      	str	r3, [sp, #28]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	e77c      	b.n	8003acc <_strtod_l+0x184>
 8003bd2:	f04f 0c00 	mov.w	ip, #0
 8003bd6:	f108 0302 	add.w	r3, r8, #2
 8003bda:	931d      	str	r3, [sp, #116]	; 0x74
 8003bdc:	f898 3002 	ldrb.w	r3, [r8, #2]
 8003be0:	e785      	b.n	8003aee <_strtod_l+0x1a6>
 8003be2:	f04f 0c01 	mov.w	ip, #1
 8003be6:	e7f6      	b.n	8003bd6 <_strtod_l+0x28e>
 8003be8:	08008db8 	.word	0x08008db8
 8003bec:	08008cc4 	.word	0x08008cc4
 8003bf0:	7ff00000 	.word	0x7ff00000
 8003bf4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003bf6:	1c59      	adds	r1, r3, #1
 8003bf8:	911d      	str	r1, [sp, #116]	; 0x74
 8003bfa:	785b      	ldrb	r3, [r3, #1]
 8003bfc:	2b30      	cmp	r3, #48	; 0x30
 8003bfe:	d0f9      	beq.n	8003bf4 <_strtod_l+0x2ac>
 8003c00:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8003c04:	2908      	cmp	r1, #8
 8003c06:	f63f af79 	bhi.w	8003afc <_strtod_l+0x1b4>
 8003c0a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8003c0e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003c10:	9308      	str	r3, [sp, #32]
 8003c12:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003c14:	1c59      	adds	r1, r3, #1
 8003c16:	911d      	str	r1, [sp, #116]	; 0x74
 8003c18:	785b      	ldrb	r3, [r3, #1]
 8003c1a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8003c1e:	2e09      	cmp	r6, #9
 8003c20:	d937      	bls.n	8003c92 <_strtod_l+0x34a>
 8003c22:	9e08      	ldr	r6, [sp, #32]
 8003c24:	1b89      	subs	r1, r1, r6
 8003c26:	2908      	cmp	r1, #8
 8003c28:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8003c2c:	dc02      	bgt.n	8003c34 <_strtod_l+0x2ec>
 8003c2e:	4576      	cmp	r6, lr
 8003c30:	bfa8      	it	ge
 8003c32:	4676      	movge	r6, lr
 8003c34:	f1bc 0f00 	cmp.w	ip, #0
 8003c38:	d000      	beq.n	8003c3c <_strtod_l+0x2f4>
 8003c3a:	4276      	negs	r6, r6
 8003c3c:	2d00      	cmp	r5, #0
 8003c3e:	d14f      	bne.n	8003ce0 <_strtod_l+0x398>
 8003c40:	9904      	ldr	r1, [sp, #16]
 8003c42:	4301      	orrs	r1, r0
 8003c44:	f47f aec2 	bne.w	80039cc <_strtod_l+0x84>
 8003c48:	2a00      	cmp	r2, #0
 8003c4a:	f47f aedb 	bne.w	8003a04 <_strtod_l+0xbc>
 8003c4e:	2b69      	cmp	r3, #105	; 0x69
 8003c50:	d027      	beq.n	8003ca2 <_strtod_l+0x35a>
 8003c52:	dc24      	bgt.n	8003c9e <_strtod_l+0x356>
 8003c54:	2b49      	cmp	r3, #73	; 0x49
 8003c56:	d024      	beq.n	8003ca2 <_strtod_l+0x35a>
 8003c58:	2b4e      	cmp	r3, #78	; 0x4e
 8003c5a:	f47f aed3 	bne.w	8003a04 <_strtod_l+0xbc>
 8003c5e:	499e      	ldr	r1, [pc, #632]	; (8003ed8 <_strtod_l+0x590>)
 8003c60:	a81d      	add	r0, sp, #116	; 0x74
 8003c62:	f000 ff89 	bl	8004b78 <__match>
 8003c66:	2800      	cmp	r0, #0
 8003c68:	f43f aecc 	beq.w	8003a04 <_strtod_l+0xbc>
 8003c6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b28      	cmp	r3, #40	; 0x28
 8003c72:	d12d      	bne.n	8003cd0 <_strtod_l+0x388>
 8003c74:	4999      	ldr	r1, [pc, #612]	; (8003edc <_strtod_l+0x594>)
 8003c76:	aa20      	add	r2, sp, #128	; 0x80
 8003c78:	a81d      	add	r0, sp, #116	; 0x74
 8003c7a:	f000 ff91 	bl	8004ba0 <__hexnan>
 8003c7e:	2805      	cmp	r0, #5
 8003c80:	d126      	bne.n	8003cd0 <_strtod_l+0x388>
 8003c82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003c84:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8003c88:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8003c8c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8003c90:	e69c      	b.n	80039cc <_strtod_l+0x84>
 8003c92:	210a      	movs	r1, #10
 8003c94:	fb01 3e0e 	mla	lr, r1, lr, r3
 8003c98:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8003c9c:	e7b9      	b.n	8003c12 <_strtod_l+0x2ca>
 8003c9e:	2b6e      	cmp	r3, #110	; 0x6e
 8003ca0:	e7db      	b.n	8003c5a <_strtod_l+0x312>
 8003ca2:	498f      	ldr	r1, [pc, #572]	; (8003ee0 <_strtod_l+0x598>)
 8003ca4:	a81d      	add	r0, sp, #116	; 0x74
 8003ca6:	f000 ff67 	bl	8004b78 <__match>
 8003caa:	2800      	cmp	r0, #0
 8003cac:	f43f aeaa 	beq.w	8003a04 <_strtod_l+0xbc>
 8003cb0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003cb2:	498c      	ldr	r1, [pc, #560]	; (8003ee4 <_strtod_l+0x59c>)
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	a81d      	add	r0, sp, #116	; 0x74
 8003cb8:	931d      	str	r3, [sp, #116]	; 0x74
 8003cba:	f000 ff5d 	bl	8004b78 <__match>
 8003cbe:	b910      	cbnz	r0, 8003cc6 <_strtod_l+0x37e>
 8003cc0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	931d      	str	r3, [sp, #116]	; 0x74
 8003cc6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8003ef4 <_strtod_l+0x5ac>
 8003cca:	f04f 0a00 	mov.w	sl, #0
 8003cce:	e67d      	b.n	80039cc <_strtod_l+0x84>
 8003cd0:	4885      	ldr	r0, [pc, #532]	; (8003ee8 <_strtod_l+0x5a0>)
 8003cd2:	f001 fd45 	bl	8005760 <nan>
 8003cd6:	ed8d 0b04 	vstr	d0, [sp, #16]
 8003cda:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8003cde:	e675      	b.n	80039cc <_strtod_l+0x84>
 8003ce0:	9b07      	ldr	r3, [sp, #28]
 8003ce2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ce4:	1af3      	subs	r3, r6, r3
 8003ce6:	2f00      	cmp	r7, #0
 8003ce8:	bf08      	it	eq
 8003cea:	462f      	moveq	r7, r5
 8003cec:	2d10      	cmp	r5, #16
 8003cee:	9308      	str	r3, [sp, #32]
 8003cf0:	46a8      	mov	r8, r5
 8003cf2:	bfa8      	it	ge
 8003cf4:	f04f 0810 	movge.w	r8, #16
 8003cf8:	f7fc fc04 	bl	8000504 <__aeabi_ui2d>
 8003cfc:	2d09      	cmp	r5, #9
 8003cfe:	4682      	mov	sl, r0
 8003d00:	468b      	mov	fp, r1
 8003d02:	dd13      	ble.n	8003d2c <_strtod_l+0x3e4>
 8003d04:	4b79      	ldr	r3, [pc, #484]	; (8003eec <_strtod_l+0x5a4>)
 8003d06:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8003d0a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003d0e:	f7fc fc73 	bl	80005f8 <__aeabi_dmul>
 8003d12:	4682      	mov	sl, r0
 8003d14:	4648      	mov	r0, r9
 8003d16:	468b      	mov	fp, r1
 8003d18:	f7fc fbf4 	bl	8000504 <__aeabi_ui2d>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	460b      	mov	r3, r1
 8003d20:	4650      	mov	r0, sl
 8003d22:	4659      	mov	r1, fp
 8003d24:	f7fc fab2 	bl	800028c <__adddf3>
 8003d28:	4682      	mov	sl, r0
 8003d2a:	468b      	mov	fp, r1
 8003d2c:	2d0f      	cmp	r5, #15
 8003d2e:	dc38      	bgt.n	8003da2 <_strtod_l+0x45a>
 8003d30:	9b08      	ldr	r3, [sp, #32]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f43f ae4a 	beq.w	80039cc <_strtod_l+0x84>
 8003d38:	dd24      	ble.n	8003d84 <_strtod_l+0x43c>
 8003d3a:	2b16      	cmp	r3, #22
 8003d3c:	dc0b      	bgt.n	8003d56 <_strtod_l+0x40e>
 8003d3e:	4d6b      	ldr	r5, [pc, #428]	; (8003eec <_strtod_l+0x5a4>)
 8003d40:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8003d44:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003d48:	4652      	mov	r2, sl
 8003d4a:	465b      	mov	r3, fp
 8003d4c:	f7fc fc54 	bl	80005f8 <__aeabi_dmul>
 8003d50:	4682      	mov	sl, r0
 8003d52:	468b      	mov	fp, r1
 8003d54:	e63a      	b.n	80039cc <_strtod_l+0x84>
 8003d56:	9a08      	ldr	r2, [sp, #32]
 8003d58:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	db20      	blt.n	8003da2 <_strtod_l+0x45a>
 8003d60:	4c62      	ldr	r4, [pc, #392]	; (8003eec <_strtod_l+0x5a4>)
 8003d62:	f1c5 050f 	rsb	r5, r5, #15
 8003d66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8003d6a:	4652      	mov	r2, sl
 8003d6c:	465b      	mov	r3, fp
 8003d6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d72:	f7fc fc41 	bl	80005f8 <__aeabi_dmul>
 8003d76:	9b08      	ldr	r3, [sp, #32]
 8003d78:	1b5d      	subs	r5, r3, r5
 8003d7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8003d7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003d82:	e7e3      	b.n	8003d4c <_strtod_l+0x404>
 8003d84:	9b08      	ldr	r3, [sp, #32]
 8003d86:	3316      	adds	r3, #22
 8003d88:	db0b      	blt.n	8003da2 <_strtod_l+0x45a>
 8003d8a:	9b07      	ldr	r3, [sp, #28]
 8003d8c:	4a57      	ldr	r2, [pc, #348]	; (8003eec <_strtod_l+0x5a4>)
 8003d8e:	1b9e      	subs	r6, r3, r6
 8003d90:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8003d94:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003d98:	4650      	mov	r0, sl
 8003d9a:	4659      	mov	r1, fp
 8003d9c:	f7fc fd56 	bl	800084c <__aeabi_ddiv>
 8003da0:	e7d6      	b.n	8003d50 <_strtod_l+0x408>
 8003da2:	9b08      	ldr	r3, [sp, #32]
 8003da4:	eba5 0808 	sub.w	r8, r5, r8
 8003da8:	4498      	add	r8, r3
 8003daa:	f1b8 0f00 	cmp.w	r8, #0
 8003dae:	dd71      	ble.n	8003e94 <_strtod_l+0x54c>
 8003db0:	f018 030f 	ands.w	r3, r8, #15
 8003db4:	d00a      	beq.n	8003dcc <_strtod_l+0x484>
 8003db6:	494d      	ldr	r1, [pc, #308]	; (8003eec <_strtod_l+0x5a4>)
 8003db8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003dbc:	4652      	mov	r2, sl
 8003dbe:	465b      	mov	r3, fp
 8003dc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003dc4:	f7fc fc18 	bl	80005f8 <__aeabi_dmul>
 8003dc8:	4682      	mov	sl, r0
 8003dca:	468b      	mov	fp, r1
 8003dcc:	f038 080f 	bics.w	r8, r8, #15
 8003dd0:	d04d      	beq.n	8003e6e <_strtod_l+0x526>
 8003dd2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8003dd6:	dd22      	ble.n	8003e1e <_strtod_l+0x4d6>
 8003dd8:	2500      	movs	r5, #0
 8003dda:	462e      	mov	r6, r5
 8003ddc:	9509      	str	r5, [sp, #36]	; 0x24
 8003dde:	9507      	str	r5, [sp, #28]
 8003de0:	2322      	movs	r3, #34	; 0x22
 8003de2:	f8df b110 	ldr.w	fp, [pc, #272]	; 8003ef4 <_strtod_l+0x5ac>
 8003de6:	6023      	str	r3, [r4, #0]
 8003de8:	f04f 0a00 	mov.w	sl, #0
 8003dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f43f adec 	beq.w	80039cc <_strtod_l+0x84>
 8003df4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8003df6:	4620      	mov	r0, r4
 8003df8:	f000 ffce 	bl	8004d98 <_Bfree>
 8003dfc:	9907      	ldr	r1, [sp, #28]
 8003dfe:	4620      	mov	r0, r4
 8003e00:	f000 ffca 	bl	8004d98 <_Bfree>
 8003e04:	4631      	mov	r1, r6
 8003e06:	4620      	mov	r0, r4
 8003e08:	f000 ffc6 	bl	8004d98 <_Bfree>
 8003e0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003e0e:	4620      	mov	r0, r4
 8003e10:	f000 ffc2 	bl	8004d98 <_Bfree>
 8003e14:	4629      	mov	r1, r5
 8003e16:	4620      	mov	r0, r4
 8003e18:	f000 ffbe 	bl	8004d98 <_Bfree>
 8003e1c:	e5d6      	b.n	80039cc <_strtod_l+0x84>
 8003e1e:	2300      	movs	r3, #0
 8003e20:	ea4f 1828 	mov.w	r8, r8, asr #4
 8003e24:	4650      	mov	r0, sl
 8003e26:	4659      	mov	r1, fp
 8003e28:	4699      	mov	r9, r3
 8003e2a:	f1b8 0f01 	cmp.w	r8, #1
 8003e2e:	dc21      	bgt.n	8003e74 <_strtod_l+0x52c>
 8003e30:	b10b      	cbz	r3, 8003e36 <_strtod_l+0x4ee>
 8003e32:	4682      	mov	sl, r0
 8003e34:	468b      	mov	fp, r1
 8003e36:	4b2e      	ldr	r3, [pc, #184]	; (8003ef0 <_strtod_l+0x5a8>)
 8003e38:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8003e3c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8003e40:	4652      	mov	r2, sl
 8003e42:	465b      	mov	r3, fp
 8003e44:	e9d9 0100 	ldrd	r0, r1, [r9]
 8003e48:	f7fc fbd6 	bl	80005f8 <__aeabi_dmul>
 8003e4c:	4b29      	ldr	r3, [pc, #164]	; (8003ef4 <_strtod_l+0x5ac>)
 8003e4e:	460a      	mov	r2, r1
 8003e50:	400b      	ands	r3, r1
 8003e52:	4929      	ldr	r1, [pc, #164]	; (8003ef8 <_strtod_l+0x5b0>)
 8003e54:	428b      	cmp	r3, r1
 8003e56:	4682      	mov	sl, r0
 8003e58:	d8be      	bhi.n	8003dd8 <_strtod_l+0x490>
 8003e5a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8003e5e:	428b      	cmp	r3, r1
 8003e60:	bf86      	itte	hi
 8003e62:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8003efc <_strtod_l+0x5b4>
 8003e66:	f04f 3aff 	movhi.w	sl, #4294967295
 8003e6a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8003e6e:	2300      	movs	r3, #0
 8003e70:	9304      	str	r3, [sp, #16]
 8003e72:	e081      	b.n	8003f78 <_strtod_l+0x630>
 8003e74:	f018 0f01 	tst.w	r8, #1
 8003e78:	d007      	beq.n	8003e8a <_strtod_l+0x542>
 8003e7a:	4b1d      	ldr	r3, [pc, #116]	; (8003ef0 <_strtod_l+0x5a8>)
 8003e7c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8003e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e84:	f7fc fbb8 	bl	80005f8 <__aeabi_dmul>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	f109 0901 	add.w	r9, r9, #1
 8003e8e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8003e92:	e7ca      	b.n	8003e2a <_strtod_l+0x4e2>
 8003e94:	d0eb      	beq.n	8003e6e <_strtod_l+0x526>
 8003e96:	f1c8 0800 	rsb	r8, r8, #0
 8003e9a:	f018 020f 	ands.w	r2, r8, #15
 8003e9e:	d00a      	beq.n	8003eb6 <_strtod_l+0x56e>
 8003ea0:	4b12      	ldr	r3, [pc, #72]	; (8003eec <_strtod_l+0x5a4>)
 8003ea2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003ea6:	4650      	mov	r0, sl
 8003ea8:	4659      	mov	r1, fp
 8003eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eae:	f7fc fccd 	bl	800084c <__aeabi_ddiv>
 8003eb2:	4682      	mov	sl, r0
 8003eb4:	468b      	mov	fp, r1
 8003eb6:	ea5f 1828 	movs.w	r8, r8, asr #4
 8003eba:	d0d8      	beq.n	8003e6e <_strtod_l+0x526>
 8003ebc:	f1b8 0f1f 	cmp.w	r8, #31
 8003ec0:	dd1e      	ble.n	8003f00 <_strtod_l+0x5b8>
 8003ec2:	2500      	movs	r5, #0
 8003ec4:	462e      	mov	r6, r5
 8003ec6:	9509      	str	r5, [sp, #36]	; 0x24
 8003ec8:	9507      	str	r5, [sp, #28]
 8003eca:	2322      	movs	r3, #34	; 0x22
 8003ecc:	f04f 0a00 	mov.w	sl, #0
 8003ed0:	f04f 0b00 	mov.w	fp, #0
 8003ed4:	6023      	str	r3, [r4, #0]
 8003ed6:	e789      	b.n	8003dec <_strtod_l+0x4a4>
 8003ed8:	08008cc1 	.word	0x08008cc1
 8003edc:	08008cd8 	.word	0x08008cd8
 8003ee0:	08008cb8 	.word	0x08008cb8
 8003ee4:	08008cbb 	.word	0x08008cbb
 8003ee8:	08008f7f 	.word	0x08008f7f
 8003eec:	08008e70 	.word	0x08008e70
 8003ef0:	08008e48 	.word	0x08008e48
 8003ef4:	7ff00000 	.word	0x7ff00000
 8003ef8:	7ca00000 	.word	0x7ca00000
 8003efc:	7fefffff 	.word	0x7fefffff
 8003f00:	f018 0310 	ands.w	r3, r8, #16
 8003f04:	bf18      	it	ne
 8003f06:	236a      	movne	r3, #106	; 0x6a
 8003f08:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80042c0 <_strtod_l+0x978>
 8003f0c:	9304      	str	r3, [sp, #16]
 8003f0e:	4650      	mov	r0, sl
 8003f10:	4659      	mov	r1, fp
 8003f12:	2300      	movs	r3, #0
 8003f14:	f018 0f01 	tst.w	r8, #1
 8003f18:	d004      	beq.n	8003f24 <_strtod_l+0x5dc>
 8003f1a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8003f1e:	f7fc fb6b 	bl	80005f8 <__aeabi_dmul>
 8003f22:	2301      	movs	r3, #1
 8003f24:	ea5f 0868 	movs.w	r8, r8, asr #1
 8003f28:	f109 0908 	add.w	r9, r9, #8
 8003f2c:	d1f2      	bne.n	8003f14 <_strtod_l+0x5cc>
 8003f2e:	b10b      	cbz	r3, 8003f34 <_strtod_l+0x5ec>
 8003f30:	4682      	mov	sl, r0
 8003f32:	468b      	mov	fp, r1
 8003f34:	9b04      	ldr	r3, [sp, #16]
 8003f36:	b1bb      	cbz	r3, 8003f68 <_strtod_l+0x620>
 8003f38:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8003f3c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	4659      	mov	r1, fp
 8003f44:	dd10      	ble.n	8003f68 <_strtod_l+0x620>
 8003f46:	2b1f      	cmp	r3, #31
 8003f48:	f340 8128 	ble.w	800419c <_strtod_l+0x854>
 8003f4c:	2b34      	cmp	r3, #52	; 0x34
 8003f4e:	bfde      	ittt	le
 8003f50:	3b20      	suble	r3, #32
 8003f52:	f04f 32ff 	movle.w	r2, #4294967295
 8003f56:	fa02 f303 	lslle.w	r3, r2, r3
 8003f5a:	f04f 0a00 	mov.w	sl, #0
 8003f5e:	bfcc      	ite	gt
 8003f60:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8003f64:	ea03 0b01 	andle.w	fp, r3, r1
 8003f68:	2200      	movs	r2, #0
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	4650      	mov	r0, sl
 8003f6e:	4659      	mov	r1, fp
 8003f70:	f7fc fdaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8003f74:	2800      	cmp	r0, #0
 8003f76:	d1a4      	bne.n	8003ec2 <_strtod_l+0x57a>
 8003f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003f7e:	462b      	mov	r3, r5
 8003f80:	463a      	mov	r2, r7
 8003f82:	4620      	mov	r0, r4
 8003f84:	f000 ff74 	bl	8004e70 <__s2b>
 8003f88:	9009      	str	r0, [sp, #36]	; 0x24
 8003f8a:	2800      	cmp	r0, #0
 8003f8c:	f43f af24 	beq.w	8003dd8 <_strtod_l+0x490>
 8003f90:	9b07      	ldr	r3, [sp, #28]
 8003f92:	1b9e      	subs	r6, r3, r6
 8003f94:	9b08      	ldr	r3, [sp, #32]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	bfb4      	ite	lt
 8003f9a:	4633      	movlt	r3, r6
 8003f9c:	2300      	movge	r3, #0
 8003f9e:	9310      	str	r3, [sp, #64]	; 0x40
 8003fa0:	9b08      	ldr	r3, [sp, #32]
 8003fa2:	2500      	movs	r5, #0
 8003fa4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003fa8:	9318      	str	r3, [sp, #96]	; 0x60
 8003faa:	462e      	mov	r6, r5
 8003fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fae:	4620      	mov	r0, r4
 8003fb0:	6859      	ldr	r1, [r3, #4]
 8003fb2:	f000 feb1 	bl	8004d18 <_Balloc>
 8003fb6:	9007      	str	r0, [sp, #28]
 8003fb8:	2800      	cmp	r0, #0
 8003fba:	f43f af11 	beq.w	8003de0 <_strtod_l+0x498>
 8003fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fc0:	691a      	ldr	r2, [r3, #16]
 8003fc2:	3202      	adds	r2, #2
 8003fc4:	f103 010c 	add.w	r1, r3, #12
 8003fc8:	0092      	lsls	r2, r2, #2
 8003fca:	300c      	adds	r0, #12
 8003fcc:	f000 fe96 	bl	8004cfc <memcpy>
 8003fd0:	ec4b ab10 	vmov	d0, sl, fp
 8003fd4:	aa20      	add	r2, sp, #128	; 0x80
 8003fd6:	a91f      	add	r1, sp, #124	; 0x7c
 8003fd8:	4620      	mov	r0, r4
 8003fda:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8003fde:	f001 fa83 	bl	80054e8 <__d2b>
 8003fe2:	901e      	str	r0, [sp, #120]	; 0x78
 8003fe4:	2800      	cmp	r0, #0
 8003fe6:	f43f aefb 	beq.w	8003de0 <_strtod_l+0x498>
 8003fea:	2101      	movs	r1, #1
 8003fec:	4620      	mov	r0, r4
 8003fee:	f000 ffd9 	bl	8004fa4 <__i2b>
 8003ff2:	4606      	mov	r6, r0
 8003ff4:	2800      	cmp	r0, #0
 8003ff6:	f43f aef3 	beq.w	8003de0 <_strtod_l+0x498>
 8003ffa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003ffc:	9904      	ldr	r1, [sp, #16]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	bfab      	itete	ge
 8004002:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8004004:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8004006:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8004008:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800400c:	bfac      	ite	ge
 800400e:	eb03 0902 	addge.w	r9, r3, r2
 8004012:	1ad7      	sublt	r7, r2, r3
 8004014:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004016:	eba3 0801 	sub.w	r8, r3, r1
 800401a:	4490      	add	r8, r2
 800401c:	4ba3      	ldr	r3, [pc, #652]	; (80042ac <_strtod_l+0x964>)
 800401e:	f108 38ff 	add.w	r8, r8, #4294967295
 8004022:	4598      	cmp	r8, r3
 8004024:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004028:	f280 80cc 	bge.w	80041c4 <_strtod_l+0x87c>
 800402c:	eba3 0308 	sub.w	r3, r3, r8
 8004030:	2b1f      	cmp	r3, #31
 8004032:	eba2 0203 	sub.w	r2, r2, r3
 8004036:	f04f 0101 	mov.w	r1, #1
 800403a:	f300 80b6 	bgt.w	80041aa <_strtod_l+0x862>
 800403e:	fa01 f303 	lsl.w	r3, r1, r3
 8004042:	9311      	str	r3, [sp, #68]	; 0x44
 8004044:	2300      	movs	r3, #0
 8004046:	930c      	str	r3, [sp, #48]	; 0x30
 8004048:	eb09 0802 	add.w	r8, r9, r2
 800404c:	9b04      	ldr	r3, [sp, #16]
 800404e:	45c1      	cmp	r9, r8
 8004050:	4417      	add	r7, r2
 8004052:	441f      	add	r7, r3
 8004054:	464b      	mov	r3, r9
 8004056:	bfa8      	it	ge
 8004058:	4643      	movge	r3, r8
 800405a:	42bb      	cmp	r3, r7
 800405c:	bfa8      	it	ge
 800405e:	463b      	movge	r3, r7
 8004060:	2b00      	cmp	r3, #0
 8004062:	bfc2      	ittt	gt
 8004064:	eba8 0803 	subgt.w	r8, r8, r3
 8004068:	1aff      	subgt	r7, r7, r3
 800406a:	eba9 0903 	subgt.w	r9, r9, r3
 800406e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004070:	2b00      	cmp	r3, #0
 8004072:	dd17      	ble.n	80040a4 <_strtod_l+0x75c>
 8004074:	4631      	mov	r1, r6
 8004076:	461a      	mov	r2, r3
 8004078:	4620      	mov	r0, r4
 800407a:	f001 f84f 	bl	800511c <__pow5mult>
 800407e:	4606      	mov	r6, r0
 8004080:	2800      	cmp	r0, #0
 8004082:	f43f aead 	beq.w	8003de0 <_strtod_l+0x498>
 8004086:	4601      	mov	r1, r0
 8004088:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800408a:	4620      	mov	r0, r4
 800408c:	f000 ffa0 	bl	8004fd0 <__multiply>
 8004090:	900f      	str	r0, [sp, #60]	; 0x3c
 8004092:	2800      	cmp	r0, #0
 8004094:	f43f aea4 	beq.w	8003de0 <_strtod_l+0x498>
 8004098:	991e      	ldr	r1, [sp, #120]	; 0x78
 800409a:	4620      	mov	r0, r4
 800409c:	f000 fe7c 	bl	8004d98 <_Bfree>
 80040a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80040a2:	931e      	str	r3, [sp, #120]	; 0x78
 80040a4:	f1b8 0f00 	cmp.w	r8, #0
 80040a8:	f300 8091 	bgt.w	80041ce <_strtod_l+0x886>
 80040ac:	9b08      	ldr	r3, [sp, #32]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	dd08      	ble.n	80040c4 <_strtod_l+0x77c>
 80040b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80040b4:	9907      	ldr	r1, [sp, #28]
 80040b6:	4620      	mov	r0, r4
 80040b8:	f001 f830 	bl	800511c <__pow5mult>
 80040bc:	9007      	str	r0, [sp, #28]
 80040be:	2800      	cmp	r0, #0
 80040c0:	f43f ae8e 	beq.w	8003de0 <_strtod_l+0x498>
 80040c4:	2f00      	cmp	r7, #0
 80040c6:	dd08      	ble.n	80040da <_strtod_l+0x792>
 80040c8:	9907      	ldr	r1, [sp, #28]
 80040ca:	463a      	mov	r2, r7
 80040cc:	4620      	mov	r0, r4
 80040ce:	f001 f87f 	bl	80051d0 <__lshift>
 80040d2:	9007      	str	r0, [sp, #28]
 80040d4:	2800      	cmp	r0, #0
 80040d6:	f43f ae83 	beq.w	8003de0 <_strtod_l+0x498>
 80040da:	f1b9 0f00 	cmp.w	r9, #0
 80040de:	dd08      	ble.n	80040f2 <_strtod_l+0x7aa>
 80040e0:	4631      	mov	r1, r6
 80040e2:	464a      	mov	r2, r9
 80040e4:	4620      	mov	r0, r4
 80040e6:	f001 f873 	bl	80051d0 <__lshift>
 80040ea:	4606      	mov	r6, r0
 80040ec:	2800      	cmp	r0, #0
 80040ee:	f43f ae77 	beq.w	8003de0 <_strtod_l+0x498>
 80040f2:	9a07      	ldr	r2, [sp, #28]
 80040f4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80040f6:	4620      	mov	r0, r4
 80040f8:	f001 f8f2 	bl	80052e0 <__mdiff>
 80040fc:	4605      	mov	r5, r0
 80040fe:	2800      	cmp	r0, #0
 8004100:	f43f ae6e 	beq.w	8003de0 <_strtod_l+0x498>
 8004104:	68c3      	ldr	r3, [r0, #12]
 8004106:	930f      	str	r3, [sp, #60]	; 0x3c
 8004108:	2300      	movs	r3, #0
 800410a:	60c3      	str	r3, [r0, #12]
 800410c:	4631      	mov	r1, r6
 800410e:	f001 f8cb 	bl	80052a8 <__mcmp>
 8004112:	2800      	cmp	r0, #0
 8004114:	da65      	bge.n	80041e2 <_strtod_l+0x89a>
 8004116:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004118:	ea53 030a 	orrs.w	r3, r3, sl
 800411c:	f040 8087 	bne.w	800422e <_strtod_l+0x8e6>
 8004120:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004124:	2b00      	cmp	r3, #0
 8004126:	f040 8082 	bne.w	800422e <_strtod_l+0x8e6>
 800412a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800412e:	0d1b      	lsrs	r3, r3, #20
 8004130:	051b      	lsls	r3, r3, #20
 8004132:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004136:	d97a      	bls.n	800422e <_strtod_l+0x8e6>
 8004138:	696b      	ldr	r3, [r5, #20]
 800413a:	b913      	cbnz	r3, 8004142 <_strtod_l+0x7fa>
 800413c:	692b      	ldr	r3, [r5, #16]
 800413e:	2b01      	cmp	r3, #1
 8004140:	dd75      	ble.n	800422e <_strtod_l+0x8e6>
 8004142:	4629      	mov	r1, r5
 8004144:	2201      	movs	r2, #1
 8004146:	4620      	mov	r0, r4
 8004148:	f001 f842 	bl	80051d0 <__lshift>
 800414c:	4631      	mov	r1, r6
 800414e:	4605      	mov	r5, r0
 8004150:	f001 f8aa 	bl	80052a8 <__mcmp>
 8004154:	2800      	cmp	r0, #0
 8004156:	dd6a      	ble.n	800422e <_strtod_l+0x8e6>
 8004158:	9904      	ldr	r1, [sp, #16]
 800415a:	4a55      	ldr	r2, [pc, #340]	; (80042b0 <_strtod_l+0x968>)
 800415c:	465b      	mov	r3, fp
 800415e:	2900      	cmp	r1, #0
 8004160:	f000 8085 	beq.w	800426e <_strtod_l+0x926>
 8004164:	ea02 010b 	and.w	r1, r2, fp
 8004168:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800416c:	dc7f      	bgt.n	800426e <_strtod_l+0x926>
 800416e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004172:	f77f aeaa 	ble.w	8003eca <_strtod_l+0x582>
 8004176:	4a4f      	ldr	r2, [pc, #316]	; (80042b4 <_strtod_l+0x96c>)
 8004178:	2300      	movs	r3, #0
 800417a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800417e:	4650      	mov	r0, sl
 8004180:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8004184:	4659      	mov	r1, fp
 8004186:	f7fc fa37 	bl	80005f8 <__aeabi_dmul>
 800418a:	460b      	mov	r3, r1
 800418c:	4303      	orrs	r3, r0
 800418e:	bf08      	it	eq
 8004190:	2322      	moveq	r3, #34	; 0x22
 8004192:	4682      	mov	sl, r0
 8004194:	468b      	mov	fp, r1
 8004196:	bf08      	it	eq
 8004198:	6023      	streq	r3, [r4, #0]
 800419a:	e62b      	b.n	8003df4 <_strtod_l+0x4ac>
 800419c:	f04f 32ff 	mov.w	r2, #4294967295
 80041a0:	fa02 f303 	lsl.w	r3, r2, r3
 80041a4:	ea03 0a0a 	and.w	sl, r3, sl
 80041a8:	e6de      	b.n	8003f68 <_strtod_l+0x620>
 80041aa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80041ae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80041b2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80041b6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80041ba:	fa01 f308 	lsl.w	r3, r1, r8
 80041be:	930c      	str	r3, [sp, #48]	; 0x30
 80041c0:	9111      	str	r1, [sp, #68]	; 0x44
 80041c2:	e741      	b.n	8004048 <_strtod_l+0x700>
 80041c4:	2300      	movs	r3, #0
 80041c6:	930c      	str	r3, [sp, #48]	; 0x30
 80041c8:	2301      	movs	r3, #1
 80041ca:	9311      	str	r3, [sp, #68]	; 0x44
 80041cc:	e73c      	b.n	8004048 <_strtod_l+0x700>
 80041ce:	991e      	ldr	r1, [sp, #120]	; 0x78
 80041d0:	4642      	mov	r2, r8
 80041d2:	4620      	mov	r0, r4
 80041d4:	f000 fffc 	bl	80051d0 <__lshift>
 80041d8:	901e      	str	r0, [sp, #120]	; 0x78
 80041da:	2800      	cmp	r0, #0
 80041dc:	f47f af66 	bne.w	80040ac <_strtod_l+0x764>
 80041e0:	e5fe      	b.n	8003de0 <_strtod_l+0x498>
 80041e2:	465f      	mov	r7, fp
 80041e4:	d16e      	bne.n	80042c4 <_strtod_l+0x97c>
 80041e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80041e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80041ec:	b342      	cbz	r2, 8004240 <_strtod_l+0x8f8>
 80041ee:	4a32      	ldr	r2, [pc, #200]	; (80042b8 <_strtod_l+0x970>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d128      	bne.n	8004246 <_strtod_l+0x8fe>
 80041f4:	9b04      	ldr	r3, [sp, #16]
 80041f6:	4650      	mov	r0, sl
 80041f8:	b1eb      	cbz	r3, 8004236 <_strtod_l+0x8ee>
 80041fa:	4a2d      	ldr	r2, [pc, #180]	; (80042b0 <_strtod_l+0x968>)
 80041fc:	403a      	ands	r2, r7
 80041fe:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004202:	f04f 31ff 	mov.w	r1, #4294967295
 8004206:	d819      	bhi.n	800423c <_strtod_l+0x8f4>
 8004208:	0d12      	lsrs	r2, r2, #20
 800420a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800420e:	fa01 f303 	lsl.w	r3, r1, r3
 8004212:	4298      	cmp	r0, r3
 8004214:	d117      	bne.n	8004246 <_strtod_l+0x8fe>
 8004216:	4b29      	ldr	r3, [pc, #164]	; (80042bc <_strtod_l+0x974>)
 8004218:	429f      	cmp	r7, r3
 800421a:	d102      	bne.n	8004222 <_strtod_l+0x8da>
 800421c:	3001      	adds	r0, #1
 800421e:	f43f addf 	beq.w	8003de0 <_strtod_l+0x498>
 8004222:	4b23      	ldr	r3, [pc, #140]	; (80042b0 <_strtod_l+0x968>)
 8004224:	403b      	ands	r3, r7
 8004226:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800422a:	f04f 0a00 	mov.w	sl, #0
 800422e:	9b04      	ldr	r3, [sp, #16]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1a0      	bne.n	8004176 <_strtod_l+0x82e>
 8004234:	e5de      	b.n	8003df4 <_strtod_l+0x4ac>
 8004236:	f04f 33ff 	mov.w	r3, #4294967295
 800423a:	e7ea      	b.n	8004212 <_strtod_l+0x8ca>
 800423c:	460b      	mov	r3, r1
 800423e:	e7e8      	b.n	8004212 <_strtod_l+0x8ca>
 8004240:	ea53 030a 	orrs.w	r3, r3, sl
 8004244:	d088      	beq.n	8004158 <_strtod_l+0x810>
 8004246:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004248:	b1db      	cbz	r3, 8004282 <_strtod_l+0x93a>
 800424a:	423b      	tst	r3, r7
 800424c:	d0ef      	beq.n	800422e <_strtod_l+0x8e6>
 800424e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004250:	9a04      	ldr	r2, [sp, #16]
 8004252:	4650      	mov	r0, sl
 8004254:	4659      	mov	r1, fp
 8004256:	b1c3      	cbz	r3, 800428a <_strtod_l+0x942>
 8004258:	f7ff fb5a 	bl	8003910 <sulp>
 800425c:	4602      	mov	r2, r0
 800425e:	460b      	mov	r3, r1
 8004260:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004264:	f7fc f812 	bl	800028c <__adddf3>
 8004268:	4682      	mov	sl, r0
 800426a:	468b      	mov	fp, r1
 800426c:	e7df      	b.n	800422e <_strtod_l+0x8e6>
 800426e:	4013      	ands	r3, r2
 8004270:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004274:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004278:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800427c:	f04f 3aff 	mov.w	sl, #4294967295
 8004280:	e7d5      	b.n	800422e <_strtod_l+0x8e6>
 8004282:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004284:	ea13 0f0a 	tst.w	r3, sl
 8004288:	e7e0      	b.n	800424c <_strtod_l+0x904>
 800428a:	f7ff fb41 	bl	8003910 <sulp>
 800428e:	4602      	mov	r2, r0
 8004290:	460b      	mov	r3, r1
 8004292:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004296:	f7fb fff7 	bl	8000288 <__aeabi_dsub>
 800429a:	2200      	movs	r2, #0
 800429c:	2300      	movs	r3, #0
 800429e:	4682      	mov	sl, r0
 80042a0:	468b      	mov	fp, r1
 80042a2:	f7fc fc11 	bl	8000ac8 <__aeabi_dcmpeq>
 80042a6:	2800      	cmp	r0, #0
 80042a8:	d0c1      	beq.n	800422e <_strtod_l+0x8e6>
 80042aa:	e60e      	b.n	8003eca <_strtod_l+0x582>
 80042ac:	fffffc02 	.word	0xfffffc02
 80042b0:	7ff00000 	.word	0x7ff00000
 80042b4:	39500000 	.word	0x39500000
 80042b8:	000fffff 	.word	0x000fffff
 80042bc:	7fefffff 	.word	0x7fefffff
 80042c0:	08008cf0 	.word	0x08008cf0
 80042c4:	4631      	mov	r1, r6
 80042c6:	4628      	mov	r0, r5
 80042c8:	f001 f96a 	bl	80055a0 <__ratio>
 80042cc:	ec59 8b10 	vmov	r8, r9, d0
 80042d0:	ee10 0a10 	vmov	r0, s0
 80042d4:	2200      	movs	r2, #0
 80042d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80042da:	4649      	mov	r1, r9
 80042dc:	f7fc fc08 	bl	8000af0 <__aeabi_dcmple>
 80042e0:	2800      	cmp	r0, #0
 80042e2:	d07c      	beq.n	80043de <_strtod_l+0xa96>
 80042e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d04c      	beq.n	8004384 <_strtod_l+0xa3c>
 80042ea:	4b95      	ldr	r3, [pc, #596]	; (8004540 <_strtod_l+0xbf8>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80042f2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8004540 <_strtod_l+0xbf8>
 80042f6:	f04f 0800 	mov.w	r8, #0
 80042fa:	4b92      	ldr	r3, [pc, #584]	; (8004544 <_strtod_l+0xbfc>)
 80042fc:	403b      	ands	r3, r7
 80042fe:	9311      	str	r3, [sp, #68]	; 0x44
 8004300:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004302:	4b91      	ldr	r3, [pc, #580]	; (8004548 <_strtod_l+0xc00>)
 8004304:	429a      	cmp	r2, r3
 8004306:	f040 80b2 	bne.w	800446e <_strtod_l+0xb26>
 800430a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800430e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004312:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8004316:	ec4b ab10 	vmov	d0, sl, fp
 800431a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800431e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004322:	f001 f865 	bl	80053f0 <__ulp>
 8004326:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800432a:	ec53 2b10 	vmov	r2, r3, d0
 800432e:	f7fc f963 	bl	80005f8 <__aeabi_dmul>
 8004332:	4652      	mov	r2, sl
 8004334:	465b      	mov	r3, fp
 8004336:	f7fb ffa9 	bl	800028c <__adddf3>
 800433a:	460b      	mov	r3, r1
 800433c:	4981      	ldr	r1, [pc, #516]	; (8004544 <_strtod_l+0xbfc>)
 800433e:	4a83      	ldr	r2, [pc, #524]	; (800454c <_strtod_l+0xc04>)
 8004340:	4019      	ands	r1, r3
 8004342:	4291      	cmp	r1, r2
 8004344:	4682      	mov	sl, r0
 8004346:	d95e      	bls.n	8004406 <_strtod_l+0xabe>
 8004348:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800434a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800434e:	4293      	cmp	r3, r2
 8004350:	d103      	bne.n	800435a <_strtod_l+0xa12>
 8004352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004354:	3301      	adds	r3, #1
 8004356:	f43f ad43 	beq.w	8003de0 <_strtod_l+0x498>
 800435a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8004558 <_strtod_l+0xc10>
 800435e:	f04f 3aff 	mov.w	sl, #4294967295
 8004362:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004364:	4620      	mov	r0, r4
 8004366:	f000 fd17 	bl	8004d98 <_Bfree>
 800436a:	9907      	ldr	r1, [sp, #28]
 800436c:	4620      	mov	r0, r4
 800436e:	f000 fd13 	bl	8004d98 <_Bfree>
 8004372:	4631      	mov	r1, r6
 8004374:	4620      	mov	r0, r4
 8004376:	f000 fd0f 	bl	8004d98 <_Bfree>
 800437a:	4629      	mov	r1, r5
 800437c:	4620      	mov	r0, r4
 800437e:	f000 fd0b 	bl	8004d98 <_Bfree>
 8004382:	e613      	b.n	8003fac <_strtod_l+0x664>
 8004384:	f1ba 0f00 	cmp.w	sl, #0
 8004388:	d11b      	bne.n	80043c2 <_strtod_l+0xa7a>
 800438a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800438e:	b9f3      	cbnz	r3, 80043ce <_strtod_l+0xa86>
 8004390:	4b6b      	ldr	r3, [pc, #428]	; (8004540 <_strtod_l+0xbf8>)
 8004392:	2200      	movs	r2, #0
 8004394:	4640      	mov	r0, r8
 8004396:	4649      	mov	r1, r9
 8004398:	f7fc fba0 	bl	8000adc <__aeabi_dcmplt>
 800439c:	b9d0      	cbnz	r0, 80043d4 <_strtod_l+0xa8c>
 800439e:	4640      	mov	r0, r8
 80043a0:	4649      	mov	r1, r9
 80043a2:	4b6b      	ldr	r3, [pc, #428]	; (8004550 <_strtod_l+0xc08>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	f7fc f927 	bl	80005f8 <__aeabi_dmul>
 80043aa:	4680      	mov	r8, r0
 80043ac:	4689      	mov	r9, r1
 80043ae:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80043b2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80043b6:	931b      	str	r3, [sp, #108]	; 0x6c
 80043b8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80043bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80043c0:	e79b      	b.n	80042fa <_strtod_l+0x9b2>
 80043c2:	f1ba 0f01 	cmp.w	sl, #1
 80043c6:	d102      	bne.n	80043ce <_strtod_l+0xa86>
 80043c8:	2f00      	cmp	r7, #0
 80043ca:	f43f ad7e 	beq.w	8003eca <_strtod_l+0x582>
 80043ce:	4b61      	ldr	r3, [pc, #388]	; (8004554 <_strtod_l+0xc0c>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	e78c      	b.n	80042ee <_strtod_l+0x9a6>
 80043d4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004550 <_strtod_l+0xc08>
 80043d8:	f04f 0800 	mov.w	r8, #0
 80043dc:	e7e7      	b.n	80043ae <_strtod_l+0xa66>
 80043de:	4b5c      	ldr	r3, [pc, #368]	; (8004550 <_strtod_l+0xc08>)
 80043e0:	4640      	mov	r0, r8
 80043e2:	4649      	mov	r1, r9
 80043e4:	2200      	movs	r2, #0
 80043e6:	f7fc f907 	bl	80005f8 <__aeabi_dmul>
 80043ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80043ec:	4680      	mov	r8, r0
 80043ee:	4689      	mov	r9, r1
 80043f0:	b933      	cbnz	r3, 8004400 <_strtod_l+0xab8>
 80043f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80043f6:	9012      	str	r0, [sp, #72]	; 0x48
 80043f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80043fa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80043fe:	e7dd      	b.n	80043bc <_strtod_l+0xa74>
 8004400:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8004404:	e7f9      	b.n	80043fa <_strtod_l+0xab2>
 8004406:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800440a:	9b04      	ldr	r3, [sp, #16]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1a8      	bne.n	8004362 <_strtod_l+0xa1a>
 8004410:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004414:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004416:	0d1b      	lsrs	r3, r3, #20
 8004418:	051b      	lsls	r3, r3, #20
 800441a:	429a      	cmp	r2, r3
 800441c:	d1a1      	bne.n	8004362 <_strtod_l+0xa1a>
 800441e:	4640      	mov	r0, r8
 8004420:	4649      	mov	r1, r9
 8004422:	f7fc fbf9 	bl	8000c18 <__aeabi_d2lz>
 8004426:	f7fc f8b9 	bl	800059c <__aeabi_l2d>
 800442a:	4602      	mov	r2, r0
 800442c:	460b      	mov	r3, r1
 800442e:	4640      	mov	r0, r8
 8004430:	4649      	mov	r1, r9
 8004432:	f7fb ff29 	bl	8000288 <__aeabi_dsub>
 8004436:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004438:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800443c:	ea43 030a 	orr.w	r3, r3, sl
 8004440:	4313      	orrs	r3, r2
 8004442:	4680      	mov	r8, r0
 8004444:	4689      	mov	r9, r1
 8004446:	d053      	beq.n	80044f0 <_strtod_l+0xba8>
 8004448:	a335      	add	r3, pc, #212	; (adr r3, 8004520 <_strtod_l+0xbd8>)
 800444a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444e:	f7fc fb45 	bl	8000adc <__aeabi_dcmplt>
 8004452:	2800      	cmp	r0, #0
 8004454:	f47f acce 	bne.w	8003df4 <_strtod_l+0x4ac>
 8004458:	a333      	add	r3, pc, #204	; (adr r3, 8004528 <_strtod_l+0xbe0>)
 800445a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445e:	4640      	mov	r0, r8
 8004460:	4649      	mov	r1, r9
 8004462:	f7fc fb59 	bl	8000b18 <__aeabi_dcmpgt>
 8004466:	2800      	cmp	r0, #0
 8004468:	f43f af7b 	beq.w	8004362 <_strtod_l+0xa1a>
 800446c:	e4c2      	b.n	8003df4 <_strtod_l+0x4ac>
 800446e:	9b04      	ldr	r3, [sp, #16]
 8004470:	b333      	cbz	r3, 80044c0 <_strtod_l+0xb78>
 8004472:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004474:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004478:	d822      	bhi.n	80044c0 <_strtod_l+0xb78>
 800447a:	a32d      	add	r3, pc, #180	; (adr r3, 8004530 <_strtod_l+0xbe8>)
 800447c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004480:	4640      	mov	r0, r8
 8004482:	4649      	mov	r1, r9
 8004484:	f7fc fb34 	bl	8000af0 <__aeabi_dcmple>
 8004488:	b1a0      	cbz	r0, 80044b4 <_strtod_l+0xb6c>
 800448a:	4649      	mov	r1, r9
 800448c:	4640      	mov	r0, r8
 800448e:	f7fc fb8b 	bl	8000ba8 <__aeabi_d2uiz>
 8004492:	2801      	cmp	r0, #1
 8004494:	bf38      	it	cc
 8004496:	2001      	movcc	r0, #1
 8004498:	f7fc f834 	bl	8000504 <__aeabi_ui2d>
 800449c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800449e:	4680      	mov	r8, r0
 80044a0:	4689      	mov	r9, r1
 80044a2:	bb13      	cbnz	r3, 80044ea <_strtod_l+0xba2>
 80044a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80044a8:	9014      	str	r0, [sp, #80]	; 0x50
 80044aa:	9315      	str	r3, [sp, #84]	; 0x54
 80044ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80044b0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80044b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80044b8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80044bc:	1a9b      	subs	r3, r3, r2
 80044be:	930d      	str	r3, [sp, #52]	; 0x34
 80044c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80044c4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80044c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80044cc:	f000 ff90 	bl	80053f0 <__ulp>
 80044d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80044d4:	ec53 2b10 	vmov	r2, r3, d0
 80044d8:	f7fc f88e 	bl	80005f8 <__aeabi_dmul>
 80044dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80044e0:	f7fb fed4 	bl	800028c <__adddf3>
 80044e4:	4682      	mov	sl, r0
 80044e6:	468b      	mov	fp, r1
 80044e8:	e78f      	b.n	800440a <_strtod_l+0xac2>
 80044ea:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80044ee:	e7dd      	b.n	80044ac <_strtod_l+0xb64>
 80044f0:	a311      	add	r3, pc, #68	; (adr r3, 8004538 <_strtod_l+0xbf0>)
 80044f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f6:	f7fc faf1 	bl	8000adc <__aeabi_dcmplt>
 80044fa:	e7b4      	b.n	8004466 <_strtod_l+0xb1e>
 80044fc:	2300      	movs	r3, #0
 80044fe:	930e      	str	r3, [sp, #56]	; 0x38
 8004500:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004502:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004504:	6013      	str	r3, [r2, #0]
 8004506:	f7ff ba65 	b.w	80039d4 <_strtod_l+0x8c>
 800450a:	2b65      	cmp	r3, #101	; 0x65
 800450c:	f43f ab5d 	beq.w	8003bca <_strtod_l+0x282>
 8004510:	2b45      	cmp	r3, #69	; 0x45
 8004512:	f43f ab5a 	beq.w	8003bca <_strtod_l+0x282>
 8004516:	2201      	movs	r2, #1
 8004518:	f7ff bb92 	b.w	8003c40 <_strtod_l+0x2f8>
 800451c:	f3af 8000 	nop.w
 8004520:	94a03595 	.word	0x94a03595
 8004524:	3fdfffff 	.word	0x3fdfffff
 8004528:	35afe535 	.word	0x35afe535
 800452c:	3fe00000 	.word	0x3fe00000
 8004530:	ffc00000 	.word	0xffc00000
 8004534:	41dfffff 	.word	0x41dfffff
 8004538:	94a03595 	.word	0x94a03595
 800453c:	3fcfffff 	.word	0x3fcfffff
 8004540:	3ff00000 	.word	0x3ff00000
 8004544:	7ff00000 	.word	0x7ff00000
 8004548:	7fe00000 	.word	0x7fe00000
 800454c:	7c9fffff 	.word	0x7c9fffff
 8004550:	3fe00000 	.word	0x3fe00000
 8004554:	bff00000 	.word	0xbff00000
 8004558:	7fefffff 	.word	0x7fefffff

0800455c <strtod>:
 800455c:	460a      	mov	r2, r1
 800455e:	4601      	mov	r1, r0
 8004560:	4802      	ldr	r0, [pc, #8]	; (800456c <strtod+0x10>)
 8004562:	4b03      	ldr	r3, [pc, #12]	; (8004570 <strtod+0x14>)
 8004564:	6800      	ldr	r0, [r0, #0]
 8004566:	f7ff b9ef 	b.w	8003948 <_strtod_l>
 800456a:	bf00      	nop
 800456c:	2000004c 	.word	0x2000004c
 8004570:	200000b4 	.word	0x200000b4

08004574 <__utoa>:
 8004574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004576:	4c1f      	ldr	r4, [pc, #124]	; (80045f4 <__utoa+0x80>)
 8004578:	b08b      	sub	sp, #44	; 0x2c
 800457a:	4605      	mov	r5, r0
 800457c:	460b      	mov	r3, r1
 800457e:	466e      	mov	r6, sp
 8004580:	f104 0c20 	add.w	ip, r4, #32
 8004584:	6820      	ldr	r0, [r4, #0]
 8004586:	6861      	ldr	r1, [r4, #4]
 8004588:	4637      	mov	r7, r6
 800458a:	c703      	stmia	r7!, {r0, r1}
 800458c:	3408      	adds	r4, #8
 800458e:	4564      	cmp	r4, ip
 8004590:	463e      	mov	r6, r7
 8004592:	d1f7      	bne.n	8004584 <__utoa+0x10>
 8004594:	7921      	ldrb	r1, [r4, #4]
 8004596:	7139      	strb	r1, [r7, #4]
 8004598:	1e91      	subs	r1, r2, #2
 800459a:	6820      	ldr	r0, [r4, #0]
 800459c:	6038      	str	r0, [r7, #0]
 800459e:	2922      	cmp	r1, #34	; 0x22
 80045a0:	f04f 0100 	mov.w	r1, #0
 80045a4:	d904      	bls.n	80045b0 <__utoa+0x3c>
 80045a6:	7019      	strb	r1, [r3, #0]
 80045a8:	460b      	mov	r3, r1
 80045aa:	4618      	mov	r0, r3
 80045ac:	b00b      	add	sp, #44	; 0x2c
 80045ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045b0:	1e58      	subs	r0, r3, #1
 80045b2:	4684      	mov	ip, r0
 80045b4:	fbb5 f7f2 	udiv	r7, r5, r2
 80045b8:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80045bc:	fb02 5617 	mls	r6, r2, r7, r5
 80045c0:	4476      	add	r6, lr
 80045c2:	460c      	mov	r4, r1
 80045c4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80045c8:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80045cc:	462e      	mov	r6, r5
 80045ce:	42b2      	cmp	r2, r6
 80045d0:	f101 0101 	add.w	r1, r1, #1
 80045d4:	463d      	mov	r5, r7
 80045d6:	d9ed      	bls.n	80045b4 <__utoa+0x40>
 80045d8:	2200      	movs	r2, #0
 80045da:	545a      	strb	r2, [r3, r1]
 80045dc:	1919      	adds	r1, r3, r4
 80045de:	1aa5      	subs	r5, r4, r2
 80045e0:	42aa      	cmp	r2, r5
 80045e2:	dae2      	bge.n	80045aa <__utoa+0x36>
 80045e4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80045e8:	780e      	ldrb	r6, [r1, #0]
 80045ea:	7006      	strb	r6, [r0, #0]
 80045ec:	3201      	adds	r2, #1
 80045ee:	f801 5901 	strb.w	r5, [r1], #-1
 80045f2:	e7f4      	b.n	80045de <__utoa+0x6a>
 80045f4:	08008d18 	.word	0x08008d18

080045f8 <rshift>:
 80045f8:	6903      	ldr	r3, [r0, #16]
 80045fa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80045fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004602:	ea4f 1261 	mov.w	r2, r1, asr #5
 8004606:	f100 0414 	add.w	r4, r0, #20
 800460a:	dd45      	ble.n	8004698 <rshift+0xa0>
 800460c:	f011 011f 	ands.w	r1, r1, #31
 8004610:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8004614:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8004618:	d10c      	bne.n	8004634 <rshift+0x3c>
 800461a:	f100 0710 	add.w	r7, r0, #16
 800461e:	4629      	mov	r1, r5
 8004620:	42b1      	cmp	r1, r6
 8004622:	d334      	bcc.n	800468e <rshift+0x96>
 8004624:	1a9b      	subs	r3, r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	1eea      	subs	r2, r5, #3
 800462a:	4296      	cmp	r6, r2
 800462c:	bf38      	it	cc
 800462e:	2300      	movcc	r3, #0
 8004630:	4423      	add	r3, r4
 8004632:	e015      	b.n	8004660 <rshift+0x68>
 8004634:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8004638:	f1c1 0820 	rsb	r8, r1, #32
 800463c:	40cf      	lsrs	r7, r1
 800463e:	f105 0e04 	add.w	lr, r5, #4
 8004642:	46a1      	mov	r9, r4
 8004644:	4576      	cmp	r6, lr
 8004646:	46f4      	mov	ip, lr
 8004648:	d815      	bhi.n	8004676 <rshift+0x7e>
 800464a:	1a9b      	subs	r3, r3, r2
 800464c:	009a      	lsls	r2, r3, #2
 800464e:	3a04      	subs	r2, #4
 8004650:	3501      	adds	r5, #1
 8004652:	42ae      	cmp	r6, r5
 8004654:	bf38      	it	cc
 8004656:	2200      	movcc	r2, #0
 8004658:	18a3      	adds	r3, r4, r2
 800465a:	50a7      	str	r7, [r4, r2]
 800465c:	b107      	cbz	r7, 8004660 <rshift+0x68>
 800465e:	3304      	adds	r3, #4
 8004660:	1b1a      	subs	r2, r3, r4
 8004662:	42a3      	cmp	r3, r4
 8004664:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8004668:	bf08      	it	eq
 800466a:	2300      	moveq	r3, #0
 800466c:	6102      	str	r2, [r0, #16]
 800466e:	bf08      	it	eq
 8004670:	6143      	streq	r3, [r0, #20]
 8004672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004676:	f8dc c000 	ldr.w	ip, [ip]
 800467a:	fa0c fc08 	lsl.w	ip, ip, r8
 800467e:	ea4c 0707 	orr.w	r7, ip, r7
 8004682:	f849 7b04 	str.w	r7, [r9], #4
 8004686:	f85e 7b04 	ldr.w	r7, [lr], #4
 800468a:	40cf      	lsrs	r7, r1
 800468c:	e7da      	b.n	8004644 <rshift+0x4c>
 800468e:	f851 cb04 	ldr.w	ip, [r1], #4
 8004692:	f847 cf04 	str.w	ip, [r7, #4]!
 8004696:	e7c3      	b.n	8004620 <rshift+0x28>
 8004698:	4623      	mov	r3, r4
 800469a:	e7e1      	b.n	8004660 <rshift+0x68>

0800469c <__hexdig_fun>:
 800469c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80046a0:	2b09      	cmp	r3, #9
 80046a2:	d802      	bhi.n	80046aa <__hexdig_fun+0xe>
 80046a4:	3820      	subs	r0, #32
 80046a6:	b2c0      	uxtb	r0, r0
 80046a8:	4770      	bx	lr
 80046aa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80046ae:	2b05      	cmp	r3, #5
 80046b0:	d801      	bhi.n	80046b6 <__hexdig_fun+0x1a>
 80046b2:	3847      	subs	r0, #71	; 0x47
 80046b4:	e7f7      	b.n	80046a6 <__hexdig_fun+0xa>
 80046b6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80046ba:	2b05      	cmp	r3, #5
 80046bc:	d801      	bhi.n	80046c2 <__hexdig_fun+0x26>
 80046be:	3827      	subs	r0, #39	; 0x27
 80046c0:	e7f1      	b.n	80046a6 <__hexdig_fun+0xa>
 80046c2:	2000      	movs	r0, #0
 80046c4:	4770      	bx	lr
	...

080046c8 <__gethex>:
 80046c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046cc:	ed2d 8b02 	vpush	{d8}
 80046d0:	b089      	sub	sp, #36	; 0x24
 80046d2:	ee08 0a10 	vmov	s16, r0
 80046d6:	9304      	str	r3, [sp, #16]
 80046d8:	4bbc      	ldr	r3, [pc, #752]	; (80049cc <__gethex+0x304>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	9301      	str	r3, [sp, #4]
 80046de:	4618      	mov	r0, r3
 80046e0:	468b      	mov	fp, r1
 80046e2:	4690      	mov	r8, r2
 80046e4:	f7fb fd74 	bl	80001d0 <strlen>
 80046e8:	9b01      	ldr	r3, [sp, #4]
 80046ea:	f8db 2000 	ldr.w	r2, [fp]
 80046ee:	4403      	add	r3, r0
 80046f0:	4682      	mov	sl, r0
 80046f2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80046f6:	9305      	str	r3, [sp, #20]
 80046f8:	1c93      	adds	r3, r2, #2
 80046fa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80046fe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8004702:	32fe      	adds	r2, #254	; 0xfe
 8004704:	18d1      	adds	r1, r2, r3
 8004706:	461f      	mov	r7, r3
 8004708:	f813 0b01 	ldrb.w	r0, [r3], #1
 800470c:	9100      	str	r1, [sp, #0]
 800470e:	2830      	cmp	r0, #48	; 0x30
 8004710:	d0f8      	beq.n	8004704 <__gethex+0x3c>
 8004712:	f7ff ffc3 	bl	800469c <__hexdig_fun>
 8004716:	4604      	mov	r4, r0
 8004718:	2800      	cmp	r0, #0
 800471a:	d13a      	bne.n	8004792 <__gethex+0xca>
 800471c:	9901      	ldr	r1, [sp, #4]
 800471e:	4652      	mov	r2, sl
 8004720:	4638      	mov	r0, r7
 8004722:	f001 f835 	bl	8005790 <strncmp>
 8004726:	4605      	mov	r5, r0
 8004728:	2800      	cmp	r0, #0
 800472a:	d168      	bne.n	80047fe <__gethex+0x136>
 800472c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8004730:	eb07 060a 	add.w	r6, r7, sl
 8004734:	f7ff ffb2 	bl	800469c <__hexdig_fun>
 8004738:	2800      	cmp	r0, #0
 800473a:	d062      	beq.n	8004802 <__gethex+0x13a>
 800473c:	4633      	mov	r3, r6
 800473e:	7818      	ldrb	r0, [r3, #0]
 8004740:	2830      	cmp	r0, #48	; 0x30
 8004742:	461f      	mov	r7, r3
 8004744:	f103 0301 	add.w	r3, r3, #1
 8004748:	d0f9      	beq.n	800473e <__gethex+0x76>
 800474a:	f7ff ffa7 	bl	800469c <__hexdig_fun>
 800474e:	2301      	movs	r3, #1
 8004750:	fab0 f480 	clz	r4, r0
 8004754:	0964      	lsrs	r4, r4, #5
 8004756:	4635      	mov	r5, r6
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	463a      	mov	r2, r7
 800475c:	4616      	mov	r6, r2
 800475e:	3201      	adds	r2, #1
 8004760:	7830      	ldrb	r0, [r6, #0]
 8004762:	f7ff ff9b 	bl	800469c <__hexdig_fun>
 8004766:	2800      	cmp	r0, #0
 8004768:	d1f8      	bne.n	800475c <__gethex+0x94>
 800476a:	9901      	ldr	r1, [sp, #4]
 800476c:	4652      	mov	r2, sl
 800476e:	4630      	mov	r0, r6
 8004770:	f001 f80e 	bl	8005790 <strncmp>
 8004774:	b980      	cbnz	r0, 8004798 <__gethex+0xd0>
 8004776:	b94d      	cbnz	r5, 800478c <__gethex+0xc4>
 8004778:	eb06 050a 	add.w	r5, r6, sl
 800477c:	462a      	mov	r2, r5
 800477e:	4616      	mov	r6, r2
 8004780:	3201      	adds	r2, #1
 8004782:	7830      	ldrb	r0, [r6, #0]
 8004784:	f7ff ff8a 	bl	800469c <__hexdig_fun>
 8004788:	2800      	cmp	r0, #0
 800478a:	d1f8      	bne.n	800477e <__gethex+0xb6>
 800478c:	1bad      	subs	r5, r5, r6
 800478e:	00ad      	lsls	r5, r5, #2
 8004790:	e004      	b.n	800479c <__gethex+0xd4>
 8004792:	2400      	movs	r4, #0
 8004794:	4625      	mov	r5, r4
 8004796:	e7e0      	b.n	800475a <__gethex+0x92>
 8004798:	2d00      	cmp	r5, #0
 800479a:	d1f7      	bne.n	800478c <__gethex+0xc4>
 800479c:	7833      	ldrb	r3, [r6, #0]
 800479e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80047a2:	2b50      	cmp	r3, #80	; 0x50
 80047a4:	d13b      	bne.n	800481e <__gethex+0x156>
 80047a6:	7873      	ldrb	r3, [r6, #1]
 80047a8:	2b2b      	cmp	r3, #43	; 0x2b
 80047aa:	d02c      	beq.n	8004806 <__gethex+0x13e>
 80047ac:	2b2d      	cmp	r3, #45	; 0x2d
 80047ae:	d02e      	beq.n	800480e <__gethex+0x146>
 80047b0:	1c71      	adds	r1, r6, #1
 80047b2:	f04f 0900 	mov.w	r9, #0
 80047b6:	7808      	ldrb	r0, [r1, #0]
 80047b8:	f7ff ff70 	bl	800469c <__hexdig_fun>
 80047bc:	1e43      	subs	r3, r0, #1
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b18      	cmp	r3, #24
 80047c2:	d82c      	bhi.n	800481e <__gethex+0x156>
 80047c4:	f1a0 0210 	sub.w	r2, r0, #16
 80047c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80047cc:	f7ff ff66 	bl	800469c <__hexdig_fun>
 80047d0:	1e43      	subs	r3, r0, #1
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b18      	cmp	r3, #24
 80047d6:	d91d      	bls.n	8004814 <__gethex+0x14c>
 80047d8:	f1b9 0f00 	cmp.w	r9, #0
 80047dc:	d000      	beq.n	80047e0 <__gethex+0x118>
 80047de:	4252      	negs	r2, r2
 80047e0:	4415      	add	r5, r2
 80047e2:	f8cb 1000 	str.w	r1, [fp]
 80047e6:	b1e4      	cbz	r4, 8004822 <__gethex+0x15a>
 80047e8:	9b00      	ldr	r3, [sp, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	bf14      	ite	ne
 80047ee:	2700      	movne	r7, #0
 80047f0:	2706      	moveq	r7, #6
 80047f2:	4638      	mov	r0, r7
 80047f4:	b009      	add	sp, #36	; 0x24
 80047f6:	ecbd 8b02 	vpop	{d8}
 80047fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047fe:	463e      	mov	r6, r7
 8004800:	4625      	mov	r5, r4
 8004802:	2401      	movs	r4, #1
 8004804:	e7ca      	b.n	800479c <__gethex+0xd4>
 8004806:	f04f 0900 	mov.w	r9, #0
 800480a:	1cb1      	adds	r1, r6, #2
 800480c:	e7d3      	b.n	80047b6 <__gethex+0xee>
 800480e:	f04f 0901 	mov.w	r9, #1
 8004812:	e7fa      	b.n	800480a <__gethex+0x142>
 8004814:	230a      	movs	r3, #10
 8004816:	fb03 0202 	mla	r2, r3, r2, r0
 800481a:	3a10      	subs	r2, #16
 800481c:	e7d4      	b.n	80047c8 <__gethex+0x100>
 800481e:	4631      	mov	r1, r6
 8004820:	e7df      	b.n	80047e2 <__gethex+0x11a>
 8004822:	1bf3      	subs	r3, r6, r7
 8004824:	3b01      	subs	r3, #1
 8004826:	4621      	mov	r1, r4
 8004828:	2b07      	cmp	r3, #7
 800482a:	dc0b      	bgt.n	8004844 <__gethex+0x17c>
 800482c:	ee18 0a10 	vmov	r0, s16
 8004830:	f000 fa72 	bl	8004d18 <_Balloc>
 8004834:	4604      	mov	r4, r0
 8004836:	b940      	cbnz	r0, 800484a <__gethex+0x182>
 8004838:	4b65      	ldr	r3, [pc, #404]	; (80049d0 <__gethex+0x308>)
 800483a:	4602      	mov	r2, r0
 800483c:	21de      	movs	r1, #222	; 0xde
 800483e:	4865      	ldr	r0, [pc, #404]	; (80049d4 <__gethex+0x30c>)
 8004840:	f000 ffc6 	bl	80057d0 <__assert_func>
 8004844:	3101      	adds	r1, #1
 8004846:	105b      	asrs	r3, r3, #1
 8004848:	e7ee      	b.n	8004828 <__gethex+0x160>
 800484a:	f100 0914 	add.w	r9, r0, #20
 800484e:	f04f 0b00 	mov.w	fp, #0
 8004852:	f1ca 0301 	rsb	r3, sl, #1
 8004856:	f8cd 9008 	str.w	r9, [sp, #8]
 800485a:	f8cd b000 	str.w	fp, [sp]
 800485e:	9306      	str	r3, [sp, #24]
 8004860:	42b7      	cmp	r7, r6
 8004862:	d340      	bcc.n	80048e6 <__gethex+0x21e>
 8004864:	9802      	ldr	r0, [sp, #8]
 8004866:	9b00      	ldr	r3, [sp, #0]
 8004868:	f840 3b04 	str.w	r3, [r0], #4
 800486c:	eba0 0009 	sub.w	r0, r0, r9
 8004870:	1080      	asrs	r0, r0, #2
 8004872:	0146      	lsls	r6, r0, #5
 8004874:	6120      	str	r0, [r4, #16]
 8004876:	4618      	mov	r0, r3
 8004878:	f000 fb44 	bl	8004f04 <__hi0bits>
 800487c:	1a30      	subs	r0, r6, r0
 800487e:	f8d8 6000 	ldr.w	r6, [r8]
 8004882:	42b0      	cmp	r0, r6
 8004884:	dd63      	ble.n	800494e <__gethex+0x286>
 8004886:	1b87      	subs	r7, r0, r6
 8004888:	4639      	mov	r1, r7
 800488a:	4620      	mov	r0, r4
 800488c:	f000 fede 	bl	800564c <__any_on>
 8004890:	4682      	mov	sl, r0
 8004892:	b1a8      	cbz	r0, 80048c0 <__gethex+0x1f8>
 8004894:	1e7b      	subs	r3, r7, #1
 8004896:	1159      	asrs	r1, r3, #5
 8004898:	f003 021f 	and.w	r2, r3, #31
 800489c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80048a0:	f04f 0a01 	mov.w	sl, #1
 80048a4:	fa0a f202 	lsl.w	r2, sl, r2
 80048a8:	420a      	tst	r2, r1
 80048aa:	d009      	beq.n	80048c0 <__gethex+0x1f8>
 80048ac:	4553      	cmp	r3, sl
 80048ae:	dd05      	ble.n	80048bc <__gethex+0x1f4>
 80048b0:	1eb9      	subs	r1, r7, #2
 80048b2:	4620      	mov	r0, r4
 80048b4:	f000 feca 	bl	800564c <__any_on>
 80048b8:	2800      	cmp	r0, #0
 80048ba:	d145      	bne.n	8004948 <__gethex+0x280>
 80048bc:	f04f 0a02 	mov.w	sl, #2
 80048c0:	4639      	mov	r1, r7
 80048c2:	4620      	mov	r0, r4
 80048c4:	f7ff fe98 	bl	80045f8 <rshift>
 80048c8:	443d      	add	r5, r7
 80048ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80048ce:	42ab      	cmp	r3, r5
 80048d0:	da4c      	bge.n	800496c <__gethex+0x2a4>
 80048d2:	ee18 0a10 	vmov	r0, s16
 80048d6:	4621      	mov	r1, r4
 80048d8:	f000 fa5e 	bl	8004d98 <_Bfree>
 80048dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80048de:	2300      	movs	r3, #0
 80048e0:	6013      	str	r3, [r2, #0]
 80048e2:	27a3      	movs	r7, #163	; 0xa3
 80048e4:	e785      	b.n	80047f2 <__gethex+0x12a>
 80048e6:	1e73      	subs	r3, r6, #1
 80048e8:	9a05      	ldr	r2, [sp, #20]
 80048ea:	9303      	str	r3, [sp, #12]
 80048ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d019      	beq.n	8004928 <__gethex+0x260>
 80048f4:	f1bb 0f20 	cmp.w	fp, #32
 80048f8:	d107      	bne.n	800490a <__gethex+0x242>
 80048fa:	9b02      	ldr	r3, [sp, #8]
 80048fc:	9a00      	ldr	r2, [sp, #0]
 80048fe:	f843 2b04 	str.w	r2, [r3], #4
 8004902:	9302      	str	r3, [sp, #8]
 8004904:	2300      	movs	r3, #0
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	469b      	mov	fp, r3
 800490a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800490e:	f7ff fec5 	bl	800469c <__hexdig_fun>
 8004912:	9b00      	ldr	r3, [sp, #0]
 8004914:	f000 000f 	and.w	r0, r0, #15
 8004918:	fa00 f00b 	lsl.w	r0, r0, fp
 800491c:	4303      	orrs	r3, r0
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	f10b 0b04 	add.w	fp, fp, #4
 8004924:	9b03      	ldr	r3, [sp, #12]
 8004926:	e00d      	b.n	8004944 <__gethex+0x27c>
 8004928:	9b03      	ldr	r3, [sp, #12]
 800492a:	9a06      	ldr	r2, [sp, #24]
 800492c:	4413      	add	r3, r2
 800492e:	42bb      	cmp	r3, r7
 8004930:	d3e0      	bcc.n	80048f4 <__gethex+0x22c>
 8004932:	4618      	mov	r0, r3
 8004934:	9901      	ldr	r1, [sp, #4]
 8004936:	9307      	str	r3, [sp, #28]
 8004938:	4652      	mov	r2, sl
 800493a:	f000 ff29 	bl	8005790 <strncmp>
 800493e:	9b07      	ldr	r3, [sp, #28]
 8004940:	2800      	cmp	r0, #0
 8004942:	d1d7      	bne.n	80048f4 <__gethex+0x22c>
 8004944:	461e      	mov	r6, r3
 8004946:	e78b      	b.n	8004860 <__gethex+0x198>
 8004948:	f04f 0a03 	mov.w	sl, #3
 800494c:	e7b8      	b.n	80048c0 <__gethex+0x1f8>
 800494e:	da0a      	bge.n	8004966 <__gethex+0x29e>
 8004950:	1a37      	subs	r7, r6, r0
 8004952:	4621      	mov	r1, r4
 8004954:	ee18 0a10 	vmov	r0, s16
 8004958:	463a      	mov	r2, r7
 800495a:	f000 fc39 	bl	80051d0 <__lshift>
 800495e:	1bed      	subs	r5, r5, r7
 8004960:	4604      	mov	r4, r0
 8004962:	f100 0914 	add.w	r9, r0, #20
 8004966:	f04f 0a00 	mov.w	sl, #0
 800496a:	e7ae      	b.n	80048ca <__gethex+0x202>
 800496c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8004970:	42a8      	cmp	r0, r5
 8004972:	dd72      	ble.n	8004a5a <__gethex+0x392>
 8004974:	1b45      	subs	r5, r0, r5
 8004976:	42ae      	cmp	r6, r5
 8004978:	dc36      	bgt.n	80049e8 <__gethex+0x320>
 800497a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800497e:	2b02      	cmp	r3, #2
 8004980:	d02a      	beq.n	80049d8 <__gethex+0x310>
 8004982:	2b03      	cmp	r3, #3
 8004984:	d02c      	beq.n	80049e0 <__gethex+0x318>
 8004986:	2b01      	cmp	r3, #1
 8004988:	d115      	bne.n	80049b6 <__gethex+0x2ee>
 800498a:	42ae      	cmp	r6, r5
 800498c:	d113      	bne.n	80049b6 <__gethex+0x2ee>
 800498e:	2e01      	cmp	r6, #1
 8004990:	d10b      	bne.n	80049aa <__gethex+0x2e2>
 8004992:	9a04      	ldr	r2, [sp, #16]
 8004994:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004998:	6013      	str	r3, [r2, #0]
 800499a:	2301      	movs	r3, #1
 800499c:	6123      	str	r3, [r4, #16]
 800499e:	f8c9 3000 	str.w	r3, [r9]
 80049a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80049a4:	2762      	movs	r7, #98	; 0x62
 80049a6:	601c      	str	r4, [r3, #0]
 80049a8:	e723      	b.n	80047f2 <__gethex+0x12a>
 80049aa:	1e71      	subs	r1, r6, #1
 80049ac:	4620      	mov	r0, r4
 80049ae:	f000 fe4d 	bl	800564c <__any_on>
 80049b2:	2800      	cmp	r0, #0
 80049b4:	d1ed      	bne.n	8004992 <__gethex+0x2ca>
 80049b6:	ee18 0a10 	vmov	r0, s16
 80049ba:	4621      	mov	r1, r4
 80049bc:	f000 f9ec 	bl	8004d98 <_Bfree>
 80049c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80049c2:	2300      	movs	r3, #0
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	2750      	movs	r7, #80	; 0x50
 80049c8:	e713      	b.n	80047f2 <__gethex+0x12a>
 80049ca:	bf00      	nop
 80049cc:	08008db8 	.word	0x08008db8
 80049d0:	08008d3d 	.word	0x08008d3d
 80049d4:	08008d4e 	.word	0x08008d4e
 80049d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1eb      	bne.n	80049b6 <__gethex+0x2ee>
 80049de:	e7d8      	b.n	8004992 <__gethex+0x2ca>
 80049e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1d5      	bne.n	8004992 <__gethex+0x2ca>
 80049e6:	e7e6      	b.n	80049b6 <__gethex+0x2ee>
 80049e8:	1e6f      	subs	r7, r5, #1
 80049ea:	f1ba 0f00 	cmp.w	sl, #0
 80049ee:	d131      	bne.n	8004a54 <__gethex+0x38c>
 80049f0:	b127      	cbz	r7, 80049fc <__gethex+0x334>
 80049f2:	4639      	mov	r1, r7
 80049f4:	4620      	mov	r0, r4
 80049f6:	f000 fe29 	bl	800564c <__any_on>
 80049fa:	4682      	mov	sl, r0
 80049fc:	117b      	asrs	r3, r7, #5
 80049fe:	2101      	movs	r1, #1
 8004a00:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8004a04:	f007 071f 	and.w	r7, r7, #31
 8004a08:	fa01 f707 	lsl.w	r7, r1, r7
 8004a0c:	421f      	tst	r7, r3
 8004a0e:	4629      	mov	r1, r5
 8004a10:	4620      	mov	r0, r4
 8004a12:	bf18      	it	ne
 8004a14:	f04a 0a02 	orrne.w	sl, sl, #2
 8004a18:	1b76      	subs	r6, r6, r5
 8004a1a:	f7ff fded 	bl	80045f8 <rshift>
 8004a1e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8004a22:	2702      	movs	r7, #2
 8004a24:	f1ba 0f00 	cmp.w	sl, #0
 8004a28:	d048      	beq.n	8004abc <__gethex+0x3f4>
 8004a2a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d015      	beq.n	8004a5e <__gethex+0x396>
 8004a32:	2b03      	cmp	r3, #3
 8004a34:	d017      	beq.n	8004a66 <__gethex+0x39e>
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d109      	bne.n	8004a4e <__gethex+0x386>
 8004a3a:	f01a 0f02 	tst.w	sl, #2
 8004a3e:	d006      	beq.n	8004a4e <__gethex+0x386>
 8004a40:	f8d9 0000 	ldr.w	r0, [r9]
 8004a44:	ea4a 0a00 	orr.w	sl, sl, r0
 8004a48:	f01a 0f01 	tst.w	sl, #1
 8004a4c:	d10e      	bne.n	8004a6c <__gethex+0x3a4>
 8004a4e:	f047 0710 	orr.w	r7, r7, #16
 8004a52:	e033      	b.n	8004abc <__gethex+0x3f4>
 8004a54:	f04f 0a01 	mov.w	sl, #1
 8004a58:	e7d0      	b.n	80049fc <__gethex+0x334>
 8004a5a:	2701      	movs	r7, #1
 8004a5c:	e7e2      	b.n	8004a24 <__gethex+0x35c>
 8004a5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004a60:	f1c3 0301 	rsb	r3, r3, #1
 8004a64:	9315      	str	r3, [sp, #84]	; 0x54
 8004a66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d0f0      	beq.n	8004a4e <__gethex+0x386>
 8004a6c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8004a70:	f104 0314 	add.w	r3, r4, #20
 8004a74:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8004a78:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8004a7c:	f04f 0c00 	mov.w	ip, #0
 8004a80:	4618      	mov	r0, r3
 8004a82:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a86:	f1b2 3fff 	cmp.w	r2, #4294967295
 8004a8a:	d01c      	beq.n	8004ac6 <__gethex+0x3fe>
 8004a8c:	3201      	adds	r2, #1
 8004a8e:	6002      	str	r2, [r0, #0]
 8004a90:	2f02      	cmp	r7, #2
 8004a92:	f104 0314 	add.w	r3, r4, #20
 8004a96:	d13f      	bne.n	8004b18 <__gethex+0x450>
 8004a98:	f8d8 2000 	ldr.w	r2, [r8]
 8004a9c:	3a01      	subs	r2, #1
 8004a9e:	42b2      	cmp	r2, r6
 8004aa0:	d10a      	bne.n	8004ab8 <__gethex+0x3f0>
 8004aa2:	1171      	asrs	r1, r6, #5
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004aaa:	f006 061f 	and.w	r6, r6, #31
 8004aae:	fa02 f606 	lsl.w	r6, r2, r6
 8004ab2:	421e      	tst	r6, r3
 8004ab4:	bf18      	it	ne
 8004ab6:	4617      	movne	r7, r2
 8004ab8:	f047 0720 	orr.w	r7, r7, #32
 8004abc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004abe:	601c      	str	r4, [r3, #0]
 8004ac0:	9b04      	ldr	r3, [sp, #16]
 8004ac2:	601d      	str	r5, [r3, #0]
 8004ac4:	e695      	b.n	80047f2 <__gethex+0x12a>
 8004ac6:	4299      	cmp	r1, r3
 8004ac8:	f843 cc04 	str.w	ip, [r3, #-4]
 8004acc:	d8d8      	bhi.n	8004a80 <__gethex+0x3b8>
 8004ace:	68a3      	ldr	r3, [r4, #8]
 8004ad0:	459b      	cmp	fp, r3
 8004ad2:	db19      	blt.n	8004b08 <__gethex+0x440>
 8004ad4:	6861      	ldr	r1, [r4, #4]
 8004ad6:	ee18 0a10 	vmov	r0, s16
 8004ada:	3101      	adds	r1, #1
 8004adc:	f000 f91c 	bl	8004d18 <_Balloc>
 8004ae0:	4681      	mov	r9, r0
 8004ae2:	b918      	cbnz	r0, 8004aec <__gethex+0x424>
 8004ae4:	4b1a      	ldr	r3, [pc, #104]	; (8004b50 <__gethex+0x488>)
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	2184      	movs	r1, #132	; 0x84
 8004aea:	e6a8      	b.n	800483e <__gethex+0x176>
 8004aec:	6922      	ldr	r2, [r4, #16]
 8004aee:	3202      	adds	r2, #2
 8004af0:	f104 010c 	add.w	r1, r4, #12
 8004af4:	0092      	lsls	r2, r2, #2
 8004af6:	300c      	adds	r0, #12
 8004af8:	f000 f900 	bl	8004cfc <memcpy>
 8004afc:	4621      	mov	r1, r4
 8004afe:	ee18 0a10 	vmov	r0, s16
 8004b02:	f000 f949 	bl	8004d98 <_Bfree>
 8004b06:	464c      	mov	r4, r9
 8004b08:	6923      	ldr	r3, [r4, #16]
 8004b0a:	1c5a      	adds	r2, r3, #1
 8004b0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004b10:	6122      	str	r2, [r4, #16]
 8004b12:	2201      	movs	r2, #1
 8004b14:	615a      	str	r2, [r3, #20]
 8004b16:	e7bb      	b.n	8004a90 <__gethex+0x3c8>
 8004b18:	6922      	ldr	r2, [r4, #16]
 8004b1a:	455a      	cmp	r2, fp
 8004b1c:	dd0b      	ble.n	8004b36 <__gethex+0x46e>
 8004b1e:	2101      	movs	r1, #1
 8004b20:	4620      	mov	r0, r4
 8004b22:	f7ff fd69 	bl	80045f8 <rshift>
 8004b26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004b2a:	3501      	adds	r5, #1
 8004b2c:	42ab      	cmp	r3, r5
 8004b2e:	f6ff aed0 	blt.w	80048d2 <__gethex+0x20a>
 8004b32:	2701      	movs	r7, #1
 8004b34:	e7c0      	b.n	8004ab8 <__gethex+0x3f0>
 8004b36:	f016 061f 	ands.w	r6, r6, #31
 8004b3a:	d0fa      	beq.n	8004b32 <__gethex+0x46a>
 8004b3c:	449a      	add	sl, r3
 8004b3e:	f1c6 0620 	rsb	r6, r6, #32
 8004b42:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8004b46:	f000 f9dd 	bl	8004f04 <__hi0bits>
 8004b4a:	42b0      	cmp	r0, r6
 8004b4c:	dbe7      	blt.n	8004b1e <__gethex+0x456>
 8004b4e:	e7f0      	b.n	8004b32 <__gethex+0x46a>
 8004b50:	08008d3d 	.word	0x08008d3d

08004b54 <L_shift>:
 8004b54:	f1c2 0208 	rsb	r2, r2, #8
 8004b58:	0092      	lsls	r2, r2, #2
 8004b5a:	b570      	push	{r4, r5, r6, lr}
 8004b5c:	f1c2 0620 	rsb	r6, r2, #32
 8004b60:	6843      	ldr	r3, [r0, #4]
 8004b62:	6804      	ldr	r4, [r0, #0]
 8004b64:	fa03 f506 	lsl.w	r5, r3, r6
 8004b68:	432c      	orrs	r4, r5
 8004b6a:	40d3      	lsrs	r3, r2
 8004b6c:	6004      	str	r4, [r0, #0]
 8004b6e:	f840 3f04 	str.w	r3, [r0, #4]!
 8004b72:	4288      	cmp	r0, r1
 8004b74:	d3f4      	bcc.n	8004b60 <L_shift+0xc>
 8004b76:	bd70      	pop	{r4, r5, r6, pc}

08004b78 <__match>:
 8004b78:	b530      	push	{r4, r5, lr}
 8004b7a:	6803      	ldr	r3, [r0, #0]
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b82:	b914      	cbnz	r4, 8004b8a <__match+0x12>
 8004b84:	6003      	str	r3, [r0, #0]
 8004b86:	2001      	movs	r0, #1
 8004b88:	bd30      	pop	{r4, r5, pc}
 8004b8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b8e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8004b92:	2d19      	cmp	r5, #25
 8004b94:	bf98      	it	ls
 8004b96:	3220      	addls	r2, #32
 8004b98:	42a2      	cmp	r2, r4
 8004b9a:	d0f0      	beq.n	8004b7e <__match+0x6>
 8004b9c:	2000      	movs	r0, #0
 8004b9e:	e7f3      	b.n	8004b88 <__match+0x10>

08004ba0 <__hexnan>:
 8004ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ba4:	680b      	ldr	r3, [r1, #0]
 8004ba6:	6801      	ldr	r1, [r0, #0]
 8004ba8:	115e      	asrs	r6, r3, #5
 8004baa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004bae:	f013 031f 	ands.w	r3, r3, #31
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	bf18      	it	ne
 8004bb6:	3604      	addne	r6, #4
 8004bb8:	2500      	movs	r5, #0
 8004bba:	1f37      	subs	r7, r6, #4
 8004bbc:	4682      	mov	sl, r0
 8004bbe:	4690      	mov	r8, r2
 8004bc0:	9301      	str	r3, [sp, #4]
 8004bc2:	f846 5c04 	str.w	r5, [r6, #-4]
 8004bc6:	46b9      	mov	r9, r7
 8004bc8:	463c      	mov	r4, r7
 8004bca:	9502      	str	r5, [sp, #8]
 8004bcc:	46ab      	mov	fp, r5
 8004bce:	784a      	ldrb	r2, [r1, #1]
 8004bd0:	1c4b      	adds	r3, r1, #1
 8004bd2:	9303      	str	r3, [sp, #12]
 8004bd4:	b342      	cbz	r2, 8004c28 <__hexnan+0x88>
 8004bd6:	4610      	mov	r0, r2
 8004bd8:	9105      	str	r1, [sp, #20]
 8004bda:	9204      	str	r2, [sp, #16]
 8004bdc:	f7ff fd5e 	bl	800469c <__hexdig_fun>
 8004be0:	2800      	cmp	r0, #0
 8004be2:	d14f      	bne.n	8004c84 <__hexnan+0xe4>
 8004be4:	9a04      	ldr	r2, [sp, #16]
 8004be6:	9905      	ldr	r1, [sp, #20]
 8004be8:	2a20      	cmp	r2, #32
 8004bea:	d818      	bhi.n	8004c1e <__hexnan+0x7e>
 8004bec:	9b02      	ldr	r3, [sp, #8]
 8004bee:	459b      	cmp	fp, r3
 8004bf0:	dd13      	ble.n	8004c1a <__hexnan+0x7a>
 8004bf2:	454c      	cmp	r4, r9
 8004bf4:	d206      	bcs.n	8004c04 <__hexnan+0x64>
 8004bf6:	2d07      	cmp	r5, #7
 8004bf8:	dc04      	bgt.n	8004c04 <__hexnan+0x64>
 8004bfa:	462a      	mov	r2, r5
 8004bfc:	4649      	mov	r1, r9
 8004bfe:	4620      	mov	r0, r4
 8004c00:	f7ff ffa8 	bl	8004b54 <L_shift>
 8004c04:	4544      	cmp	r4, r8
 8004c06:	d950      	bls.n	8004caa <__hexnan+0x10a>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	f1a4 0904 	sub.w	r9, r4, #4
 8004c0e:	f844 3c04 	str.w	r3, [r4, #-4]
 8004c12:	f8cd b008 	str.w	fp, [sp, #8]
 8004c16:	464c      	mov	r4, r9
 8004c18:	461d      	mov	r5, r3
 8004c1a:	9903      	ldr	r1, [sp, #12]
 8004c1c:	e7d7      	b.n	8004bce <__hexnan+0x2e>
 8004c1e:	2a29      	cmp	r2, #41	; 0x29
 8004c20:	d156      	bne.n	8004cd0 <__hexnan+0x130>
 8004c22:	3102      	adds	r1, #2
 8004c24:	f8ca 1000 	str.w	r1, [sl]
 8004c28:	f1bb 0f00 	cmp.w	fp, #0
 8004c2c:	d050      	beq.n	8004cd0 <__hexnan+0x130>
 8004c2e:	454c      	cmp	r4, r9
 8004c30:	d206      	bcs.n	8004c40 <__hexnan+0xa0>
 8004c32:	2d07      	cmp	r5, #7
 8004c34:	dc04      	bgt.n	8004c40 <__hexnan+0xa0>
 8004c36:	462a      	mov	r2, r5
 8004c38:	4649      	mov	r1, r9
 8004c3a:	4620      	mov	r0, r4
 8004c3c:	f7ff ff8a 	bl	8004b54 <L_shift>
 8004c40:	4544      	cmp	r4, r8
 8004c42:	d934      	bls.n	8004cae <__hexnan+0x10e>
 8004c44:	f1a8 0204 	sub.w	r2, r8, #4
 8004c48:	4623      	mov	r3, r4
 8004c4a:	f853 1b04 	ldr.w	r1, [r3], #4
 8004c4e:	f842 1f04 	str.w	r1, [r2, #4]!
 8004c52:	429f      	cmp	r7, r3
 8004c54:	d2f9      	bcs.n	8004c4a <__hexnan+0xaa>
 8004c56:	1b3b      	subs	r3, r7, r4
 8004c58:	f023 0303 	bic.w	r3, r3, #3
 8004c5c:	3304      	adds	r3, #4
 8004c5e:	3401      	adds	r4, #1
 8004c60:	3e03      	subs	r6, #3
 8004c62:	42b4      	cmp	r4, r6
 8004c64:	bf88      	it	hi
 8004c66:	2304      	movhi	r3, #4
 8004c68:	4443      	add	r3, r8
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f843 2b04 	str.w	r2, [r3], #4
 8004c70:	429f      	cmp	r7, r3
 8004c72:	d2fb      	bcs.n	8004c6c <__hexnan+0xcc>
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	b91b      	cbnz	r3, 8004c80 <__hexnan+0xe0>
 8004c78:	4547      	cmp	r7, r8
 8004c7a:	d127      	bne.n	8004ccc <__hexnan+0x12c>
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	603b      	str	r3, [r7, #0]
 8004c80:	2005      	movs	r0, #5
 8004c82:	e026      	b.n	8004cd2 <__hexnan+0x132>
 8004c84:	3501      	adds	r5, #1
 8004c86:	2d08      	cmp	r5, #8
 8004c88:	f10b 0b01 	add.w	fp, fp, #1
 8004c8c:	dd06      	ble.n	8004c9c <__hexnan+0xfc>
 8004c8e:	4544      	cmp	r4, r8
 8004c90:	d9c3      	bls.n	8004c1a <__hexnan+0x7a>
 8004c92:	2300      	movs	r3, #0
 8004c94:	f844 3c04 	str.w	r3, [r4, #-4]
 8004c98:	2501      	movs	r5, #1
 8004c9a:	3c04      	subs	r4, #4
 8004c9c:	6822      	ldr	r2, [r4, #0]
 8004c9e:	f000 000f 	and.w	r0, r0, #15
 8004ca2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8004ca6:	6022      	str	r2, [r4, #0]
 8004ca8:	e7b7      	b.n	8004c1a <__hexnan+0x7a>
 8004caa:	2508      	movs	r5, #8
 8004cac:	e7b5      	b.n	8004c1a <__hexnan+0x7a>
 8004cae:	9b01      	ldr	r3, [sp, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d0df      	beq.n	8004c74 <__hexnan+0xd4>
 8004cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8004cb8:	f1c3 0320 	rsb	r3, r3, #32
 8004cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8004cc4:	401a      	ands	r2, r3
 8004cc6:	f846 2c04 	str.w	r2, [r6, #-4]
 8004cca:	e7d3      	b.n	8004c74 <__hexnan+0xd4>
 8004ccc:	3f04      	subs	r7, #4
 8004cce:	e7d1      	b.n	8004c74 <__hexnan+0xd4>
 8004cd0:	2004      	movs	r0, #4
 8004cd2:	b007      	add	sp, #28
 8004cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004cd8 <__ascii_mbtowc>:
 8004cd8:	b082      	sub	sp, #8
 8004cda:	b901      	cbnz	r1, 8004cde <__ascii_mbtowc+0x6>
 8004cdc:	a901      	add	r1, sp, #4
 8004cde:	b142      	cbz	r2, 8004cf2 <__ascii_mbtowc+0x1a>
 8004ce0:	b14b      	cbz	r3, 8004cf6 <__ascii_mbtowc+0x1e>
 8004ce2:	7813      	ldrb	r3, [r2, #0]
 8004ce4:	600b      	str	r3, [r1, #0]
 8004ce6:	7812      	ldrb	r2, [r2, #0]
 8004ce8:	1e10      	subs	r0, r2, #0
 8004cea:	bf18      	it	ne
 8004cec:	2001      	movne	r0, #1
 8004cee:	b002      	add	sp, #8
 8004cf0:	4770      	bx	lr
 8004cf2:	4610      	mov	r0, r2
 8004cf4:	e7fb      	b.n	8004cee <__ascii_mbtowc+0x16>
 8004cf6:	f06f 0001 	mvn.w	r0, #1
 8004cfa:	e7f8      	b.n	8004cee <__ascii_mbtowc+0x16>

08004cfc <memcpy>:
 8004cfc:	440a      	add	r2, r1
 8004cfe:	4291      	cmp	r1, r2
 8004d00:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d04:	d100      	bne.n	8004d08 <memcpy+0xc>
 8004d06:	4770      	bx	lr
 8004d08:	b510      	push	{r4, lr}
 8004d0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d12:	4291      	cmp	r1, r2
 8004d14:	d1f9      	bne.n	8004d0a <memcpy+0xe>
 8004d16:	bd10      	pop	{r4, pc}

08004d18 <_Balloc>:
 8004d18:	b570      	push	{r4, r5, r6, lr}
 8004d1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004d1c:	4604      	mov	r4, r0
 8004d1e:	460d      	mov	r5, r1
 8004d20:	b976      	cbnz	r6, 8004d40 <_Balloc+0x28>
 8004d22:	2010      	movs	r0, #16
 8004d24:	f000 fd84 	bl	8005830 <malloc>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	6260      	str	r0, [r4, #36]	; 0x24
 8004d2c:	b920      	cbnz	r0, 8004d38 <_Balloc+0x20>
 8004d2e:	4b18      	ldr	r3, [pc, #96]	; (8004d90 <_Balloc+0x78>)
 8004d30:	4818      	ldr	r0, [pc, #96]	; (8004d94 <_Balloc+0x7c>)
 8004d32:	2166      	movs	r1, #102	; 0x66
 8004d34:	f000 fd4c 	bl	80057d0 <__assert_func>
 8004d38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004d3c:	6006      	str	r6, [r0, #0]
 8004d3e:	60c6      	str	r6, [r0, #12]
 8004d40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004d42:	68f3      	ldr	r3, [r6, #12]
 8004d44:	b183      	cbz	r3, 8004d68 <_Balloc+0x50>
 8004d46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004d4e:	b9b8      	cbnz	r0, 8004d80 <_Balloc+0x68>
 8004d50:	2101      	movs	r1, #1
 8004d52:	fa01 f605 	lsl.w	r6, r1, r5
 8004d56:	1d72      	adds	r2, r6, #5
 8004d58:	0092      	lsls	r2, r2, #2
 8004d5a:	4620      	mov	r0, r4
 8004d5c:	f000 fc97 	bl	800568e <_calloc_r>
 8004d60:	b160      	cbz	r0, 8004d7c <_Balloc+0x64>
 8004d62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004d66:	e00e      	b.n	8004d86 <_Balloc+0x6e>
 8004d68:	2221      	movs	r2, #33	; 0x21
 8004d6a:	2104      	movs	r1, #4
 8004d6c:	4620      	mov	r0, r4
 8004d6e:	f000 fc8e 	bl	800568e <_calloc_r>
 8004d72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d74:	60f0      	str	r0, [r6, #12]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1e4      	bne.n	8004d46 <_Balloc+0x2e>
 8004d7c:	2000      	movs	r0, #0
 8004d7e:	bd70      	pop	{r4, r5, r6, pc}
 8004d80:	6802      	ldr	r2, [r0, #0]
 8004d82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004d86:	2300      	movs	r3, #0
 8004d88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004d8c:	e7f7      	b.n	8004d7e <_Balloc+0x66>
 8004d8e:	bf00      	nop
 8004d90:	08008dcc 	.word	0x08008dcc
 8004d94:	08008de3 	.word	0x08008de3

08004d98 <_Bfree>:
 8004d98:	b570      	push	{r4, r5, r6, lr}
 8004d9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004d9c:	4605      	mov	r5, r0
 8004d9e:	460c      	mov	r4, r1
 8004da0:	b976      	cbnz	r6, 8004dc0 <_Bfree+0x28>
 8004da2:	2010      	movs	r0, #16
 8004da4:	f000 fd44 	bl	8005830 <malloc>
 8004da8:	4602      	mov	r2, r0
 8004daa:	6268      	str	r0, [r5, #36]	; 0x24
 8004dac:	b920      	cbnz	r0, 8004db8 <_Bfree+0x20>
 8004dae:	4b09      	ldr	r3, [pc, #36]	; (8004dd4 <_Bfree+0x3c>)
 8004db0:	4809      	ldr	r0, [pc, #36]	; (8004dd8 <_Bfree+0x40>)
 8004db2:	218a      	movs	r1, #138	; 0x8a
 8004db4:	f000 fd0c 	bl	80057d0 <__assert_func>
 8004db8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004dbc:	6006      	str	r6, [r0, #0]
 8004dbe:	60c6      	str	r6, [r0, #12]
 8004dc0:	b13c      	cbz	r4, 8004dd2 <_Bfree+0x3a>
 8004dc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004dc4:	6862      	ldr	r2, [r4, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004dcc:	6021      	str	r1, [r4, #0]
 8004dce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004dd2:	bd70      	pop	{r4, r5, r6, pc}
 8004dd4:	08008dcc 	.word	0x08008dcc
 8004dd8:	08008de3 	.word	0x08008de3

08004ddc <__multadd>:
 8004ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004de0:	690e      	ldr	r6, [r1, #16]
 8004de2:	4607      	mov	r7, r0
 8004de4:	4698      	mov	r8, r3
 8004de6:	460c      	mov	r4, r1
 8004de8:	f101 0014 	add.w	r0, r1, #20
 8004dec:	2300      	movs	r3, #0
 8004dee:	6805      	ldr	r5, [r0, #0]
 8004df0:	b2a9      	uxth	r1, r5
 8004df2:	fb02 8101 	mla	r1, r2, r1, r8
 8004df6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8004dfa:	0c2d      	lsrs	r5, r5, #16
 8004dfc:	fb02 c505 	mla	r5, r2, r5, ip
 8004e00:	b289      	uxth	r1, r1
 8004e02:	3301      	adds	r3, #1
 8004e04:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004e08:	429e      	cmp	r6, r3
 8004e0a:	f840 1b04 	str.w	r1, [r0], #4
 8004e0e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8004e12:	dcec      	bgt.n	8004dee <__multadd+0x12>
 8004e14:	f1b8 0f00 	cmp.w	r8, #0
 8004e18:	d022      	beq.n	8004e60 <__multadd+0x84>
 8004e1a:	68a3      	ldr	r3, [r4, #8]
 8004e1c:	42b3      	cmp	r3, r6
 8004e1e:	dc19      	bgt.n	8004e54 <__multadd+0x78>
 8004e20:	6861      	ldr	r1, [r4, #4]
 8004e22:	4638      	mov	r0, r7
 8004e24:	3101      	adds	r1, #1
 8004e26:	f7ff ff77 	bl	8004d18 <_Balloc>
 8004e2a:	4605      	mov	r5, r0
 8004e2c:	b928      	cbnz	r0, 8004e3a <__multadd+0x5e>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	4b0d      	ldr	r3, [pc, #52]	; (8004e68 <__multadd+0x8c>)
 8004e32:	480e      	ldr	r0, [pc, #56]	; (8004e6c <__multadd+0x90>)
 8004e34:	21b5      	movs	r1, #181	; 0xb5
 8004e36:	f000 fccb 	bl	80057d0 <__assert_func>
 8004e3a:	6922      	ldr	r2, [r4, #16]
 8004e3c:	3202      	adds	r2, #2
 8004e3e:	f104 010c 	add.w	r1, r4, #12
 8004e42:	0092      	lsls	r2, r2, #2
 8004e44:	300c      	adds	r0, #12
 8004e46:	f7ff ff59 	bl	8004cfc <memcpy>
 8004e4a:	4621      	mov	r1, r4
 8004e4c:	4638      	mov	r0, r7
 8004e4e:	f7ff ffa3 	bl	8004d98 <_Bfree>
 8004e52:	462c      	mov	r4, r5
 8004e54:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004e58:	3601      	adds	r6, #1
 8004e5a:	f8c3 8014 	str.w	r8, [r3, #20]
 8004e5e:	6126      	str	r6, [r4, #16]
 8004e60:	4620      	mov	r0, r4
 8004e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e66:	bf00      	nop
 8004e68:	08008d3d 	.word	0x08008d3d
 8004e6c:	08008de3 	.word	0x08008de3

08004e70 <__s2b>:
 8004e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e74:	460c      	mov	r4, r1
 8004e76:	4615      	mov	r5, r2
 8004e78:	461f      	mov	r7, r3
 8004e7a:	2209      	movs	r2, #9
 8004e7c:	3308      	adds	r3, #8
 8004e7e:	4606      	mov	r6, r0
 8004e80:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e84:	2100      	movs	r1, #0
 8004e86:	2201      	movs	r2, #1
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	db09      	blt.n	8004ea0 <__s2b+0x30>
 8004e8c:	4630      	mov	r0, r6
 8004e8e:	f7ff ff43 	bl	8004d18 <_Balloc>
 8004e92:	b940      	cbnz	r0, 8004ea6 <__s2b+0x36>
 8004e94:	4602      	mov	r2, r0
 8004e96:	4b19      	ldr	r3, [pc, #100]	; (8004efc <__s2b+0x8c>)
 8004e98:	4819      	ldr	r0, [pc, #100]	; (8004f00 <__s2b+0x90>)
 8004e9a:	21ce      	movs	r1, #206	; 0xce
 8004e9c:	f000 fc98 	bl	80057d0 <__assert_func>
 8004ea0:	0052      	lsls	r2, r2, #1
 8004ea2:	3101      	adds	r1, #1
 8004ea4:	e7f0      	b.n	8004e88 <__s2b+0x18>
 8004ea6:	9b08      	ldr	r3, [sp, #32]
 8004ea8:	6143      	str	r3, [r0, #20]
 8004eaa:	2d09      	cmp	r5, #9
 8004eac:	f04f 0301 	mov.w	r3, #1
 8004eb0:	6103      	str	r3, [r0, #16]
 8004eb2:	dd16      	ble.n	8004ee2 <__s2b+0x72>
 8004eb4:	f104 0909 	add.w	r9, r4, #9
 8004eb8:	46c8      	mov	r8, r9
 8004eba:	442c      	add	r4, r5
 8004ebc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8004ec0:	4601      	mov	r1, r0
 8004ec2:	3b30      	subs	r3, #48	; 0x30
 8004ec4:	220a      	movs	r2, #10
 8004ec6:	4630      	mov	r0, r6
 8004ec8:	f7ff ff88 	bl	8004ddc <__multadd>
 8004ecc:	45a0      	cmp	r8, r4
 8004ece:	d1f5      	bne.n	8004ebc <__s2b+0x4c>
 8004ed0:	f1a5 0408 	sub.w	r4, r5, #8
 8004ed4:	444c      	add	r4, r9
 8004ed6:	1b2d      	subs	r5, r5, r4
 8004ed8:	1963      	adds	r3, r4, r5
 8004eda:	42bb      	cmp	r3, r7
 8004edc:	db04      	blt.n	8004ee8 <__s2b+0x78>
 8004ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ee2:	340a      	adds	r4, #10
 8004ee4:	2509      	movs	r5, #9
 8004ee6:	e7f6      	b.n	8004ed6 <__s2b+0x66>
 8004ee8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004eec:	4601      	mov	r1, r0
 8004eee:	3b30      	subs	r3, #48	; 0x30
 8004ef0:	220a      	movs	r2, #10
 8004ef2:	4630      	mov	r0, r6
 8004ef4:	f7ff ff72 	bl	8004ddc <__multadd>
 8004ef8:	e7ee      	b.n	8004ed8 <__s2b+0x68>
 8004efa:	bf00      	nop
 8004efc:	08008d3d 	.word	0x08008d3d
 8004f00:	08008de3 	.word	0x08008de3

08004f04 <__hi0bits>:
 8004f04:	0c03      	lsrs	r3, r0, #16
 8004f06:	041b      	lsls	r3, r3, #16
 8004f08:	b9d3      	cbnz	r3, 8004f40 <__hi0bits+0x3c>
 8004f0a:	0400      	lsls	r0, r0, #16
 8004f0c:	2310      	movs	r3, #16
 8004f0e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004f12:	bf04      	itt	eq
 8004f14:	0200      	lsleq	r0, r0, #8
 8004f16:	3308      	addeq	r3, #8
 8004f18:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004f1c:	bf04      	itt	eq
 8004f1e:	0100      	lsleq	r0, r0, #4
 8004f20:	3304      	addeq	r3, #4
 8004f22:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004f26:	bf04      	itt	eq
 8004f28:	0080      	lsleq	r0, r0, #2
 8004f2a:	3302      	addeq	r3, #2
 8004f2c:	2800      	cmp	r0, #0
 8004f2e:	db05      	blt.n	8004f3c <__hi0bits+0x38>
 8004f30:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004f34:	f103 0301 	add.w	r3, r3, #1
 8004f38:	bf08      	it	eq
 8004f3a:	2320      	moveq	r3, #32
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	4770      	bx	lr
 8004f40:	2300      	movs	r3, #0
 8004f42:	e7e4      	b.n	8004f0e <__hi0bits+0xa>

08004f44 <__lo0bits>:
 8004f44:	6803      	ldr	r3, [r0, #0]
 8004f46:	f013 0207 	ands.w	r2, r3, #7
 8004f4a:	4601      	mov	r1, r0
 8004f4c:	d00b      	beq.n	8004f66 <__lo0bits+0x22>
 8004f4e:	07da      	lsls	r2, r3, #31
 8004f50:	d424      	bmi.n	8004f9c <__lo0bits+0x58>
 8004f52:	0798      	lsls	r0, r3, #30
 8004f54:	bf49      	itett	mi
 8004f56:	085b      	lsrmi	r3, r3, #1
 8004f58:	089b      	lsrpl	r3, r3, #2
 8004f5a:	2001      	movmi	r0, #1
 8004f5c:	600b      	strmi	r3, [r1, #0]
 8004f5e:	bf5c      	itt	pl
 8004f60:	600b      	strpl	r3, [r1, #0]
 8004f62:	2002      	movpl	r0, #2
 8004f64:	4770      	bx	lr
 8004f66:	b298      	uxth	r0, r3
 8004f68:	b9b0      	cbnz	r0, 8004f98 <__lo0bits+0x54>
 8004f6a:	0c1b      	lsrs	r3, r3, #16
 8004f6c:	2010      	movs	r0, #16
 8004f6e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004f72:	bf04      	itt	eq
 8004f74:	0a1b      	lsreq	r3, r3, #8
 8004f76:	3008      	addeq	r0, #8
 8004f78:	071a      	lsls	r2, r3, #28
 8004f7a:	bf04      	itt	eq
 8004f7c:	091b      	lsreq	r3, r3, #4
 8004f7e:	3004      	addeq	r0, #4
 8004f80:	079a      	lsls	r2, r3, #30
 8004f82:	bf04      	itt	eq
 8004f84:	089b      	lsreq	r3, r3, #2
 8004f86:	3002      	addeq	r0, #2
 8004f88:	07da      	lsls	r2, r3, #31
 8004f8a:	d403      	bmi.n	8004f94 <__lo0bits+0x50>
 8004f8c:	085b      	lsrs	r3, r3, #1
 8004f8e:	f100 0001 	add.w	r0, r0, #1
 8004f92:	d005      	beq.n	8004fa0 <__lo0bits+0x5c>
 8004f94:	600b      	str	r3, [r1, #0]
 8004f96:	4770      	bx	lr
 8004f98:	4610      	mov	r0, r2
 8004f9a:	e7e8      	b.n	8004f6e <__lo0bits+0x2a>
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	4770      	bx	lr
 8004fa0:	2020      	movs	r0, #32
 8004fa2:	4770      	bx	lr

08004fa4 <__i2b>:
 8004fa4:	b510      	push	{r4, lr}
 8004fa6:	460c      	mov	r4, r1
 8004fa8:	2101      	movs	r1, #1
 8004faa:	f7ff feb5 	bl	8004d18 <_Balloc>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	b928      	cbnz	r0, 8004fbe <__i2b+0x1a>
 8004fb2:	4b05      	ldr	r3, [pc, #20]	; (8004fc8 <__i2b+0x24>)
 8004fb4:	4805      	ldr	r0, [pc, #20]	; (8004fcc <__i2b+0x28>)
 8004fb6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004fba:	f000 fc09 	bl	80057d0 <__assert_func>
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	6144      	str	r4, [r0, #20]
 8004fc2:	6103      	str	r3, [r0, #16]
 8004fc4:	bd10      	pop	{r4, pc}
 8004fc6:	bf00      	nop
 8004fc8:	08008d3d 	.word	0x08008d3d
 8004fcc:	08008de3 	.word	0x08008de3

08004fd0 <__multiply>:
 8004fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fd4:	4614      	mov	r4, r2
 8004fd6:	690a      	ldr	r2, [r1, #16]
 8004fd8:	6923      	ldr	r3, [r4, #16]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	bfb8      	it	lt
 8004fde:	460b      	movlt	r3, r1
 8004fe0:	460d      	mov	r5, r1
 8004fe2:	bfbc      	itt	lt
 8004fe4:	4625      	movlt	r5, r4
 8004fe6:	461c      	movlt	r4, r3
 8004fe8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004fec:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004ff0:	68ab      	ldr	r3, [r5, #8]
 8004ff2:	6869      	ldr	r1, [r5, #4]
 8004ff4:	eb0a 0709 	add.w	r7, sl, r9
 8004ff8:	42bb      	cmp	r3, r7
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	bfb8      	it	lt
 8004ffe:	3101      	addlt	r1, #1
 8005000:	f7ff fe8a 	bl	8004d18 <_Balloc>
 8005004:	b930      	cbnz	r0, 8005014 <__multiply+0x44>
 8005006:	4602      	mov	r2, r0
 8005008:	4b42      	ldr	r3, [pc, #264]	; (8005114 <__multiply+0x144>)
 800500a:	4843      	ldr	r0, [pc, #268]	; (8005118 <__multiply+0x148>)
 800500c:	f240 115d 	movw	r1, #349	; 0x15d
 8005010:	f000 fbde 	bl	80057d0 <__assert_func>
 8005014:	f100 0614 	add.w	r6, r0, #20
 8005018:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800501c:	4633      	mov	r3, r6
 800501e:	2200      	movs	r2, #0
 8005020:	4543      	cmp	r3, r8
 8005022:	d31e      	bcc.n	8005062 <__multiply+0x92>
 8005024:	f105 0c14 	add.w	ip, r5, #20
 8005028:	f104 0314 	add.w	r3, r4, #20
 800502c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005030:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005034:	9202      	str	r2, [sp, #8]
 8005036:	ebac 0205 	sub.w	r2, ip, r5
 800503a:	3a15      	subs	r2, #21
 800503c:	f022 0203 	bic.w	r2, r2, #3
 8005040:	3204      	adds	r2, #4
 8005042:	f105 0115 	add.w	r1, r5, #21
 8005046:	458c      	cmp	ip, r1
 8005048:	bf38      	it	cc
 800504a:	2204      	movcc	r2, #4
 800504c:	9201      	str	r2, [sp, #4]
 800504e:	9a02      	ldr	r2, [sp, #8]
 8005050:	9303      	str	r3, [sp, #12]
 8005052:	429a      	cmp	r2, r3
 8005054:	d808      	bhi.n	8005068 <__multiply+0x98>
 8005056:	2f00      	cmp	r7, #0
 8005058:	dc55      	bgt.n	8005106 <__multiply+0x136>
 800505a:	6107      	str	r7, [r0, #16]
 800505c:	b005      	add	sp, #20
 800505e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005062:	f843 2b04 	str.w	r2, [r3], #4
 8005066:	e7db      	b.n	8005020 <__multiply+0x50>
 8005068:	f8b3 a000 	ldrh.w	sl, [r3]
 800506c:	f1ba 0f00 	cmp.w	sl, #0
 8005070:	d020      	beq.n	80050b4 <__multiply+0xe4>
 8005072:	f105 0e14 	add.w	lr, r5, #20
 8005076:	46b1      	mov	r9, r6
 8005078:	2200      	movs	r2, #0
 800507a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800507e:	f8d9 b000 	ldr.w	fp, [r9]
 8005082:	b2a1      	uxth	r1, r4
 8005084:	fa1f fb8b 	uxth.w	fp, fp
 8005088:	fb0a b101 	mla	r1, sl, r1, fp
 800508c:	4411      	add	r1, r2
 800508e:	f8d9 2000 	ldr.w	r2, [r9]
 8005092:	0c24      	lsrs	r4, r4, #16
 8005094:	0c12      	lsrs	r2, r2, #16
 8005096:	fb0a 2404 	mla	r4, sl, r4, r2
 800509a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800509e:	b289      	uxth	r1, r1
 80050a0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80050a4:	45f4      	cmp	ip, lr
 80050a6:	f849 1b04 	str.w	r1, [r9], #4
 80050aa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80050ae:	d8e4      	bhi.n	800507a <__multiply+0xaa>
 80050b0:	9901      	ldr	r1, [sp, #4]
 80050b2:	5072      	str	r2, [r6, r1]
 80050b4:	9a03      	ldr	r2, [sp, #12]
 80050b6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80050ba:	3304      	adds	r3, #4
 80050bc:	f1b9 0f00 	cmp.w	r9, #0
 80050c0:	d01f      	beq.n	8005102 <__multiply+0x132>
 80050c2:	6834      	ldr	r4, [r6, #0]
 80050c4:	f105 0114 	add.w	r1, r5, #20
 80050c8:	46b6      	mov	lr, r6
 80050ca:	f04f 0a00 	mov.w	sl, #0
 80050ce:	880a      	ldrh	r2, [r1, #0]
 80050d0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80050d4:	fb09 b202 	mla	r2, r9, r2, fp
 80050d8:	4492      	add	sl, r2
 80050da:	b2a4      	uxth	r4, r4
 80050dc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80050e0:	f84e 4b04 	str.w	r4, [lr], #4
 80050e4:	f851 4b04 	ldr.w	r4, [r1], #4
 80050e8:	f8be 2000 	ldrh.w	r2, [lr]
 80050ec:	0c24      	lsrs	r4, r4, #16
 80050ee:	fb09 2404 	mla	r4, r9, r4, r2
 80050f2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80050f6:	458c      	cmp	ip, r1
 80050f8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80050fc:	d8e7      	bhi.n	80050ce <__multiply+0xfe>
 80050fe:	9a01      	ldr	r2, [sp, #4]
 8005100:	50b4      	str	r4, [r6, r2]
 8005102:	3604      	adds	r6, #4
 8005104:	e7a3      	b.n	800504e <__multiply+0x7e>
 8005106:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1a5      	bne.n	800505a <__multiply+0x8a>
 800510e:	3f01      	subs	r7, #1
 8005110:	e7a1      	b.n	8005056 <__multiply+0x86>
 8005112:	bf00      	nop
 8005114:	08008d3d 	.word	0x08008d3d
 8005118:	08008de3 	.word	0x08008de3

0800511c <__pow5mult>:
 800511c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005120:	4615      	mov	r5, r2
 8005122:	f012 0203 	ands.w	r2, r2, #3
 8005126:	4606      	mov	r6, r0
 8005128:	460f      	mov	r7, r1
 800512a:	d007      	beq.n	800513c <__pow5mult+0x20>
 800512c:	4c25      	ldr	r4, [pc, #148]	; (80051c4 <__pow5mult+0xa8>)
 800512e:	3a01      	subs	r2, #1
 8005130:	2300      	movs	r3, #0
 8005132:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005136:	f7ff fe51 	bl	8004ddc <__multadd>
 800513a:	4607      	mov	r7, r0
 800513c:	10ad      	asrs	r5, r5, #2
 800513e:	d03d      	beq.n	80051bc <__pow5mult+0xa0>
 8005140:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005142:	b97c      	cbnz	r4, 8005164 <__pow5mult+0x48>
 8005144:	2010      	movs	r0, #16
 8005146:	f000 fb73 	bl	8005830 <malloc>
 800514a:	4602      	mov	r2, r0
 800514c:	6270      	str	r0, [r6, #36]	; 0x24
 800514e:	b928      	cbnz	r0, 800515c <__pow5mult+0x40>
 8005150:	4b1d      	ldr	r3, [pc, #116]	; (80051c8 <__pow5mult+0xac>)
 8005152:	481e      	ldr	r0, [pc, #120]	; (80051cc <__pow5mult+0xb0>)
 8005154:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005158:	f000 fb3a 	bl	80057d0 <__assert_func>
 800515c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005160:	6004      	str	r4, [r0, #0]
 8005162:	60c4      	str	r4, [r0, #12]
 8005164:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005168:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800516c:	b94c      	cbnz	r4, 8005182 <__pow5mult+0x66>
 800516e:	f240 2171 	movw	r1, #625	; 0x271
 8005172:	4630      	mov	r0, r6
 8005174:	f7ff ff16 	bl	8004fa4 <__i2b>
 8005178:	2300      	movs	r3, #0
 800517a:	f8c8 0008 	str.w	r0, [r8, #8]
 800517e:	4604      	mov	r4, r0
 8005180:	6003      	str	r3, [r0, #0]
 8005182:	f04f 0900 	mov.w	r9, #0
 8005186:	07eb      	lsls	r3, r5, #31
 8005188:	d50a      	bpl.n	80051a0 <__pow5mult+0x84>
 800518a:	4639      	mov	r1, r7
 800518c:	4622      	mov	r2, r4
 800518e:	4630      	mov	r0, r6
 8005190:	f7ff ff1e 	bl	8004fd0 <__multiply>
 8005194:	4639      	mov	r1, r7
 8005196:	4680      	mov	r8, r0
 8005198:	4630      	mov	r0, r6
 800519a:	f7ff fdfd 	bl	8004d98 <_Bfree>
 800519e:	4647      	mov	r7, r8
 80051a0:	106d      	asrs	r5, r5, #1
 80051a2:	d00b      	beq.n	80051bc <__pow5mult+0xa0>
 80051a4:	6820      	ldr	r0, [r4, #0]
 80051a6:	b938      	cbnz	r0, 80051b8 <__pow5mult+0x9c>
 80051a8:	4622      	mov	r2, r4
 80051aa:	4621      	mov	r1, r4
 80051ac:	4630      	mov	r0, r6
 80051ae:	f7ff ff0f 	bl	8004fd0 <__multiply>
 80051b2:	6020      	str	r0, [r4, #0]
 80051b4:	f8c0 9000 	str.w	r9, [r0]
 80051b8:	4604      	mov	r4, r0
 80051ba:	e7e4      	b.n	8005186 <__pow5mult+0x6a>
 80051bc:	4638      	mov	r0, r7
 80051be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051c2:	bf00      	nop
 80051c4:	08008f38 	.word	0x08008f38
 80051c8:	08008dcc 	.word	0x08008dcc
 80051cc:	08008de3 	.word	0x08008de3

080051d0 <__lshift>:
 80051d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051d4:	460c      	mov	r4, r1
 80051d6:	6849      	ldr	r1, [r1, #4]
 80051d8:	6923      	ldr	r3, [r4, #16]
 80051da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80051de:	68a3      	ldr	r3, [r4, #8]
 80051e0:	4607      	mov	r7, r0
 80051e2:	4691      	mov	r9, r2
 80051e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80051e8:	f108 0601 	add.w	r6, r8, #1
 80051ec:	42b3      	cmp	r3, r6
 80051ee:	db0b      	blt.n	8005208 <__lshift+0x38>
 80051f0:	4638      	mov	r0, r7
 80051f2:	f7ff fd91 	bl	8004d18 <_Balloc>
 80051f6:	4605      	mov	r5, r0
 80051f8:	b948      	cbnz	r0, 800520e <__lshift+0x3e>
 80051fa:	4602      	mov	r2, r0
 80051fc:	4b28      	ldr	r3, [pc, #160]	; (80052a0 <__lshift+0xd0>)
 80051fe:	4829      	ldr	r0, [pc, #164]	; (80052a4 <__lshift+0xd4>)
 8005200:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005204:	f000 fae4 	bl	80057d0 <__assert_func>
 8005208:	3101      	adds	r1, #1
 800520a:	005b      	lsls	r3, r3, #1
 800520c:	e7ee      	b.n	80051ec <__lshift+0x1c>
 800520e:	2300      	movs	r3, #0
 8005210:	f100 0114 	add.w	r1, r0, #20
 8005214:	f100 0210 	add.w	r2, r0, #16
 8005218:	4618      	mov	r0, r3
 800521a:	4553      	cmp	r3, sl
 800521c:	db33      	blt.n	8005286 <__lshift+0xb6>
 800521e:	6920      	ldr	r0, [r4, #16]
 8005220:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005224:	f104 0314 	add.w	r3, r4, #20
 8005228:	f019 091f 	ands.w	r9, r9, #31
 800522c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005230:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005234:	d02b      	beq.n	800528e <__lshift+0xbe>
 8005236:	f1c9 0e20 	rsb	lr, r9, #32
 800523a:	468a      	mov	sl, r1
 800523c:	2200      	movs	r2, #0
 800523e:	6818      	ldr	r0, [r3, #0]
 8005240:	fa00 f009 	lsl.w	r0, r0, r9
 8005244:	4302      	orrs	r2, r0
 8005246:	f84a 2b04 	str.w	r2, [sl], #4
 800524a:	f853 2b04 	ldr.w	r2, [r3], #4
 800524e:	459c      	cmp	ip, r3
 8005250:	fa22 f20e 	lsr.w	r2, r2, lr
 8005254:	d8f3      	bhi.n	800523e <__lshift+0x6e>
 8005256:	ebac 0304 	sub.w	r3, ip, r4
 800525a:	3b15      	subs	r3, #21
 800525c:	f023 0303 	bic.w	r3, r3, #3
 8005260:	3304      	adds	r3, #4
 8005262:	f104 0015 	add.w	r0, r4, #21
 8005266:	4584      	cmp	ip, r0
 8005268:	bf38      	it	cc
 800526a:	2304      	movcc	r3, #4
 800526c:	50ca      	str	r2, [r1, r3]
 800526e:	b10a      	cbz	r2, 8005274 <__lshift+0xa4>
 8005270:	f108 0602 	add.w	r6, r8, #2
 8005274:	3e01      	subs	r6, #1
 8005276:	4638      	mov	r0, r7
 8005278:	612e      	str	r6, [r5, #16]
 800527a:	4621      	mov	r1, r4
 800527c:	f7ff fd8c 	bl	8004d98 <_Bfree>
 8005280:	4628      	mov	r0, r5
 8005282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005286:	f842 0f04 	str.w	r0, [r2, #4]!
 800528a:	3301      	adds	r3, #1
 800528c:	e7c5      	b.n	800521a <__lshift+0x4a>
 800528e:	3904      	subs	r1, #4
 8005290:	f853 2b04 	ldr.w	r2, [r3], #4
 8005294:	f841 2f04 	str.w	r2, [r1, #4]!
 8005298:	459c      	cmp	ip, r3
 800529a:	d8f9      	bhi.n	8005290 <__lshift+0xc0>
 800529c:	e7ea      	b.n	8005274 <__lshift+0xa4>
 800529e:	bf00      	nop
 80052a0:	08008d3d 	.word	0x08008d3d
 80052a4:	08008de3 	.word	0x08008de3

080052a8 <__mcmp>:
 80052a8:	b530      	push	{r4, r5, lr}
 80052aa:	6902      	ldr	r2, [r0, #16]
 80052ac:	690c      	ldr	r4, [r1, #16]
 80052ae:	1b12      	subs	r2, r2, r4
 80052b0:	d10e      	bne.n	80052d0 <__mcmp+0x28>
 80052b2:	f100 0314 	add.w	r3, r0, #20
 80052b6:	3114      	adds	r1, #20
 80052b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80052bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80052c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80052c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80052c8:	42a5      	cmp	r5, r4
 80052ca:	d003      	beq.n	80052d4 <__mcmp+0x2c>
 80052cc:	d305      	bcc.n	80052da <__mcmp+0x32>
 80052ce:	2201      	movs	r2, #1
 80052d0:	4610      	mov	r0, r2
 80052d2:	bd30      	pop	{r4, r5, pc}
 80052d4:	4283      	cmp	r3, r0
 80052d6:	d3f3      	bcc.n	80052c0 <__mcmp+0x18>
 80052d8:	e7fa      	b.n	80052d0 <__mcmp+0x28>
 80052da:	f04f 32ff 	mov.w	r2, #4294967295
 80052de:	e7f7      	b.n	80052d0 <__mcmp+0x28>

080052e0 <__mdiff>:
 80052e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052e4:	460c      	mov	r4, r1
 80052e6:	4606      	mov	r6, r0
 80052e8:	4611      	mov	r1, r2
 80052ea:	4620      	mov	r0, r4
 80052ec:	4617      	mov	r7, r2
 80052ee:	f7ff ffdb 	bl	80052a8 <__mcmp>
 80052f2:	1e05      	subs	r5, r0, #0
 80052f4:	d110      	bne.n	8005318 <__mdiff+0x38>
 80052f6:	4629      	mov	r1, r5
 80052f8:	4630      	mov	r0, r6
 80052fa:	f7ff fd0d 	bl	8004d18 <_Balloc>
 80052fe:	b930      	cbnz	r0, 800530e <__mdiff+0x2e>
 8005300:	4b39      	ldr	r3, [pc, #228]	; (80053e8 <__mdiff+0x108>)
 8005302:	4602      	mov	r2, r0
 8005304:	f240 2132 	movw	r1, #562	; 0x232
 8005308:	4838      	ldr	r0, [pc, #224]	; (80053ec <__mdiff+0x10c>)
 800530a:	f000 fa61 	bl	80057d0 <__assert_func>
 800530e:	2301      	movs	r3, #1
 8005310:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005314:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005318:	bfa4      	itt	ge
 800531a:	463b      	movge	r3, r7
 800531c:	4627      	movge	r7, r4
 800531e:	4630      	mov	r0, r6
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	bfa6      	itte	ge
 8005324:	461c      	movge	r4, r3
 8005326:	2500      	movge	r5, #0
 8005328:	2501      	movlt	r5, #1
 800532a:	f7ff fcf5 	bl	8004d18 <_Balloc>
 800532e:	b920      	cbnz	r0, 800533a <__mdiff+0x5a>
 8005330:	4b2d      	ldr	r3, [pc, #180]	; (80053e8 <__mdiff+0x108>)
 8005332:	4602      	mov	r2, r0
 8005334:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005338:	e7e6      	b.n	8005308 <__mdiff+0x28>
 800533a:	693e      	ldr	r6, [r7, #16]
 800533c:	60c5      	str	r5, [r0, #12]
 800533e:	6925      	ldr	r5, [r4, #16]
 8005340:	f107 0114 	add.w	r1, r7, #20
 8005344:	f104 0914 	add.w	r9, r4, #20
 8005348:	f100 0e14 	add.w	lr, r0, #20
 800534c:	f107 0210 	add.w	r2, r7, #16
 8005350:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8005354:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8005358:	46f2      	mov	sl, lr
 800535a:	2700      	movs	r7, #0
 800535c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005360:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005364:	fa1f f883 	uxth.w	r8, r3
 8005368:	fa17 f78b 	uxtah	r7, r7, fp
 800536c:	0c1b      	lsrs	r3, r3, #16
 800536e:	eba7 0808 	sub.w	r8, r7, r8
 8005372:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005376:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800537a:	fa1f f888 	uxth.w	r8, r8
 800537e:	141f      	asrs	r7, r3, #16
 8005380:	454d      	cmp	r5, r9
 8005382:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005386:	f84a 3b04 	str.w	r3, [sl], #4
 800538a:	d8e7      	bhi.n	800535c <__mdiff+0x7c>
 800538c:	1b2b      	subs	r3, r5, r4
 800538e:	3b15      	subs	r3, #21
 8005390:	f023 0303 	bic.w	r3, r3, #3
 8005394:	3304      	adds	r3, #4
 8005396:	3415      	adds	r4, #21
 8005398:	42a5      	cmp	r5, r4
 800539a:	bf38      	it	cc
 800539c:	2304      	movcc	r3, #4
 800539e:	4419      	add	r1, r3
 80053a0:	4473      	add	r3, lr
 80053a2:	469e      	mov	lr, r3
 80053a4:	460d      	mov	r5, r1
 80053a6:	4565      	cmp	r5, ip
 80053a8:	d30e      	bcc.n	80053c8 <__mdiff+0xe8>
 80053aa:	f10c 0203 	add.w	r2, ip, #3
 80053ae:	1a52      	subs	r2, r2, r1
 80053b0:	f022 0203 	bic.w	r2, r2, #3
 80053b4:	3903      	subs	r1, #3
 80053b6:	458c      	cmp	ip, r1
 80053b8:	bf38      	it	cc
 80053ba:	2200      	movcc	r2, #0
 80053bc:	441a      	add	r2, r3
 80053be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80053c2:	b17b      	cbz	r3, 80053e4 <__mdiff+0x104>
 80053c4:	6106      	str	r6, [r0, #16]
 80053c6:	e7a5      	b.n	8005314 <__mdiff+0x34>
 80053c8:	f855 8b04 	ldr.w	r8, [r5], #4
 80053cc:	fa17 f488 	uxtah	r4, r7, r8
 80053d0:	1422      	asrs	r2, r4, #16
 80053d2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80053d6:	b2a4      	uxth	r4, r4
 80053d8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80053dc:	f84e 4b04 	str.w	r4, [lr], #4
 80053e0:	1417      	asrs	r7, r2, #16
 80053e2:	e7e0      	b.n	80053a6 <__mdiff+0xc6>
 80053e4:	3e01      	subs	r6, #1
 80053e6:	e7ea      	b.n	80053be <__mdiff+0xde>
 80053e8:	08008d3d 	.word	0x08008d3d
 80053ec:	08008de3 	.word	0x08008de3

080053f0 <__ulp>:
 80053f0:	b082      	sub	sp, #8
 80053f2:	ed8d 0b00 	vstr	d0, [sp]
 80053f6:	9b01      	ldr	r3, [sp, #4]
 80053f8:	4912      	ldr	r1, [pc, #72]	; (8005444 <__ulp+0x54>)
 80053fa:	4019      	ands	r1, r3
 80053fc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8005400:	2900      	cmp	r1, #0
 8005402:	dd05      	ble.n	8005410 <__ulp+0x20>
 8005404:	2200      	movs	r2, #0
 8005406:	460b      	mov	r3, r1
 8005408:	ec43 2b10 	vmov	d0, r2, r3
 800540c:	b002      	add	sp, #8
 800540e:	4770      	bx	lr
 8005410:	4249      	negs	r1, r1
 8005412:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8005416:	ea4f 5021 	mov.w	r0, r1, asr #20
 800541a:	f04f 0200 	mov.w	r2, #0
 800541e:	f04f 0300 	mov.w	r3, #0
 8005422:	da04      	bge.n	800542e <__ulp+0x3e>
 8005424:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8005428:	fa41 f300 	asr.w	r3, r1, r0
 800542c:	e7ec      	b.n	8005408 <__ulp+0x18>
 800542e:	f1a0 0114 	sub.w	r1, r0, #20
 8005432:	291e      	cmp	r1, #30
 8005434:	bfda      	itte	le
 8005436:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800543a:	fa20 f101 	lsrle.w	r1, r0, r1
 800543e:	2101      	movgt	r1, #1
 8005440:	460a      	mov	r2, r1
 8005442:	e7e1      	b.n	8005408 <__ulp+0x18>
 8005444:	7ff00000 	.word	0x7ff00000

08005448 <__b2d>:
 8005448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800544a:	6905      	ldr	r5, [r0, #16]
 800544c:	f100 0714 	add.w	r7, r0, #20
 8005450:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8005454:	1f2e      	subs	r6, r5, #4
 8005456:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800545a:	4620      	mov	r0, r4
 800545c:	f7ff fd52 	bl	8004f04 <__hi0bits>
 8005460:	f1c0 0320 	rsb	r3, r0, #32
 8005464:	280a      	cmp	r0, #10
 8005466:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80054e4 <__b2d+0x9c>
 800546a:	600b      	str	r3, [r1, #0]
 800546c:	dc14      	bgt.n	8005498 <__b2d+0x50>
 800546e:	f1c0 0e0b 	rsb	lr, r0, #11
 8005472:	fa24 f10e 	lsr.w	r1, r4, lr
 8005476:	42b7      	cmp	r7, r6
 8005478:	ea41 030c 	orr.w	r3, r1, ip
 800547c:	bf34      	ite	cc
 800547e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8005482:	2100      	movcs	r1, #0
 8005484:	3015      	adds	r0, #21
 8005486:	fa04 f000 	lsl.w	r0, r4, r0
 800548a:	fa21 f10e 	lsr.w	r1, r1, lr
 800548e:	ea40 0201 	orr.w	r2, r0, r1
 8005492:	ec43 2b10 	vmov	d0, r2, r3
 8005496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005498:	42b7      	cmp	r7, r6
 800549a:	bf3a      	itte	cc
 800549c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80054a0:	f1a5 0608 	subcc.w	r6, r5, #8
 80054a4:	2100      	movcs	r1, #0
 80054a6:	380b      	subs	r0, #11
 80054a8:	d017      	beq.n	80054da <__b2d+0x92>
 80054aa:	f1c0 0c20 	rsb	ip, r0, #32
 80054ae:	fa04 f500 	lsl.w	r5, r4, r0
 80054b2:	42be      	cmp	r6, r7
 80054b4:	fa21 f40c 	lsr.w	r4, r1, ip
 80054b8:	ea45 0504 	orr.w	r5, r5, r4
 80054bc:	bf8c      	ite	hi
 80054be:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80054c2:	2400      	movls	r4, #0
 80054c4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80054c8:	fa01 f000 	lsl.w	r0, r1, r0
 80054cc:	fa24 f40c 	lsr.w	r4, r4, ip
 80054d0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80054d4:	ea40 0204 	orr.w	r2, r0, r4
 80054d8:	e7db      	b.n	8005492 <__b2d+0x4a>
 80054da:	ea44 030c 	orr.w	r3, r4, ip
 80054de:	460a      	mov	r2, r1
 80054e0:	e7d7      	b.n	8005492 <__b2d+0x4a>
 80054e2:	bf00      	nop
 80054e4:	3ff00000 	.word	0x3ff00000

080054e8 <__d2b>:
 80054e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80054ec:	4689      	mov	r9, r1
 80054ee:	2101      	movs	r1, #1
 80054f0:	ec57 6b10 	vmov	r6, r7, d0
 80054f4:	4690      	mov	r8, r2
 80054f6:	f7ff fc0f 	bl	8004d18 <_Balloc>
 80054fa:	4604      	mov	r4, r0
 80054fc:	b930      	cbnz	r0, 800550c <__d2b+0x24>
 80054fe:	4602      	mov	r2, r0
 8005500:	4b25      	ldr	r3, [pc, #148]	; (8005598 <__d2b+0xb0>)
 8005502:	4826      	ldr	r0, [pc, #152]	; (800559c <__d2b+0xb4>)
 8005504:	f240 310a 	movw	r1, #778	; 0x30a
 8005508:	f000 f962 	bl	80057d0 <__assert_func>
 800550c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005510:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005514:	bb35      	cbnz	r5, 8005564 <__d2b+0x7c>
 8005516:	2e00      	cmp	r6, #0
 8005518:	9301      	str	r3, [sp, #4]
 800551a:	d028      	beq.n	800556e <__d2b+0x86>
 800551c:	4668      	mov	r0, sp
 800551e:	9600      	str	r6, [sp, #0]
 8005520:	f7ff fd10 	bl	8004f44 <__lo0bits>
 8005524:	9900      	ldr	r1, [sp, #0]
 8005526:	b300      	cbz	r0, 800556a <__d2b+0x82>
 8005528:	9a01      	ldr	r2, [sp, #4]
 800552a:	f1c0 0320 	rsb	r3, r0, #32
 800552e:	fa02 f303 	lsl.w	r3, r2, r3
 8005532:	430b      	orrs	r3, r1
 8005534:	40c2      	lsrs	r2, r0
 8005536:	6163      	str	r3, [r4, #20]
 8005538:	9201      	str	r2, [sp, #4]
 800553a:	9b01      	ldr	r3, [sp, #4]
 800553c:	61a3      	str	r3, [r4, #24]
 800553e:	2b00      	cmp	r3, #0
 8005540:	bf14      	ite	ne
 8005542:	2202      	movne	r2, #2
 8005544:	2201      	moveq	r2, #1
 8005546:	6122      	str	r2, [r4, #16]
 8005548:	b1d5      	cbz	r5, 8005580 <__d2b+0x98>
 800554a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800554e:	4405      	add	r5, r0
 8005550:	f8c9 5000 	str.w	r5, [r9]
 8005554:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005558:	f8c8 0000 	str.w	r0, [r8]
 800555c:	4620      	mov	r0, r4
 800555e:	b003      	add	sp, #12
 8005560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005564:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005568:	e7d5      	b.n	8005516 <__d2b+0x2e>
 800556a:	6161      	str	r1, [r4, #20]
 800556c:	e7e5      	b.n	800553a <__d2b+0x52>
 800556e:	a801      	add	r0, sp, #4
 8005570:	f7ff fce8 	bl	8004f44 <__lo0bits>
 8005574:	9b01      	ldr	r3, [sp, #4]
 8005576:	6163      	str	r3, [r4, #20]
 8005578:	2201      	movs	r2, #1
 800557a:	6122      	str	r2, [r4, #16]
 800557c:	3020      	adds	r0, #32
 800557e:	e7e3      	b.n	8005548 <__d2b+0x60>
 8005580:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005584:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005588:	f8c9 0000 	str.w	r0, [r9]
 800558c:	6918      	ldr	r0, [r3, #16]
 800558e:	f7ff fcb9 	bl	8004f04 <__hi0bits>
 8005592:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005596:	e7df      	b.n	8005558 <__d2b+0x70>
 8005598:	08008d3d 	.word	0x08008d3d
 800559c:	08008de3 	.word	0x08008de3

080055a0 <__ratio>:
 80055a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055a4:	4688      	mov	r8, r1
 80055a6:	4669      	mov	r1, sp
 80055a8:	4681      	mov	r9, r0
 80055aa:	f7ff ff4d 	bl	8005448 <__b2d>
 80055ae:	a901      	add	r1, sp, #4
 80055b0:	4640      	mov	r0, r8
 80055b2:	ec55 4b10 	vmov	r4, r5, d0
 80055b6:	f7ff ff47 	bl	8005448 <__b2d>
 80055ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80055be:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80055c2:	eba3 0c02 	sub.w	ip, r3, r2
 80055c6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80055ca:	1a9b      	subs	r3, r3, r2
 80055cc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80055d0:	ec51 0b10 	vmov	r0, r1, d0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	bfd6      	itet	le
 80055d8:	460a      	movle	r2, r1
 80055da:	462a      	movgt	r2, r5
 80055dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80055e0:	468b      	mov	fp, r1
 80055e2:	462f      	mov	r7, r5
 80055e4:	bfd4      	ite	le
 80055e6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80055ea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80055ee:	4620      	mov	r0, r4
 80055f0:	ee10 2a10 	vmov	r2, s0
 80055f4:	465b      	mov	r3, fp
 80055f6:	4639      	mov	r1, r7
 80055f8:	f7fb f928 	bl	800084c <__aeabi_ddiv>
 80055fc:	ec41 0b10 	vmov	d0, r0, r1
 8005600:	b003      	add	sp, #12
 8005602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005606 <__copybits>:
 8005606:	3901      	subs	r1, #1
 8005608:	b570      	push	{r4, r5, r6, lr}
 800560a:	1149      	asrs	r1, r1, #5
 800560c:	6914      	ldr	r4, [r2, #16]
 800560e:	3101      	adds	r1, #1
 8005610:	f102 0314 	add.w	r3, r2, #20
 8005614:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005618:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800561c:	1f05      	subs	r5, r0, #4
 800561e:	42a3      	cmp	r3, r4
 8005620:	d30c      	bcc.n	800563c <__copybits+0x36>
 8005622:	1aa3      	subs	r3, r4, r2
 8005624:	3b11      	subs	r3, #17
 8005626:	f023 0303 	bic.w	r3, r3, #3
 800562a:	3211      	adds	r2, #17
 800562c:	42a2      	cmp	r2, r4
 800562e:	bf88      	it	hi
 8005630:	2300      	movhi	r3, #0
 8005632:	4418      	add	r0, r3
 8005634:	2300      	movs	r3, #0
 8005636:	4288      	cmp	r0, r1
 8005638:	d305      	bcc.n	8005646 <__copybits+0x40>
 800563a:	bd70      	pop	{r4, r5, r6, pc}
 800563c:	f853 6b04 	ldr.w	r6, [r3], #4
 8005640:	f845 6f04 	str.w	r6, [r5, #4]!
 8005644:	e7eb      	b.n	800561e <__copybits+0x18>
 8005646:	f840 3b04 	str.w	r3, [r0], #4
 800564a:	e7f4      	b.n	8005636 <__copybits+0x30>

0800564c <__any_on>:
 800564c:	f100 0214 	add.w	r2, r0, #20
 8005650:	6900      	ldr	r0, [r0, #16]
 8005652:	114b      	asrs	r3, r1, #5
 8005654:	4298      	cmp	r0, r3
 8005656:	b510      	push	{r4, lr}
 8005658:	db11      	blt.n	800567e <__any_on+0x32>
 800565a:	dd0a      	ble.n	8005672 <__any_on+0x26>
 800565c:	f011 011f 	ands.w	r1, r1, #31
 8005660:	d007      	beq.n	8005672 <__any_on+0x26>
 8005662:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005666:	fa24 f001 	lsr.w	r0, r4, r1
 800566a:	fa00 f101 	lsl.w	r1, r0, r1
 800566e:	428c      	cmp	r4, r1
 8005670:	d10b      	bne.n	800568a <__any_on+0x3e>
 8005672:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005676:	4293      	cmp	r3, r2
 8005678:	d803      	bhi.n	8005682 <__any_on+0x36>
 800567a:	2000      	movs	r0, #0
 800567c:	bd10      	pop	{r4, pc}
 800567e:	4603      	mov	r3, r0
 8005680:	e7f7      	b.n	8005672 <__any_on+0x26>
 8005682:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005686:	2900      	cmp	r1, #0
 8005688:	d0f5      	beq.n	8005676 <__any_on+0x2a>
 800568a:	2001      	movs	r0, #1
 800568c:	e7f6      	b.n	800567c <__any_on+0x30>

0800568e <_calloc_r>:
 800568e:	b513      	push	{r0, r1, r4, lr}
 8005690:	434a      	muls	r2, r1
 8005692:	4611      	mov	r1, r2
 8005694:	9201      	str	r2, [sp, #4]
 8005696:	f000 f809 	bl	80056ac <_malloc_r>
 800569a:	4604      	mov	r4, r0
 800569c:	b118      	cbz	r0, 80056a6 <_calloc_r+0x18>
 800569e:	9a01      	ldr	r2, [sp, #4]
 80056a0:	2100      	movs	r1, #0
 80056a2:	f7fe f92d 	bl	8003900 <memset>
 80056a6:	4620      	mov	r0, r4
 80056a8:	b002      	add	sp, #8
 80056aa:	bd10      	pop	{r4, pc}

080056ac <_malloc_r>:
 80056ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ae:	1ccd      	adds	r5, r1, #3
 80056b0:	f025 0503 	bic.w	r5, r5, #3
 80056b4:	3508      	adds	r5, #8
 80056b6:	2d0c      	cmp	r5, #12
 80056b8:	bf38      	it	cc
 80056ba:	250c      	movcc	r5, #12
 80056bc:	2d00      	cmp	r5, #0
 80056be:	4606      	mov	r6, r0
 80056c0:	db01      	blt.n	80056c6 <_malloc_r+0x1a>
 80056c2:	42a9      	cmp	r1, r5
 80056c4:	d903      	bls.n	80056ce <_malloc_r+0x22>
 80056c6:	230c      	movs	r3, #12
 80056c8:	6033      	str	r3, [r6, #0]
 80056ca:	2000      	movs	r0, #0
 80056cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056ce:	f000 f8b7 	bl	8005840 <__malloc_lock>
 80056d2:	4921      	ldr	r1, [pc, #132]	; (8005758 <_malloc_r+0xac>)
 80056d4:	680a      	ldr	r2, [r1, #0]
 80056d6:	4614      	mov	r4, r2
 80056d8:	b99c      	cbnz	r4, 8005702 <_malloc_r+0x56>
 80056da:	4f20      	ldr	r7, [pc, #128]	; (800575c <_malloc_r+0xb0>)
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	b923      	cbnz	r3, 80056ea <_malloc_r+0x3e>
 80056e0:	4621      	mov	r1, r4
 80056e2:	4630      	mov	r0, r6
 80056e4:	f000 f844 	bl	8005770 <_sbrk_r>
 80056e8:	6038      	str	r0, [r7, #0]
 80056ea:	4629      	mov	r1, r5
 80056ec:	4630      	mov	r0, r6
 80056ee:	f000 f83f 	bl	8005770 <_sbrk_r>
 80056f2:	1c43      	adds	r3, r0, #1
 80056f4:	d123      	bne.n	800573e <_malloc_r+0x92>
 80056f6:	230c      	movs	r3, #12
 80056f8:	6033      	str	r3, [r6, #0]
 80056fa:	4630      	mov	r0, r6
 80056fc:	f000 f8a6 	bl	800584c <__malloc_unlock>
 8005700:	e7e3      	b.n	80056ca <_malloc_r+0x1e>
 8005702:	6823      	ldr	r3, [r4, #0]
 8005704:	1b5b      	subs	r3, r3, r5
 8005706:	d417      	bmi.n	8005738 <_malloc_r+0x8c>
 8005708:	2b0b      	cmp	r3, #11
 800570a:	d903      	bls.n	8005714 <_malloc_r+0x68>
 800570c:	6023      	str	r3, [r4, #0]
 800570e:	441c      	add	r4, r3
 8005710:	6025      	str	r5, [r4, #0]
 8005712:	e004      	b.n	800571e <_malloc_r+0x72>
 8005714:	6863      	ldr	r3, [r4, #4]
 8005716:	42a2      	cmp	r2, r4
 8005718:	bf0c      	ite	eq
 800571a:	600b      	streq	r3, [r1, #0]
 800571c:	6053      	strne	r3, [r2, #4]
 800571e:	4630      	mov	r0, r6
 8005720:	f000 f894 	bl	800584c <__malloc_unlock>
 8005724:	f104 000b 	add.w	r0, r4, #11
 8005728:	1d23      	adds	r3, r4, #4
 800572a:	f020 0007 	bic.w	r0, r0, #7
 800572e:	1ac2      	subs	r2, r0, r3
 8005730:	d0cc      	beq.n	80056cc <_malloc_r+0x20>
 8005732:	1a1b      	subs	r3, r3, r0
 8005734:	50a3      	str	r3, [r4, r2]
 8005736:	e7c9      	b.n	80056cc <_malloc_r+0x20>
 8005738:	4622      	mov	r2, r4
 800573a:	6864      	ldr	r4, [r4, #4]
 800573c:	e7cc      	b.n	80056d8 <_malloc_r+0x2c>
 800573e:	1cc4      	adds	r4, r0, #3
 8005740:	f024 0403 	bic.w	r4, r4, #3
 8005744:	42a0      	cmp	r0, r4
 8005746:	d0e3      	beq.n	8005710 <_malloc_r+0x64>
 8005748:	1a21      	subs	r1, r4, r0
 800574a:	4630      	mov	r0, r6
 800574c:	f000 f810 	bl	8005770 <_sbrk_r>
 8005750:	3001      	adds	r0, #1
 8005752:	d1dd      	bne.n	8005710 <_malloc_r+0x64>
 8005754:	e7cf      	b.n	80056f6 <_malloc_r+0x4a>
 8005756:	bf00      	nop
 8005758:	20000248 	.word	0x20000248
 800575c:	2000024c 	.word	0x2000024c

08005760 <nan>:
 8005760:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005768 <nan+0x8>
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	00000000 	.word	0x00000000
 800576c:	7ff80000 	.word	0x7ff80000

08005770 <_sbrk_r>:
 8005770:	b538      	push	{r3, r4, r5, lr}
 8005772:	4d06      	ldr	r5, [pc, #24]	; (800578c <_sbrk_r+0x1c>)
 8005774:	2300      	movs	r3, #0
 8005776:	4604      	mov	r4, r0
 8005778:	4608      	mov	r0, r1
 800577a:	602b      	str	r3, [r5, #0]
 800577c:	f7fc fc10 	bl	8001fa0 <_sbrk>
 8005780:	1c43      	adds	r3, r0, #1
 8005782:	d102      	bne.n	800578a <_sbrk_r+0x1a>
 8005784:	682b      	ldr	r3, [r5, #0]
 8005786:	b103      	cbz	r3, 800578a <_sbrk_r+0x1a>
 8005788:	6023      	str	r3, [r4, #0]
 800578a:	bd38      	pop	{r3, r4, r5, pc}
 800578c:	200002a8 	.word	0x200002a8

08005790 <strncmp>:
 8005790:	b510      	push	{r4, lr}
 8005792:	b16a      	cbz	r2, 80057b0 <strncmp+0x20>
 8005794:	3901      	subs	r1, #1
 8005796:	1884      	adds	r4, r0, r2
 8005798:	f810 3b01 	ldrb.w	r3, [r0], #1
 800579c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d103      	bne.n	80057ac <strncmp+0x1c>
 80057a4:	42a0      	cmp	r0, r4
 80057a6:	d001      	beq.n	80057ac <strncmp+0x1c>
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1f5      	bne.n	8005798 <strncmp+0x8>
 80057ac:	1a98      	subs	r0, r3, r2
 80057ae:	bd10      	pop	{r4, pc}
 80057b0:	4610      	mov	r0, r2
 80057b2:	e7fc      	b.n	80057ae <strncmp+0x1e>

080057b4 <__ascii_wctomb>:
 80057b4:	b149      	cbz	r1, 80057ca <__ascii_wctomb+0x16>
 80057b6:	2aff      	cmp	r2, #255	; 0xff
 80057b8:	bf85      	ittet	hi
 80057ba:	238a      	movhi	r3, #138	; 0x8a
 80057bc:	6003      	strhi	r3, [r0, #0]
 80057be:	700a      	strbls	r2, [r1, #0]
 80057c0:	f04f 30ff 	movhi.w	r0, #4294967295
 80057c4:	bf98      	it	ls
 80057c6:	2001      	movls	r0, #1
 80057c8:	4770      	bx	lr
 80057ca:	4608      	mov	r0, r1
 80057cc:	4770      	bx	lr
	...

080057d0 <__assert_func>:
 80057d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80057d2:	4614      	mov	r4, r2
 80057d4:	461a      	mov	r2, r3
 80057d6:	4b09      	ldr	r3, [pc, #36]	; (80057fc <__assert_func+0x2c>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4605      	mov	r5, r0
 80057dc:	68d8      	ldr	r0, [r3, #12]
 80057de:	b14c      	cbz	r4, 80057f4 <__assert_func+0x24>
 80057e0:	4b07      	ldr	r3, [pc, #28]	; (8005800 <__assert_func+0x30>)
 80057e2:	9100      	str	r1, [sp, #0]
 80057e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80057e8:	4906      	ldr	r1, [pc, #24]	; (8005804 <__assert_func+0x34>)
 80057ea:	462b      	mov	r3, r5
 80057ec:	f000 f80e 	bl	800580c <fiprintf>
 80057f0:	f000 fc30 	bl	8006054 <abort>
 80057f4:	4b04      	ldr	r3, [pc, #16]	; (8005808 <__assert_func+0x38>)
 80057f6:	461c      	mov	r4, r3
 80057f8:	e7f3      	b.n	80057e2 <__assert_func+0x12>
 80057fa:	bf00      	nop
 80057fc:	2000004c 	.word	0x2000004c
 8005800:	08008f44 	.word	0x08008f44
 8005804:	08008f51 	.word	0x08008f51
 8005808:	08008f7f 	.word	0x08008f7f

0800580c <fiprintf>:
 800580c:	b40e      	push	{r1, r2, r3}
 800580e:	b503      	push	{r0, r1, lr}
 8005810:	4601      	mov	r1, r0
 8005812:	ab03      	add	r3, sp, #12
 8005814:	4805      	ldr	r0, [pc, #20]	; (800582c <fiprintf+0x20>)
 8005816:	f853 2b04 	ldr.w	r2, [r3], #4
 800581a:	6800      	ldr	r0, [r0, #0]
 800581c:	9301      	str	r3, [sp, #4]
 800581e:	f000 f895 	bl	800594c <_vfiprintf_r>
 8005822:	b002      	add	sp, #8
 8005824:	f85d eb04 	ldr.w	lr, [sp], #4
 8005828:	b003      	add	sp, #12
 800582a:	4770      	bx	lr
 800582c:	2000004c 	.word	0x2000004c

08005830 <malloc>:
 8005830:	4b02      	ldr	r3, [pc, #8]	; (800583c <malloc+0xc>)
 8005832:	4601      	mov	r1, r0
 8005834:	6818      	ldr	r0, [r3, #0]
 8005836:	f7ff bf39 	b.w	80056ac <_malloc_r>
 800583a:	bf00      	nop
 800583c:	2000004c 	.word	0x2000004c

08005840 <__malloc_lock>:
 8005840:	4801      	ldr	r0, [pc, #4]	; (8005848 <__malloc_lock+0x8>)
 8005842:	f000 bdc7 	b.w	80063d4 <__retarget_lock_acquire_recursive>
 8005846:	bf00      	nop
 8005848:	200002b0 	.word	0x200002b0

0800584c <__malloc_unlock>:
 800584c:	4801      	ldr	r0, [pc, #4]	; (8005854 <__malloc_unlock+0x8>)
 800584e:	f000 bdc2 	b.w	80063d6 <__retarget_lock_release_recursive>
 8005852:	bf00      	nop
 8005854:	200002b0 	.word	0x200002b0

08005858 <_free_r>:
 8005858:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800585a:	2900      	cmp	r1, #0
 800585c:	d048      	beq.n	80058f0 <_free_r+0x98>
 800585e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005862:	9001      	str	r0, [sp, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	f1a1 0404 	sub.w	r4, r1, #4
 800586a:	bfb8      	it	lt
 800586c:	18e4      	addlt	r4, r4, r3
 800586e:	f7ff ffe7 	bl	8005840 <__malloc_lock>
 8005872:	4a20      	ldr	r2, [pc, #128]	; (80058f4 <_free_r+0x9c>)
 8005874:	9801      	ldr	r0, [sp, #4]
 8005876:	6813      	ldr	r3, [r2, #0]
 8005878:	4615      	mov	r5, r2
 800587a:	b933      	cbnz	r3, 800588a <_free_r+0x32>
 800587c:	6063      	str	r3, [r4, #4]
 800587e:	6014      	str	r4, [r2, #0]
 8005880:	b003      	add	sp, #12
 8005882:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005886:	f7ff bfe1 	b.w	800584c <__malloc_unlock>
 800588a:	42a3      	cmp	r3, r4
 800588c:	d90b      	bls.n	80058a6 <_free_r+0x4e>
 800588e:	6821      	ldr	r1, [r4, #0]
 8005890:	1862      	adds	r2, r4, r1
 8005892:	4293      	cmp	r3, r2
 8005894:	bf04      	itt	eq
 8005896:	681a      	ldreq	r2, [r3, #0]
 8005898:	685b      	ldreq	r3, [r3, #4]
 800589a:	6063      	str	r3, [r4, #4]
 800589c:	bf04      	itt	eq
 800589e:	1852      	addeq	r2, r2, r1
 80058a0:	6022      	streq	r2, [r4, #0]
 80058a2:	602c      	str	r4, [r5, #0]
 80058a4:	e7ec      	b.n	8005880 <_free_r+0x28>
 80058a6:	461a      	mov	r2, r3
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	b10b      	cbz	r3, 80058b0 <_free_r+0x58>
 80058ac:	42a3      	cmp	r3, r4
 80058ae:	d9fa      	bls.n	80058a6 <_free_r+0x4e>
 80058b0:	6811      	ldr	r1, [r2, #0]
 80058b2:	1855      	adds	r5, r2, r1
 80058b4:	42a5      	cmp	r5, r4
 80058b6:	d10b      	bne.n	80058d0 <_free_r+0x78>
 80058b8:	6824      	ldr	r4, [r4, #0]
 80058ba:	4421      	add	r1, r4
 80058bc:	1854      	adds	r4, r2, r1
 80058be:	42a3      	cmp	r3, r4
 80058c0:	6011      	str	r1, [r2, #0]
 80058c2:	d1dd      	bne.n	8005880 <_free_r+0x28>
 80058c4:	681c      	ldr	r4, [r3, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	6053      	str	r3, [r2, #4]
 80058ca:	4421      	add	r1, r4
 80058cc:	6011      	str	r1, [r2, #0]
 80058ce:	e7d7      	b.n	8005880 <_free_r+0x28>
 80058d0:	d902      	bls.n	80058d8 <_free_r+0x80>
 80058d2:	230c      	movs	r3, #12
 80058d4:	6003      	str	r3, [r0, #0]
 80058d6:	e7d3      	b.n	8005880 <_free_r+0x28>
 80058d8:	6825      	ldr	r5, [r4, #0]
 80058da:	1961      	adds	r1, r4, r5
 80058dc:	428b      	cmp	r3, r1
 80058de:	bf04      	itt	eq
 80058e0:	6819      	ldreq	r1, [r3, #0]
 80058e2:	685b      	ldreq	r3, [r3, #4]
 80058e4:	6063      	str	r3, [r4, #4]
 80058e6:	bf04      	itt	eq
 80058e8:	1949      	addeq	r1, r1, r5
 80058ea:	6021      	streq	r1, [r4, #0]
 80058ec:	6054      	str	r4, [r2, #4]
 80058ee:	e7c7      	b.n	8005880 <_free_r+0x28>
 80058f0:	b003      	add	sp, #12
 80058f2:	bd30      	pop	{r4, r5, pc}
 80058f4:	20000248 	.word	0x20000248

080058f8 <__sfputc_r>:
 80058f8:	6893      	ldr	r3, [r2, #8]
 80058fa:	3b01      	subs	r3, #1
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	b410      	push	{r4}
 8005900:	6093      	str	r3, [r2, #8]
 8005902:	da08      	bge.n	8005916 <__sfputc_r+0x1e>
 8005904:	6994      	ldr	r4, [r2, #24]
 8005906:	42a3      	cmp	r3, r4
 8005908:	db01      	blt.n	800590e <__sfputc_r+0x16>
 800590a:	290a      	cmp	r1, #10
 800590c:	d103      	bne.n	8005916 <__sfputc_r+0x1e>
 800590e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005912:	f000 badf 	b.w	8005ed4 <__swbuf_r>
 8005916:	6813      	ldr	r3, [r2, #0]
 8005918:	1c58      	adds	r0, r3, #1
 800591a:	6010      	str	r0, [r2, #0]
 800591c:	7019      	strb	r1, [r3, #0]
 800591e:	4608      	mov	r0, r1
 8005920:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005924:	4770      	bx	lr

08005926 <__sfputs_r>:
 8005926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005928:	4606      	mov	r6, r0
 800592a:	460f      	mov	r7, r1
 800592c:	4614      	mov	r4, r2
 800592e:	18d5      	adds	r5, r2, r3
 8005930:	42ac      	cmp	r4, r5
 8005932:	d101      	bne.n	8005938 <__sfputs_r+0x12>
 8005934:	2000      	movs	r0, #0
 8005936:	e007      	b.n	8005948 <__sfputs_r+0x22>
 8005938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800593c:	463a      	mov	r2, r7
 800593e:	4630      	mov	r0, r6
 8005940:	f7ff ffda 	bl	80058f8 <__sfputc_r>
 8005944:	1c43      	adds	r3, r0, #1
 8005946:	d1f3      	bne.n	8005930 <__sfputs_r+0xa>
 8005948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800594c <_vfiprintf_r>:
 800594c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005950:	460d      	mov	r5, r1
 8005952:	b09d      	sub	sp, #116	; 0x74
 8005954:	4614      	mov	r4, r2
 8005956:	4698      	mov	r8, r3
 8005958:	4606      	mov	r6, r0
 800595a:	b118      	cbz	r0, 8005964 <_vfiprintf_r+0x18>
 800595c:	6983      	ldr	r3, [r0, #24]
 800595e:	b90b      	cbnz	r3, 8005964 <_vfiprintf_r+0x18>
 8005960:	f000 fc9a 	bl	8006298 <__sinit>
 8005964:	4b89      	ldr	r3, [pc, #548]	; (8005b8c <_vfiprintf_r+0x240>)
 8005966:	429d      	cmp	r5, r3
 8005968:	d11b      	bne.n	80059a2 <_vfiprintf_r+0x56>
 800596a:	6875      	ldr	r5, [r6, #4]
 800596c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800596e:	07d9      	lsls	r1, r3, #31
 8005970:	d405      	bmi.n	800597e <_vfiprintf_r+0x32>
 8005972:	89ab      	ldrh	r3, [r5, #12]
 8005974:	059a      	lsls	r2, r3, #22
 8005976:	d402      	bmi.n	800597e <_vfiprintf_r+0x32>
 8005978:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800597a:	f000 fd2b 	bl	80063d4 <__retarget_lock_acquire_recursive>
 800597e:	89ab      	ldrh	r3, [r5, #12]
 8005980:	071b      	lsls	r3, r3, #28
 8005982:	d501      	bpl.n	8005988 <_vfiprintf_r+0x3c>
 8005984:	692b      	ldr	r3, [r5, #16]
 8005986:	b9eb      	cbnz	r3, 80059c4 <_vfiprintf_r+0x78>
 8005988:	4629      	mov	r1, r5
 800598a:	4630      	mov	r0, r6
 800598c:	f000 faf4 	bl	8005f78 <__swsetup_r>
 8005990:	b1c0      	cbz	r0, 80059c4 <_vfiprintf_r+0x78>
 8005992:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005994:	07dc      	lsls	r4, r3, #31
 8005996:	d50e      	bpl.n	80059b6 <_vfiprintf_r+0x6a>
 8005998:	f04f 30ff 	mov.w	r0, #4294967295
 800599c:	b01d      	add	sp, #116	; 0x74
 800599e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059a2:	4b7b      	ldr	r3, [pc, #492]	; (8005b90 <_vfiprintf_r+0x244>)
 80059a4:	429d      	cmp	r5, r3
 80059a6:	d101      	bne.n	80059ac <_vfiprintf_r+0x60>
 80059a8:	68b5      	ldr	r5, [r6, #8]
 80059aa:	e7df      	b.n	800596c <_vfiprintf_r+0x20>
 80059ac:	4b79      	ldr	r3, [pc, #484]	; (8005b94 <_vfiprintf_r+0x248>)
 80059ae:	429d      	cmp	r5, r3
 80059b0:	bf08      	it	eq
 80059b2:	68f5      	ldreq	r5, [r6, #12]
 80059b4:	e7da      	b.n	800596c <_vfiprintf_r+0x20>
 80059b6:	89ab      	ldrh	r3, [r5, #12]
 80059b8:	0598      	lsls	r0, r3, #22
 80059ba:	d4ed      	bmi.n	8005998 <_vfiprintf_r+0x4c>
 80059bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059be:	f000 fd0a 	bl	80063d6 <__retarget_lock_release_recursive>
 80059c2:	e7e9      	b.n	8005998 <_vfiprintf_r+0x4c>
 80059c4:	2300      	movs	r3, #0
 80059c6:	9309      	str	r3, [sp, #36]	; 0x24
 80059c8:	2320      	movs	r3, #32
 80059ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80059d2:	2330      	movs	r3, #48	; 0x30
 80059d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005b98 <_vfiprintf_r+0x24c>
 80059d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059dc:	f04f 0901 	mov.w	r9, #1
 80059e0:	4623      	mov	r3, r4
 80059e2:	469a      	mov	sl, r3
 80059e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059e8:	b10a      	cbz	r2, 80059ee <_vfiprintf_r+0xa2>
 80059ea:	2a25      	cmp	r2, #37	; 0x25
 80059ec:	d1f9      	bne.n	80059e2 <_vfiprintf_r+0x96>
 80059ee:	ebba 0b04 	subs.w	fp, sl, r4
 80059f2:	d00b      	beq.n	8005a0c <_vfiprintf_r+0xc0>
 80059f4:	465b      	mov	r3, fp
 80059f6:	4622      	mov	r2, r4
 80059f8:	4629      	mov	r1, r5
 80059fa:	4630      	mov	r0, r6
 80059fc:	f7ff ff93 	bl	8005926 <__sfputs_r>
 8005a00:	3001      	adds	r0, #1
 8005a02:	f000 80aa 	beq.w	8005b5a <_vfiprintf_r+0x20e>
 8005a06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a08:	445a      	add	r2, fp
 8005a0a:	9209      	str	r2, [sp, #36]	; 0x24
 8005a0c:	f89a 3000 	ldrb.w	r3, [sl]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f000 80a2 	beq.w	8005b5a <_vfiprintf_r+0x20e>
 8005a16:	2300      	movs	r3, #0
 8005a18:	f04f 32ff 	mov.w	r2, #4294967295
 8005a1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a20:	f10a 0a01 	add.w	sl, sl, #1
 8005a24:	9304      	str	r3, [sp, #16]
 8005a26:	9307      	str	r3, [sp, #28]
 8005a28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a2c:	931a      	str	r3, [sp, #104]	; 0x68
 8005a2e:	4654      	mov	r4, sl
 8005a30:	2205      	movs	r2, #5
 8005a32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a36:	4858      	ldr	r0, [pc, #352]	; (8005b98 <_vfiprintf_r+0x24c>)
 8005a38:	f7fa fbd2 	bl	80001e0 <memchr>
 8005a3c:	9a04      	ldr	r2, [sp, #16]
 8005a3e:	b9d8      	cbnz	r0, 8005a78 <_vfiprintf_r+0x12c>
 8005a40:	06d1      	lsls	r1, r2, #27
 8005a42:	bf44      	itt	mi
 8005a44:	2320      	movmi	r3, #32
 8005a46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a4a:	0713      	lsls	r3, r2, #28
 8005a4c:	bf44      	itt	mi
 8005a4e:	232b      	movmi	r3, #43	; 0x2b
 8005a50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a54:	f89a 3000 	ldrb.w	r3, [sl]
 8005a58:	2b2a      	cmp	r3, #42	; 0x2a
 8005a5a:	d015      	beq.n	8005a88 <_vfiprintf_r+0x13c>
 8005a5c:	9a07      	ldr	r2, [sp, #28]
 8005a5e:	4654      	mov	r4, sl
 8005a60:	2000      	movs	r0, #0
 8005a62:	f04f 0c0a 	mov.w	ip, #10
 8005a66:	4621      	mov	r1, r4
 8005a68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a6c:	3b30      	subs	r3, #48	; 0x30
 8005a6e:	2b09      	cmp	r3, #9
 8005a70:	d94e      	bls.n	8005b10 <_vfiprintf_r+0x1c4>
 8005a72:	b1b0      	cbz	r0, 8005aa2 <_vfiprintf_r+0x156>
 8005a74:	9207      	str	r2, [sp, #28]
 8005a76:	e014      	b.n	8005aa2 <_vfiprintf_r+0x156>
 8005a78:	eba0 0308 	sub.w	r3, r0, r8
 8005a7c:	fa09 f303 	lsl.w	r3, r9, r3
 8005a80:	4313      	orrs	r3, r2
 8005a82:	9304      	str	r3, [sp, #16]
 8005a84:	46a2      	mov	sl, r4
 8005a86:	e7d2      	b.n	8005a2e <_vfiprintf_r+0xe2>
 8005a88:	9b03      	ldr	r3, [sp, #12]
 8005a8a:	1d19      	adds	r1, r3, #4
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	9103      	str	r1, [sp, #12]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	bfbb      	ittet	lt
 8005a94:	425b      	neglt	r3, r3
 8005a96:	f042 0202 	orrlt.w	r2, r2, #2
 8005a9a:	9307      	strge	r3, [sp, #28]
 8005a9c:	9307      	strlt	r3, [sp, #28]
 8005a9e:	bfb8      	it	lt
 8005aa0:	9204      	strlt	r2, [sp, #16]
 8005aa2:	7823      	ldrb	r3, [r4, #0]
 8005aa4:	2b2e      	cmp	r3, #46	; 0x2e
 8005aa6:	d10c      	bne.n	8005ac2 <_vfiprintf_r+0x176>
 8005aa8:	7863      	ldrb	r3, [r4, #1]
 8005aaa:	2b2a      	cmp	r3, #42	; 0x2a
 8005aac:	d135      	bne.n	8005b1a <_vfiprintf_r+0x1ce>
 8005aae:	9b03      	ldr	r3, [sp, #12]
 8005ab0:	1d1a      	adds	r2, r3, #4
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	9203      	str	r2, [sp, #12]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	bfb8      	it	lt
 8005aba:	f04f 33ff 	movlt.w	r3, #4294967295
 8005abe:	3402      	adds	r4, #2
 8005ac0:	9305      	str	r3, [sp, #20]
 8005ac2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005ba8 <_vfiprintf_r+0x25c>
 8005ac6:	7821      	ldrb	r1, [r4, #0]
 8005ac8:	2203      	movs	r2, #3
 8005aca:	4650      	mov	r0, sl
 8005acc:	f7fa fb88 	bl	80001e0 <memchr>
 8005ad0:	b140      	cbz	r0, 8005ae4 <_vfiprintf_r+0x198>
 8005ad2:	2340      	movs	r3, #64	; 0x40
 8005ad4:	eba0 000a 	sub.w	r0, r0, sl
 8005ad8:	fa03 f000 	lsl.w	r0, r3, r0
 8005adc:	9b04      	ldr	r3, [sp, #16]
 8005ade:	4303      	orrs	r3, r0
 8005ae0:	3401      	adds	r4, #1
 8005ae2:	9304      	str	r3, [sp, #16]
 8005ae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ae8:	482c      	ldr	r0, [pc, #176]	; (8005b9c <_vfiprintf_r+0x250>)
 8005aea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005aee:	2206      	movs	r2, #6
 8005af0:	f7fa fb76 	bl	80001e0 <memchr>
 8005af4:	2800      	cmp	r0, #0
 8005af6:	d03f      	beq.n	8005b78 <_vfiprintf_r+0x22c>
 8005af8:	4b29      	ldr	r3, [pc, #164]	; (8005ba0 <_vfiprintf_r+0x254>)
 8005afa:	bb1b      	cbnz	r3, 8005b44 <_vfiprintf_r+0x1f8>
 8005afc:	9b03      	ldr	r3, [sp, #12]
 8005afe:	3307      	adds	r3, #7
 8005b00:	f023 0307 	bic.w	r3, r3, #7
 8005b04:	3308      	adds	r3, #8
 8005b06:	9303      	str	r3, [sp, #12]
 8005b08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b0a:	443b      	add	r3, r7
 8005b0c:	9309      	str	r3, [sp, #36]	; 0x24
 8005b0e:	e767      	b.n	80059e0 <_vfiprintf_r+0x94>
 8005b10:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b14:	460c      	mov	r4, r1
 8005b16:	2001      	movs	r0, #1
 8005b18:	e7a5      	b.n	8005a66 <_vfiprintf_r+0x11a>
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	3401      	adds	r4, #1
 8005b1e:	9305      	str	r3, [sp, #20]
 8005b20:	4619      	mov	r1, r3
 8005b22:	f04f 0c0a 	mov.w	ip, #10
 8005b26:	4620      	mov	r0, r4
 8005b28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b2c:	3a30      	subs	r2, #48	; 0x30
 8005b2e:	2a09      	cmp	r2, #9
 8005b30:	d903      	bls.n	8005b3a <_vfiprintf_r+0x1ee>
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d0c5      	beq.n	8005ac2 <_vfiprintf_r+0x176>
 8005b36:	9105      	str	r1, [sp, #20]
 8005b38:	e7c3      	b.n	8005ac2 <_vfiprintf_r+0x176>
 8005b3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b3e:	4604      	mov	r4, r0
 8005b40:	2301      	movs	r3, #1
 8005b42:	e7f0      	b.n	8005b26 <_vfiprintf_r+0x1da>
 8005b44:	ab03      	add	r3, sp, #12
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	462a      	mov	r2, r5
 8005b4a:	4b16      	ldr	r3, [pc, #88]	; (8005ba4 <_vfiprintf_r+0x258>)
 8005b4c:	a904      	add	r1, sp, #16
 8005b4e:	4630      	mov	r0, r6
 8005b50:	f3af 8000 	nop.w
 8005b54:	4607      	mov	r7, r0
 8005b56:	1c78      	adds	r0, r7, #1
 8005b58:	d1d6      	bne.n	8005b08 <_vfiprintf_r+0x1bc>
 8005b5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b5c:	07d9      	lsls	r1, r3, #31
 8005b5e:	d405      	bmi.n	8005b6c <_vfiprintf_r+0x220>
 8005b60:	89ab      	ldrh	r3, [r5, #12]
 8005b62:	059a      	lsls	r2, r3, #22
 8005b64:	d402      	bmi.n	8005b6c <_vfiprintf_r+0x220>
 8005b66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b68:	f000 fc35 	bl	80063d6 <__retarget_lock_release_recursive>
 8005b6c:	89ab      	ldrh	r3, [r5, #12]
 8005b6e:	065b      	lsls	r3, r3, #25
 8005b70:	f53f af12 	bmi.w	8005998 <_vfiprintf_r+0x4c>
 8005b74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b76:	e711      	b.n	800599c <_vfiprintf_r+0x50>
 8005b78:	ab03      	add	r3, sp, #12
 8005b7a:	9300      	str	r3, [sp, #0]
 8005b7c:	462a      	mov	r2, r5
 8005b7e:	4b09      	ldr	r3, [pc, #36]	; (8005ba4 <_vfiprintf_r+0x258>)
 8005b80:	a904      	add	r1, sp, #16
 8005b82:	4630      	mov	r0, r6
 8005b84:	f000 f880 	bl	8005c88 <_printf_i>
 8005b88:	e7e4      	b.n	8005b54 <_vfiprintf_r+0x208>
 8005b8a:	bf00      	nop
 8005b8c:	080090d4 	.word	0x080090d4
 8005b90:	080090f4 	.word	0x080090f4
 8005b94:	080090b4 	.word	0x080090b4
 8005b98:	08009081 	.word	0x08009081
 8005b9c:	0800908b 	.word	0x0800908b
 8005ba0:	00000000 	.word	0x00000000
 8005ba4:	08005927 	.word	0x08005927
 8005ba8:	08009087 	.word	0x08009087

08005bac <_printf_common>:
 8005bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bb0:	4616      	mov	r6, r2
 8005bb2:	4699      	mov	r9, r3
 8005bb4:	688a      	ldr	r2, [r1, #8]
 8005bb6:	690b      	ldr	r3, [r1, #16]
 8005bb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	bfb8      	it	lt
 8005bc0:	4613      	movlt	r3, r2
 8005bc2:	6033      	str	r3, [r6, #0]
 8005bc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bc8:	4607      	mov	r7, r0
 8005bca:	460c      	mov	r4, r1
 8005bcc:	b10a      	cbz	r2, 8005bd2 <_printf_common+0x26>
 8005bce:	3301      	adds	r3, #1
 8005bd0:	6033      	str	r3, [r6, #0]
 8005bd2:	6823      	ldr	r3, [r4, #0]
 8005bd4:	0699      	lsls	r1, r3, #26
 8005bd6:	bf42      	ittt	mi
 8005bd8:	6833      	ldrmi	r3, [r6, #0]
 8005bda:	3302      	addmi	r3, #2
 8005bdc:	6033      	strmi	r3, [r6, #0]
 8005bde:	6825      	ldr	r5, [r4, #0]
 8005be0:	f015 0506 	ands.w	r5, r5, #6
 8005be4:	d106      	bne.n	8005bf4 <_printf_common+0x48>
 8005be6:	f104 0a19 	add.w	sl, r4, #25
 8005bea:	68e3      	ldr	r3, [r4, #12]
 8005bec:	6832      	ldr	r2, [r6, #0]
 8005bee:	1a9b      	subs	r3, r3, r2
 8005bf0:	42ab      	cmp	r3, r5
 8005bf2:	dc26      	bgt.n	8005c42 <_printf_common+0x96>
 8005bf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005bf8:	1e13      	subs	r3, r2, #0
 8005bfa:	6822      	ldr	r2, [r4, #0]
 8005bfc:	bf18      	it	ne
 8005bfe:	2301      	movne	r3, #1
 8005c00:	0692      	lsls	r2, r2, #26
 8005c02:	d42b      	bmi.n	8005c5c <_printf_common+0xb0>
 8005c04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c08:	4649      	mov	r1, r9
 8005c0a:	4638      	mov	r0, r7
 8005c0c:	47c0      	blx	r8
 8005c0e:	3001      	adds	r0, #1
 8005c10:	d01e      	beq.n	8005c50 <_printf_common+0xa4>
 8005c12:	6823      	ldr	r3, [r4, #0]
 8005c14:	68e5      	ldr	r5, [r4, #12]
 8005c16:	6832      	ldr	r2, [r6, #0]
 8005c18:	f003 0306 	and.w	r3, r3, #6
 8005c1c:	2b04      	cmp	r3, #4
 8005c1e:	bf08      	it	eq
 8005c20:	1aad      	subeq	r5, r5, r2
 8005c22:	68a3      	ldr	r3, [r4, #8]
 8005c24:	6922      	ldr	r2, [r4, #16]
 8005c26:	bf0c      	ite	eq
 8005c28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c2c:	2500      	movne	r5, #0
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	bfc4      	itt	gt
 8005c32:	1a9b      	subgt	r3, r3, r2
 8005c34:	18ed      	addgt	r5, r5, r3
 8005c36:	2600      	movs	r6, #0
 8005c38:	341a      	adds	r4, #26
 8005c3a:	42b5      	cmp	r5, r6
 8005c3c:	d11a      	bne.n	8005c74 <_printf_common+0xc8>
 8005c3e:	2000      	movs	r0, #0
 8005c40:	e008      	b.n	8005c54 <_printf_common+0xa8>
 8005c42:	2301      	movs	r3, #1
 8005c44:	4652      	mov	r2, sl
 8005c46:	4649      	mov	r1, r9
 8005c48:	4638      	mov	r0, r7
 8005c4a:	47c0      	blx	r8
 8005c4c:	3001      	adds	r0, #1
 8005c4e:	d103      	bne.n	8005c58 <_printf_common+0xac>
 8005c50:	f04f 30ff 	mov.w	r0, #4294967295
 8005c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c58:	3501      	adds	r5, #1
 8005c5a:	e7c6      	b.n	8005bea <_printf_common+0x3e>
 8005c5c:	18e1      	adds	r1, r4, r3
 8005c5e:	1c5a      	adds	r2, r3, #1
 8005c60:	2030      	movs	r0, #48	; 0x30
 8005c62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c66:	4422      	add	r2, r4
 8005c68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c70:	3302      	adds	r3, #2
 8005c72:	e7c7      	b.n	8005c04 <_printf_common+0x58>
 8005c74:	2301      	movs	r3, #1
 8005c76:	4622      	mov	r2, r4
 8005c78:	4649      	mov	r1, r9
 8005c7a:	4638      	mov	r0, r7
 8005c7c:	47c0      	blx	r8
 8005c7e:	3001      	adds	r0, #1
 8005c80:	d0e6      	beq.n	8005c50 <_printf_common+0xa4>
 8005c82:	3601      	adds	r6, #1
 8005c84:	e7d9      	b.n	8005c3a <_printf_common+0x8e>
	...

08005c88 <_printf_i>:
 8005c88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c8c:	460c      	mov	r4, r1
 8005c8e:	4691      	mov	r9, r2
 8005c90:	7e27      	ldrb	r7, [r4, #24]
 8005c92:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005c94:	2f78      	cmp	r7, #120	; 0x78
 8005c96:	4680      	mov	r8, r0
 8005c98:	469a      	mov	sl, r3
 8005c9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c9e:	d807      	bhi.n	8005cb0 <_printf_i+0x28>
 8005ca0:	2f62      	cmp	r7, #98	; 0x62
 8005ca2:	d80a      	bhi.n	8005cba <_printf_i+0x32>
 8005ca4:	2f00      	cmp	r7, #0
 8005ca6:	f000 80d8 	beq.w	8005e5a <_printf_i+0x1d2>
 8005caa:	2f58      	cmp	r7, #88	; 0x58
 8005cac:	f000 80a3 	beq.w	8005df6 <_printf_i+0x16e>
 8005cb0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005cb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005cb8:	e03a      	b.n	8005d30 <_printf_i+0xa8>
 8005cba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005cbe:	2b15      	cmp	r3, #21
 8005cc0:	d8f6      	bhi.n	8005cb0 <_printf_i+0x28>
 8005cc2:	a001      	add	r0, pc, #4	; (adr r0, 8005cc8 <_printf_i+0x40>)
 8005cc4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005cc8:	08005d21 	.word	0x08005d21
 8005ccc:	08005d35 	.word	0x08005d35
 8005cd0:	08005cb1 	.word	0x08005cb1
 8005cd4:	08005cb1 	.word	0x08005cb1
 8005cd8:	08005cb1 	.word	0x08005cb1
 8005cdc:	08005cb1 	.word	0x08005cb1
 8005ce0:	08005d35 	.word	0x08005d35
 8005ce4:	08005cb1 	.word	0x08005cb1
 8005ce8:	08005cb1 	.word	0x08005cb1
 8005cec:	08005cb1 	.word	0x08005cb1
 8005cf0:	08005cb1 	.word	0x08005cb1
 8005cf4:	08005e41 	.word	0x08005e41
 8005cf8:	08005d65 	.word	0x08005d65
 8005cfc:	08005e23 	.word	0x08005e23
 8005d00:	08005cb1 	.word	0x08005cb1
 8005d04:	08005cb1 	.word	0x08005cb1
 8005d08:	08005e63 	.word	0x08005e63
 8005d0c:	08005cb1 	.word	0x08005cb1
 8005d10:	08005d65 	.word	0x08005d65
 8005d14:	08005cb1 	.word	0x08005cb1
 8005d18:	08005cb1 	.word	0x08005cb1
 8005d1c:	08005e2b 	.word	0x08005e2b
 8005d20:	680b      	ldr	r3, [r1, #0]
 8005d22:	1d1a      	adds	r2, r3, #4
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	600a      	str	r2, [r1, #0]
 8005d28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005d2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d30:	2301      	movs	r3, #1
 8005d32:	e0a3      	b.n	8005e7c <_printf_i+0x1f4>
 8005d34:	6825      	ldr	r5, [r4, #0]
 8005d36:	6808      	ldr	r0, [r1, #0]
 8005d38:	062e      	lsls	r6, r5, #24
 8005d3a:	f100 0304 	add.w	r3, r0, #4
 8005d3e:	d50a      	bpl.n	8005d56 <_printf_i+0xce>
 8005d40:	6805      	ldr	r5, [r0, #0]
 8005d42:	600b      	str	r3, [r1, #0]
 8005d44:	2d00      	cmp	r5, #0
 8005d46:	da03      	bge.n	8005d50 <_printf_i+0xc8>
 8005d48:	232d      	movs	r3, #45	; 0x2d
 8005d4a:	426d      	negs	r5, r5
 8005d4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d50:	485e      	ldr	r0, [pc, #376]	; (8005ecc <_printf_i+0x244>)
 8005d52:	230a      	movs	r3, #10
 8005d54:	e019      	b.n	8005d8a <_printf_i+0x102>
 8005d56:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005d5a:	6805      	ldr	r5, [r0, #0]
 8005d5c:	600b      	str	r3, [r1, #0]
 8005d5e:	bf18      	it	ne
 8005d60:	b22d      	sxthne	r5, r5
 8005d62:	e7ef      	b.n	8005d44 <_printf_i+0xbc>
 8005d64:	680b      	ldr	r3, [r1, #0]
 8005d66:	6825      	ldr	r5, [r4, #0]
 8005d68:	1d18      	adds	r0, r3, #4
 8005d6a:	6008      	str	r0, [r1, #0]
 8005d6c:	0628      	lsls	r0, r5, #24
 8005d6e:	d501      	bpl.n	8005d74 <_printf_i+0xec>
 8005d70:	681d      	ldr	r5, [r3, #0]
 8005d72:	e002      	b.n	8005d7a <_printf_i+0xf2>
 8005d74:	0669      	lsls	r1, r5, #25
 8005d76:	d5fb      	bpl.n	8005d70 <_printf_i+0xe8>
 8005d78:	881d      	ldrh	r5, [r3, #0]
 8005d7a:	4854      	ldr	r0, [pc, #336]	; (8005ecc <_printf_i+0x244>)
 8005d7c:	2f6f      	cmp	r7, #111	; 0x6f
 8005d7e:	bf0c      	ite	eq
 8005d80:	2308      	moveq	r3, #8
 8005d82:	230a      	movne	r3, #10
 8005d84:	2100      	movs	r1, #0
 8005d86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d8a:	6866      	ldr	r6, [r4, #4]
 8005d8c:	60a6      	str	r6, [r4, #8]
 8005d8e:	2e00      	cmp	r6, #0
 8005d90:	bfa2      	ittt	ge
 8005d92:	6821      	ldrge	r1, [r4, #0]
 8005d94:	f021 0104 	bicge.w	r1, r1, #4
 8005d98:	6021      	strge	r1, [r4, #0]
 8005d9a:	b90d      	cbnz	r5, 8005da0 <_printf_i+0x118>
 8005d9c:	2e00      	cmp	r6, #0
 8005d9e:	d04d      	beq.n	8005e3c <_printf_i+0x1b4>
 8005da0:	4616      	mov	r6, r2
 8005da2:	fbb5 f1f3 	udiv	r1, r5, r3
 8005da6:	fb03 5711 	mls	r7, r3, r1, r5
 8005daa:	5dc7      	ldrb	r7, [r0, r7]
 8005dac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005db0:	462f      	mov	r7, r5
 8005db2:	42bb      	cmp	r3, r7
 8005db4:	460d      	mov	r5, r1
 8005db6:	d9f4      	bls.n	8005da2 <_printf_i+0x11a>
 8005db8:	2b08      	cmp	r3, #8
 8005dba:	d10b      	bne.n	8005dd4 <_printf_i+0x14c>
 8005dbc:	6823      	ldr	r3, [r4, #0]
 8005dbe:	07df      	lsls	r7, r3, #31
 8005dc0:	d508      	bpl.n	8005dd4 <_printf_i+0x14c>
 8005dc2:	6923      	ldr	r3, [r4, #16]
 8005dc4:	6861      	ldr	r1, [r4, #4]
 8005dc6:	4299      	cmp	r1, r3
 8005dc8:	bfde      	ittt	le
 8005dca:	2330      	movle	r3, #48	; 0x30
 8005dcc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005dd0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005dd4:	1b92      	subs	r2, r2, r6
 8005dd6:	6122      	str	r2, [r4, #16]
 8005dd8:	f8cd a000 	str.w	sl, [sp]
 8005ddc:	464b      	mov	r3, r9
 8005dde:	aa03      	add	r2, sp, #12
 8005de0:	4621      	mov	r1, r4
 8005de2:	4640      	mov	r0, r8
 8005de4:	f7ff fee2 	bl	8005bac <_printf_common>
 8005de8:	3001      	adds	r0, #1
 8005dea:	d14c      	bne.n	8005e86 <_printf_i+0x1fe>
 8005dec:	f04f 30ff 	mov.w	r0, #4294967295
 8005df0:	b004      	add	sp, #16
 8005df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005df6:	4835      	ldr	r0, [pc, #212]	; (8005ecc <_printf_i+0x244>)
 8005df8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005dfc:	6823      	ldr	r3, [r4, #0]
 8005dfe:	680e      	ldr	r6, [r1, #0]
 8005e00:	061f      	lsls	r7, r3, #24
 8005e02:	f856 5b04 	ldr.w	r5, [r6], #4
 8005e06:	600e      	str	r6, [r1, #0]
 8005e08:	d514      	bpl.n	8005e34 <_printf_i+0x1ac>
 8005e0a:	07d9      	lsls	r1, r3, #31
 8005e0c:	bf44      	itt	mi
 8005e0e:	f043 0320 	orrmi.w	r3, r3, #32
 8005e12:	6023      	strmi	r3, [r4, #0]
 8005e14:	b91d      	cbnz	r5, 8005e1e <_printf_i+0x196>
 8005e16:	6823      	ldr	r3, [r4, #0]
 8005e18:	f023 0320 	bic.w	r3, r3, #32
 8005e1c:	6023      	str	r3, [r4, #0]
 8005e1e:	2310      	movs	r3, #16
 8005e20:	e7b0      	b.n	8005d84 <_printf_i+0xfc>
 8005e22:	6823      	ldr	r3, [r4, #0]
 8005e24:	f043 0320 	orr.w	r3, r3, #32
 8005e28:	6023      	str	r3, [r4, #0]
 8005e2a:	2378      	movs	r3, #120	; 0x78
 8005e2c:	4828      	ldr	r0, [pc, #160]	; (8005ed0 <_printf_i+0x248>)
 8005e2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e32:	e7e3      	b.n	8005dfc <_printf_i+0x174>
 8005e34:	065e      	lsls	r6, r3, #25
 8005e36:	bf48      	it	mi
 8005e38:	b2ad      	uxthmi	r5, r5
 8005e3a:	e7e6      	b.n	8005e0a <_printf_i+0x182>
 8005e3c:	4616      	mov	r6, r2
 8005e3e:	e7bb      	b.n	8005db8 <_printf_i+0x130>
 8005e40:	680b      	ldr	r3, [r1, #0]
 8005e42:	6826      	ldr	r6, [r4, #0]
 8005e44:	6960      	ldr	r0, [r4, #20]
 8005e46:	1d1d      	adds	r5, r3, #4
 8005e48:	600d      	str	r5, [r1, #0]
 8005e4a:	0635      	lsls	r5, r6, #24
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	d501      	bpl.n	8005e54 <_printf_i+0x1cc>
 8005e50:	6018      	str	r0, [r3, #0]
 8005e52:	e002      	b.n	8005e5a <_printf_i+0x1d2>
 8005e54:	0671      	lsls	r1, r6, #25
 8005e56:	d5fb      	bpl.n	8005e50 <_printf_i+0x1c8>
 8005e58:	8018      	strh	r0, [r3, #0]
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	6123      	str	r3, [r4, #16]
 8005e5e:	4616      	mov	r6, r2
 8005e60:	e7ba      	b.n	8005dd8 <_printf_i+0x150>
 8005e62:	680b      	ldr	r3, [r1, #0]
 8005e64:	1d1a      	adds	r2, r3, #4
 8005e66:	600a      	str	r2, [r1, #0]
 8005e68:	681e      	ldr	r6, [r3, #0]
 8005e6a:	6862      	ldr	r2, [r4, #4]
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	4630      	mov	r0, r6
 8005e70:	f7fa f9b6 	bl	80001e0 <memchr>
 8005e74:	b108      	cbz	r0, 8005e7a <_printf_i+0x1f2>
 8005e76:	1b80      	subs	r0, r0, r6
 8005e78:	6060      	str	r0, [r4, #4]
 8005e7a:	6863      	ldr	r3, [r4, #4]
 8005e7c:	6123      	str	r3, [r4, #16]
 8005e7e:	2300      	movs	r3, #0
 8005e80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e84:	e7a8      	b.n	8005dd8 <_printf_i+0x150>
 8005e86:	6923      	ldr	r3, [r4, #16]
 8005e88:	4632      	mov	r2, r6
 8005e8a:	4649      	mov	r1, r9
 8005e8c:	4640      	mov	r0, r8
 8005e8e:	47d0      	blx	sl
 8005e90:	3001      	adds	r0, #1
 8005e92:	d0ab      	beq.n	8005dec <_printf_i+0x164>
 8005e94:	6823      	ldr	r3, [r4, #0]
 8005e96:	079b      	lsls	r3, r3, #30
 8005e98:	d413      	bmi.n	8005ec2 <_printf_i+0x23a>
 8005e9a:	68e0      	ldr	r0, [r4, #12]
 8005e9c:	9b03      	ldr	r3, [sp, #12]
 8005e9e:	4298      	cmp	r0, r3
 8005ea0:	bfb8      	it	lt
 8005ea2:	4618      	movlt	r0, r3
 8005ea4:	e7a4      	b.n	8005df0 <_printf_i+0x168>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	4632      	mov	r2, r6
 8005eaa:	4649      	mov	r1, r9
 8005eac:	4640      	mov	r0, r8
 8005eae:	47d0      	blx	sl
 8005eb0:	3001      	adds	r0, #1
 8005eb2:	d09b      	beq.n	8005dec <_printf_i+0x164>
 8005eb4:	3501      	adds	r5, #1
 8005eb6:	68e3      	ldr	r3, [r4, #12]
 8005eb8:	9903      	ldr	r1, [sp, #12]
 8005eba:	1a5b      	subs	r3, r3, r1
 8005ebc:	42ab      	cmp	r3, r5
 8005ebe:	dcf2      	bgt.n	8005ea6 <_printf_i+0x21e>
 8005ec0:	e7eb      	b.n	8005e9a <_printf_i+0x212>
 8005ec2:	2500      	movs	r5, #0
 8005ec4:	f104 0619 	add.w	r6, r4, #25
 8005ec8:	e7f5      	b.n	8005eb6 <_printf_i+0x22e>
 8005eca:	bf00      	nop
 8005ecc:	08009092 	.word	0x08009092
 8005ed0:	080090a3 	.word	0x080090a3

08005ed4 <__swbuf_r>:
 8005ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed6:	460e      	mov	r6, r1
 8005ed8:	4614      	mov	r4, r2
 8005eda:	4605      	mov	r5, r0
 8005edc:	b118      	cbz	r0, 8005ee6 <__swbuf_r+0x12>
 8005ede:	6983      	ldr	r3, [r0, #24]
 8005ee0:	b90b      	cbnz	r3, 8005ee6 <__swbuf_r+0x12>
 8005ee2:	f000 f9d9 	bl	8006298 <__sinit>
 8005ee6:	4b21      	ldr	r3, [pc, #132]	; (8005f6c <__swbuf_r+0x98>)
 8005ee8:	429c      	cmp	r4, r3
 8005eea:	d12b      	bne.n	8005f44 <__swbuf_r+0x70>
 8005eec:	686c      	ldr	r4, [r5, #4]
 8005eee:	69a3      	ldr	r3, [r4, #24]
 8005ef0:	60a3      	str	r3, [r4, #8]
 8005ef2:	89a3      	ldrh	r3, [r4, #12]
 8005ef4:	071a      	lsls	r2, r3, #28
 8005ef6:	d52f      	bpl.n	8005f58 <__swbuf_r+0x84>
 8005ef8:	6923      	ldr	r3, [r4, #16]
 8005efa:	b36b      	cbz	r3, 8005f58 <__swbuf_r+0x84>
 8005efc:	6923      	ldr	r3, [r4, #16]
 8005efe:	6820      	ldr	r0, [r4, #0]
 8005f00:	1ac0      	subs	r0, r0, r3
 8005f02:	6963      	ldr	r3, [r4, #20]
 8005f04:	b2f6      	uxtb	r6, r6
 8005f06:	4283      	cmp	r3, r0
 8005f08:	4637      	mov	r7, r6
 8005f0a:	dc04      	bgt.n	8005f16 <__swbuf_r+0x42>
 8005f0c:	4621      	mov	r1, r4
 8005f0e:	4628      	mov	r0, r5
 8005f10:	f000 f92e 	bl	8006170 <_fflush_r>
 8005f14:	bb30      	cbnz	r0, 8005f64 <__swbuf_r+0x90>
 8005f16:	68a3      	ldr	r3, [r4, #8]
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	60a3      	str	r3, [r4, #8]
 8005f1c:	6823      	ldr	r3, [r4, #0]
 8005f1e:	1c5a      	adds	r2, r3, #1
 8005f20:	6022      	str	r2, [r4, #0]
 8005f22:	701e      	strb	r6, [r3, #0]
 8005f24:	6963      	ldr	r3, [r4, #20]
 8005f26:	3001      	adds	r0, #1
 8005f28:	4283      	cmp	r3, r0
 8005f2a:	d004      	beq.n	8005f36 <__swbuf_r+0x62>
 8005f2c:	89a3      	ldrh	r3, [r4, #12]
 8005f2e:	07db      	lsls	r3, r3, #31
 8005f30:	d506      	bpl.n	8005f40 <__swbuf_r+0x6c>
 8005f32:	2e0a      	cmp	r6, #10
 8005f34:	d104      	bne.n	8005f40 <__swbuf_r+0x6c>
 8005f36:	4621      	mov	r1, r4
 8005f38:	4628      	mov	r0, r5
 8005f3a:	f000 f919 	bl	8006170 <_fflush_r>
 8005f3e:	b988      	cbnz	r0, 8005f64 <__swbuf_r+0x90>
 8005f40:	4638      	mov	r0, r7
 8005f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f44:	4b0a      	ldr	r3, [pc, #40]	; (8005f70 <__swbuf_r+0x9c>)
 8005f46:	429c      	cmp	r4, r3
 8005f48:	d101      	bne.n	8005f4e <__swbuf_r+0x7a>
 8005f4a:	68ac      	ldr	r4, [r5, #8]
 8005f4c:	e7cf      	b.n	8005eee <__swbuf_r+0x1a>
 8005f4e:	4b09      	ldr	r3, [pc, #36]	; (8005f74 <__swbuf_r+0xa0>)
 8005f50:	429c      	cmp	r4, r3
 8005f52:	bf08      	it	eq
 8005f54:	68ec      	ldreq	r4, [r5, #12]
 8005f56:	e7ca      	b.n	8005eee <__swbuf_r+0x1a>
 8005f58:	4621      	mov	r1, r4
 8005f5a:	4628      	mov	r0, r5
 8005f5c:	f000 f80c 	bl	8005f78 <__swsetup_r>
 8005f60:	2800      	cmp	r0, #0
 8005f62:	d0cb      	beq.n	8005efc <__swbuf_r+0x28>
 8005f64:	f04f 37ff 	mov.w	r7, #4294967295
 8005f68:	e7ea      	b.n	8005f40 <__swbuf_r+0x6c>
 8005f6a:	bf00      	nop
 8005f6c:	080090d4 	.word	0x080090d4
 8005f70:	080090f4 	.word	0x080090f4
 8005f74:	080090b4 	.word	0x080090b4

08005f78 <__swsetup_r>:
 8005f78:	4b32      	ldr	r3, [pc, #200]	; (8006044 <__swsetup_r+0xcc>)
 8005f7a:	b570      	push	{r4, r5, r6, lr}
 8005f7c:	681d      	ldr	r5, [r3, #0]
 8005f7e:	4606      	mov	r6, r0
 8005f80:	460c      	mov	r4, r1
 8005f82:	b125      	cbz	r5, 8005f8e <__swsetup_r+0x16>
 8005f84:	69ab      	ldr	r3, [r5, #24]
 8005f86:	b913      	cbnz	r3, 8005f8e <__swsetup_r+0x16>
 8005f88:	4628      	mov	r0, r5
 8005f8a:	f000 f985 	bl	8006298 <__sinit>
 8005f8e:	4b2e      	ldr	r3, [pc, #184]	; (8006048 <__swsetup_r+0xd0>)
 8005f90:	429c      	cmp	r4, r3
 8005f92:	d10f      	bne.n	8005fb4 <__swsetup_r+0x3c>
 8005f94:	686c      	ldr	r4, [r5, #4]
 8005f96:	89a3      	ldrh	r3, [r4, #12]
 8005f98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f9c:	0719      	lsls	r1, r3, #28
 8005f9e:	d42c      	bmi.n	8005ffa <__swsetup_r+0x82>
 8005fa0:	06dd      	lsls	r5, r3, #27
 8005fa2:	d411      	bmi.n	8005fc8 <__swsetup_r+0x50>
 8005fa4:	2309      	movs	r3, #9
 8005fa6:	6033      	str	r3, [r6, #0]
 8005fa8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005fac:	81a3      	strh	r3, [r4, #12]
 8005fae:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb2:	e03e      	b.n	8006032 <__swsetup_r+0xba>
 8005fb4:	4b25      	ldr	r3, [pc, #148]	; (800604c <__swsetup_r+0xd4>)
 8005fb6:	429c      	cmp	r4, r3
 8005fb8:	d101      	bne.n	8005fbe <__swsetup_r+0x46>
 8005fba:	68ac      	ldr	r4, [r5, #8]
 8005fbc:	e7eb      	b.n	8005f96 <__swsetup_r+0x1e>
 8005fbe:	4b24      	ldr	r3, [pc, #144]	; (8006050 <__swsetup_r+0xd8>)
 8005fc0:	429c      	cmp	r4, r3
 8005fc2:	bf08      	it	eq
 8005fc4:	68ec      	ldreq	r4, [r5, #12]
 8005fc6:	e7e6      	b.n	8005f96 <__swsetup_r+0x1e>
 8005fc8:	0758      	lsls	r0, r3, #29
 8005fca:	d512      	bpl.n	8005ff2 <__swsetup_r+0x7a>
 8005fcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fce:	b141      	cbz	r1, 8005fe2 <__swsetup_r+0x6a>
 8005fd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fd4:	4299      	cmp	r1, r3
 8005fd6:	d002      	beq.n	8005fde <__swsetup_r+0x66>
 8005fd8:	4630      	mov	r0, r6
 8005fda:	f7ff fc3d 	bl	8005858 <_free_r>
 8005fde:	2300      	movs	r3, #0
 8005fe0:	6363      	str	r3, [r4, #52]	; 0x34
 8005fe2:	89a3      	ldrh	r3, [r4, #12]
 8005fe4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005fe8:	81a3      	strh	r3, [r4, #12]
 8005fea:	2300      	movs	r3, #0
 8005fec:	6063      	str	r3, [r4, #4]
 8005fee:	6923      	ldr	r3, [r4, #16]
 8005ff0:	6023      	str	r3, [r4, #0]
 8005ff2:	89a3      	ldrh	r3, [r4, #12]
 8005ff4:	f043 0308 	orr.w	r3, r3, #8
 8005ff8:	81a3      	strh	r3, [r4, #12]
 8005ffa:	6923      	ldr	r3, [r4, #16]
 8005ffc:	b94b      	cbnz	r3, 8006012 <__swsetup_r+0x9a>
 8005ffe:	89a3      	ldrh	r3, [r4, #12]
 8006000:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006008:	d003      	beq.n	8006012 <__swsetup_r+0x9a>
 800600a:	4621      	mov	r1, r4
 800600c:	4630      	mov	r0, r6
 800600e:	f000 fa07 	bl	8006420 <__smakebuf_r>
 8006012:	89a0      	ldrh	r0, [r4, #12]
 8006014:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006018:	f010 0301 	ands.w	r3, r0, #1
 800601c:	d00a      	beq.n	8006034 <__swsetup_r+0xbc>
 800601e:	2300      	movs	r3, #0
 8006020:	60a3      	str	r3, [r4, #8]
 8006022:	6963      	ldr	r3, [r4, #20]
 8006024:	425b      	negs	r3, r3
 8006026:	61a3      	str	r3, [r4, #24]
 8006028:	6923      	ldr	r3, [r4, #16]
 800602a:	b943      	cbnz	r3, 800603e <__swsetup_r+0xc6>
 800602c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006030:	d1ba      	bne.n	8005fa8 <__swsetup_r+0x30>
 8006032:	bd70      	pop	{r4, r5, r6, pc}
 8006034:	0781      	lsls	r1, r0, #30
 8006036:	bf58      	it	pl
 8006038:	6963      	ldrpl	r3, [r4, #20]
 800603a:	60a3      	str	r3, [r4, #8]
 800603c:	e7f4      	b.n	8006028 <__swsetup_r+0xb0>
 800603e:	2000      	movs	r0, #0
 8006040:	e7f7      	b.n	8006032 <__swsetup_r+0xba>
 8006042:	bf00      	nop
 8006044:	2000004c 	.word	0x2000004c
 8006048:	080090d4 	.word	0x080090d4
 800604c:	080090f4 	.word	0x080090f4
 8006050:	080090b4 	.word	0x080090b4

08006054 <abort>:
 8006054:	b508      	push	{r3, lr}
 8006056:	2006      	movs	r0, #6
 8006058:	f000 fa4a 	bl	80064f0 <raise>
 800605c:	2001      	movs	r0, #1
 800605e:	f7fb ff27 	bl	8001eb0 <_exit>
	...

08006064 <__sflush_r>:
 8006064:	898a      	ldrh	r2, [r1, #12]
 8006066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800606a:	4605      	mov	r5, r0
 800606c:	0710      	lsls	r0, r2, #28
 800606e:	460c      	mov	r4, r1
 8006070:	d458      	bmi.n	8006124 <__sflush_r+0xc0>
 8006072:	684b      	ldr	r3, [r1, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	dc05      	bgt.n	8006084 <__sflush_r+0x20>
 8006078:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800607a:	2b00      	cmp	r3, #0
 800607c:	dc02      	bgt.n	8006084 <__sflush_r+0x20>
 800607e:	2000      	movs	r0, #0
 8006080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006084:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006086:	2e00      	cmp	r6, #0
 8006088:	d0f9      	beq.n	800607e <__sflush_r+0x1a>
 800608a:	2300      	movs	r3, #0
 800608c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006090:	682f      	ldr	r7, [r5, #0]
 8006092:	602b      	str	r3, [r5, #0]
 8006094:	d032      	beq.n	80060fc <__sflush_r+0x98>
 8006096:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006098:	89a3      	ldrh	r3, [r4, #12]
 800609a:	075a      	lsls	r2, r3, #29
 800609c:	d505      	bpl.n	80060aa <__sflush_r+0x46>
 800609e:	6863      	ldr	r3, [r4, #4]
 80060a0:	1ac0      	subs	r0, r0, r3
 80060a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80060a4:	b10b      	cbz	r3, 80060aa <__sflush_r+0x46>
 80060a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060a8:	1ac0      	subs	r0, r0, r3
 80060aa:	2300      	movs	r3, #0
 80060ac:	4602      	mov	r2, r0
 80060ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060b0:	6a21      	ldr	r1, [r4, #32]
 80060b2:	4628      	mov	r0, r5
 80060b4:	47b0      	blx	r6
 80060b6:	1c43      	adds	r3, r0, #1
 80060b8:	89a3      	ldrh	r3, [r4, #12]
 80060ba:	d106      	bne.n	80060ca <__sflush_r+0x66>
 80060bc:	6829      	ldr	r1, [r5, #0]
 80060be:	291d      	cmp	r1, #29
 80060c0:	d82c      	bhi.n	800611c <__sflush_r+0xb8>
 80060c2:	4a2a      	ldr	r2, [pc, #168]	; (800616c <__sflush_r+0x108>)
 80060c4:	40ca      	lsrs	r2, r1
 80060c6:	07d6      	lsls	r6, r2, #31
 80060c8:	d528      	bpl.n	800611c <__sflush_r+0xb8>
 80060ca:	2200      	movs	r2, #0
 80060cc:	6062      	str	r2, [r4, #4]
 80060ce:	04d9      	lsls	r1, r3, #19
 80060d0:	6922      	ldr	r2, [r4, #16]
 80060d2:	6022      	str	r2, [r4, #0]
 80060d4:	d504      	bpl.n	80060e0 <__sflush_r+0x7c>
 80060d6:	1c42      	adds	r2, r0, #1
 80060d8:	d101      	bne.n	80060de <__sflush_r+0x7a>
 80060da:	682b      	ldr	r3, [r5, #0]
 80060dc:	b903      	cbnz	r3, 80060e0 <__sflush_r+0x7c>
 80060de:	6560      	str	r0, [r4, #84]	; 0x54
 80060e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060e2:	602f      	str	r7, [r5, #0]
 80060e4:	2900      	cmp	r1, #0
 80060e6:	d0ca      	beq.n	800607e <__sflush_r+0x1a>
 80060e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060ec:	4299      	cmp	r1, r3
 80060ee:	d002      	beq.n	80060f6 <__sflush_r+0x92>
 80060f0:	4628      	mov	r0, r5
 80060f2:	f7ff fbb1 	bl	8005858 <_free_r>
 80060f6:	2000      	movs	r0, #0
 80060f8:	6360      	str	r0, [r4, #52]	; 0x34
 80060fa:	e7c1      	b.n	8006080 <__sflush_r+0x1c>
 80060fc:	6a21      	ldr	r1, [r4, #32]
 80060fe:	2301      	movs	r3, #1
 8006100:	4628      	mov	r0, r5
 8006102:	47b0      	blx	r6
 8006104:	1c41      	adds	r1, r0, #1
 8006106:	d1c7      	bne.n	8006098 <__sflush_r+0x34>
 8006108:	682b      	ldr	r3, [r5, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d0c4      	beq.n	8006098 <__sflush_r+0x34>
 800610e:	2b1d      	cmp	r3, #29
 8006110:	d001      	beq.n	8006116 <__sflush_r+0xb2>
 8006112:	2b16      	cmp	r3, #22
 8006114:	d101      	bne.n	800611a <__sflush_r+0xb6>
 8006116:	602f      	str	r7, [r5, #0]
 8006118:	e7b1      	b.n	800607e <__sflush_r+0x1a>
 800611a:	89a3      	ldrh	r3, [r4, #12]
 800611c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006120:	81a3      	strh	r3, [r4, #12]
 8006122:	e7ad      	b.n	8006080 <__sflush_r+0x1c>
 8006124:	690f      	ldr	r7, [r1, #16]
 8006126:	2f00      	cmp	r7, #0
 8006128:	d0a9      	beq.n	800607e <__sflush_r+0x1a>
 800612a:	0793      	lsls	r3, r2, #30
 800612c:	680e      	ldr	r6, [r1, #0]
 800612e:	bf08      	it	eq
 8006130:	694b      	ldreq	r3, [r1, #20]
 8006132:	600f      	str	r7, [r1, #0]
 8006134:	bf18      	it	ne
 8006136:	2300      	movne	r3, #0
 8006138:	eba6 0807 	sub.w	r8, r6, r7
 800613c:	608b      	str	r3, [r1, #8]
 800613e:	f1b8 0f00 	cmp.w	r8, #0
 8006142:	dd9c      	ble.n	800607e <__sflush_r+0x1a>
 8006144:	6a21      	ldr	r1, [r4, #32]
 8006146:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006148:	4643      	mov	r3, r8
 800614a:	463a      	mov	r2, r7
 800614c:	4628      	mov	r0, r5
 800614e:	47b0      	blx	r6
 8006150:	2800      	cmp	r0, #0
 8006152:	dc06      	bgt.n	8006162 <__sflush_r+0xfe>
 8006154:	89a3      	ldrh	r3, [r4, #12]
 8006156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800615a:	81a3      	strh	r3, [r4, #12]
 800615c:	f04f 30ff 	mov.w	r0, #4294967295
 8006160:	e78e      	b.n	8006080 <__sflush_r+0x1c>
 8006162:	4407      	add	r7, r0
 8006164:	eba8 0800 	sub.w	r8, r8, r0
 8006168:	e7e9      	b.n	800613e <__sflush_r+0xda>
 800616a:	bf00      	nop
 800616c:	20400001 	.word	0x20400001

08006170 <_fflush_r>:
 8006170:	b538      	push	{r3, r4, r5, lr}
 8006172:	690b      	ldr	r3, [r1, #16]
 8006174:	4605      	mov	r5, r0
 8006176:	460c      	mov	r4, r1
 8006178:	b913      	cbnz	r3, 8006180 <_fflush_r+0x10>
 800617a:	2500      	movs	r5, #0
 800617c:	4628      	mov	r0, r5
 800617e:	bd38      	pop	{r3, r4, r5, pc}
 8006180:	b118      	cbz	r0, 800618a <_fflush_r+0x1a>
 8006182:	6983      	ldr	r3, [r0, #24]
 8006184:	b90b      	cbnz	r3, 800618a <_fflush_r+0x1a>
 8006186:	f000 f887 	bl	8006298 <__sinit>
 800618a:	4b14      	ldr	r3, [pc, #80]	; (80061dc <_fflush_r+0x6c>)
 800618c:	429c      	cmp	r4, r3
 800618e:	d11b      	bne.n	80061c8 <_fflush_r+0x58>
 8006190:	686c      	ldr	r4, [r5, #4]
 8006192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d0ef      	beq.n	800617a <_fflush_r+0xa>
 800619a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800619c:	07d0      	lsls	r0, r2, #31
 800619e:	d404      	bmi.n	80061aa <_fflush_r+0x3a>
 80061a0:	0599      	lsls	r1, r3, #22
 80061a2:	d402      	bmi.n	80061aa <_fflush_r+0x3a>
 80061a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061a6:	f000 f915 	bl	80063d4 <__retarget_lock_acquire_recursive>
 80061aa:	4628      	mov	r0, r5
 80061ac:	4621      	mov	r1, r4
 80061ae:	f7ff ff59 	bl	8006064 <__sflush_r>
 80061b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061b4:	07da      	lsls	r2, r3, #31
 80061b6:	4605      	mov	r5, r0
 80061b8:	d4e0      	bmi.n	800617c <_fflush_r+0xc>
 80061ba:	89a3      	ldrh	r3, [r4, #12]
 80061bc:	059b      	lsls	r3, r3, #22
 80061be:	d4dd      	bmi.n	800617c <_fflush_r+0xc>
 80061c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061c2:	f000 f908 	bl	80063d6 <__retarget_lock_release_recursive>
 80061c6:	e7d9      	b.n	800617c <_fflush_r+0xc>
 80061c8:	4b05      	ldr	r3, [pc, #20]	; (80061e0 <_fflush_r+0x70>)
 80061ca:	429c      	cmp	r4, r3
 80061cc:	d101      	bne.n	80061d2 <_fflush_r+0x62>
 80061ce:	68ac      	ldr	r4, [r5, #8]
 80061d0:	e7df      	b.n	8006192 <_fflush_r+0x22>
 80061d2:	4b04      	ldr	r3, [pc, #16]	; (80061e4 <_fflush_r+0x74>)
 80061d4:	429c      	cmp	r4, r3
 80061d6:	bf08      	it	eq
 80061d8:	68ec      	ldreq	r4, [r5, #12]
 80061da:	e7da      	b.n	8006192 <_fflush_r+0x22>
 80061dc:	080090d4 	.word	0x080090d4
 80061e0:	080090f4 	.word	0x080090f4
 80061e4:	080090b4 	.word	0x080090b4

080061e8 <std>:
 80061e8:	2300      	movs	r3, #0
 80061ea:	b510      	push	{r4, lr}
 80061ec:	4604      	mov	r4, r0
 80061ee:	e9c0 3300 	strd	r3, r3, [r0]
 80061f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061f6:	6083      	str	r3, [r0, #8]
 80061f8:	8181      	strh	r1, [r0, #12]
 80061fa:	6643      	str	r3, [r0, #100]	; 0x64
 80061fc:	81c2      	strh	r2, [r0, #14]
 80061fe:	6183      	str	r3, [r0, #24]
 8006200:	4619      	mov	r1, r3
 8006202:	2208      	movs	r2, #8
 8006204:	305c      	adds	r0, #92	; 0x5c
 8006206:	f7fd fb7b 	bl	8003900 <memset>
 800620a:	4b05      	ldr	r3, [pc, #20]	; (8006220 <std+0x38>)
 800620c:	6263      	str	r3, [r4, #36]	; 0x24
 800620e:	4b05      	ldr	r3, [pc, #20]	; (8006224 <std+0x3c>)
 8006210:	62a3      	str	r3, [r4, #40]	; 0x28
 8006212:	4b05      	ldr	r3, [pc, #20]	; (8006228 <std+0x40>)
 8006214:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006216:	4b05      	ldr	r3, [pc, #20]	; (800622c <std+0x44>)
 8006218:	6224      	str	r4, [r4, #32]
 800621a:	6323      	str	r3, [r4, #48]	; 0x30
 800621c:	bd10      	pop	{r4, pc}
 800621e:	bf00      	nop
 8006220:	08006529 	.word	0x08006529
 8006224:	0800654b 	.word	0x0800654b
 8006228:	08006583 	.word	0x08006583
 800622c:	080065a7 	.word	0x080065a7

08006230 <_cleanup_r>:
 8006230:	4901      	ldr	r1, [pc, #4]	; (8006238 <_cleanup_r+0x8>)
 8006232:	f000 b8af 	b.w	8006394 <_fwalk_reent>
 8006236:	bf00      	nop
 8006238:	08006171 	.word	0x08006171

0800623c <__sfmoreglue>:
 800623c:	b570      	push	{r4, r5, r6, lr}
 800623e:	1e4a      	subs	r2, r1, #1
 8006240:	2568      	movs	r5, #104	; 0x68
 8006242:	4355      	muls	r5, r2
 8006244:	460e      	mov	r6, r1
 8006246:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800624a:	f7ff fa2f 	bl	80056ac <_malloc_r>
 800624e:	4604      	mov	r4, r0
 8006250:	b140      	cbz	r0, 8006264 <__sfmoreglue+0x28>
 8006252:	2100      	movs	r1, #0
 8006254:	e9c0 1600 	strd	r1, r6, [r0]
 8006258:	300c      	adds	r0, #12
 800625a:	60a0      	str	r0, [r4, #8]
 800625c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006260:	f7fd fb4e 	bl	8003900 <memset>
 8006264:	4620      	mov	r0, r4
 8006266:	bd70      	pop	{r4, r5, r6, pc}

08006268 <__sfp_lock_acquire>:
 8006268:	4801      	ldr	r0, [pc, #4]	; (8006270 <__sfp_lock_acquire+0x8>)
 800626a:	f000 b8b3 	b.w	80063d4 <__retarget_lock_acquire_recursive>
 800626e:	bf00      	nop
 8006270:	200002b4 	.word	0x200002b4

08006274 <__sfp_lock_release>:
 8006274:	4801      	ldr	r0, [pc, #4]	; (800627c <__sfp_lock_release+0x8>)
 8006276:	f000 b8ae 	b.w	80063d6 <__retarget_lock_release_recursive>
 800627a:	bf00      	nop
 800627c:	200002b4 	.word	0x200002b4

08006280 <__sinit_lock_acquire>:
 8006280:	4801      	ldr	r0, [pc, #4]	; (8006288 <__sinit_lock_acquire+0x8>)
 8006282:	f000 b8a7 	b.w	80063d4 <__retarget_lock_acquire_recursive>
 8006286:	bf00      	nop
 8006288:	200002af 	.word	0x200002af

0800628c <__sinit_lock_release>:
 800628c:	4801      	ldr	r0, [pc, #4]	; (8006294 <__sinit_lock_release+0x8>)
 800628e:	f000 b8a2 	b.w	80063d6 <__retarget_lock_release_recursive>
 8006292:	bf00      	nop
 8006294:	200002af 	.word	0x200002af

08006298 <__sinit>:
 8006298:	b510      	push	{r4, lr}
 800629a:	4604      	mov	r4, r0
 800629c:	f7ff fff0 	bl	8006280 <__sinit_lock_acquire>
 80062a0:	69a3      	ldr	r3, [r4, #24]
 80062a2:	b11b      	cbz	r3, 80062ac <__sinit+0x14>
 80062a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062a8:	f7ff bff0 	b.w	800628c <__sinit_lock_release>
 80062ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80062b0:	6523      	str	r3, [r4, #80]	; 0x50
 80062b2:	4b13      	ldr	r3, [pc, #76]	; (8006300 <__sinit+0x68>)
 80062b4:	4a13      	ldr	r2, [pc, #76]	; (8006304 <__sinit+0x6c>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80062ba:	42a3      	cmp	r3, r4
 80062bc:	bf04      	itt	eq
 80062be:	2301      	moveq	r3, #1
 80062c0:	61a3      	streq	r3, [r4, #24]
 80062c2:	4620      	mov	r0, r4
 80062c4:	f000 f820 	bl	8006308 <__sfp>
 80062c8:	6060      	str	r0, [r4, #4]
 80062ca:	4620      	mov	r0, r4
 80062cc:	f000 f81c 	bl	8006308 <__sfp>
 80062d0:	60a0      	str	r0, [r4, #8]
 80062d2:	4620      	mov	r0, r4
 80062d4:	f000 f818 	bl	8006308 <__sfp>
 80062d8:	2200      	movs	r2, #0
 80062da:	60e0      	str	r0, [r4, #12]
 80062dc:	2104      	movs	r1, #4
 80062de:	6860      	ldr	r0, [r4, #4]
 80062e0:	f7ff ff82 	bl	80061e8 <std>
 80062e4:	68a0      	ldr	r0, [r4, #8]
 80062e6:	2201      	movs	r2, #1
 80062e8:	2109      	movs	r1, #9
 80062ea:	f7ff ff7d 	bl	80061e8 <std>
 80062ee:	68e0      	ldr	r0, [r4, #12]
 80062f0:	2202      	movs	r2, #2
 80062f2:	2112      	movs	r1, #18
 80062f4:	f7ff ff78 	bl	80061e8 <std>
 80062f8:	2301      	movs	r3, #1
 80062fa:	61a3      	str	r3, [r4, #24]
 80062fc:	e7d2      	b.n	80062a4 <__sinit+0xc>
 80062fe:	bf00      	nop
 8006300:	08008cb4 	.word	0x08008cb4
 8006304:	08006231 	.word	0x08006231

08006308 <__sfp>:
 8006308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800630a:	4607      	mov	r7, r0
 800630c:	f7ff ffac 	bl	8006268 <__sfp_lock_acquire>
 8006310:	4b1e      	ldr	r3, [pc, #120]	; (800638c <__sfp+0x84>)
 8006312:	681e      	ldr	r6, [r3, #0]
 8006314:	69b3      	ldr	r3, [r6, #24]
 8006316:	b913      	cbnz	r3, 800631e <__sfp+0x16>
 8006318:	4630      	mov	r0, r6
 800631a:	f7ff ffbd 	bl	8006298 <__sinit>
 800631e:	3648      	adds	r6, #72	; 0x48
 8006320:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006324:	3b01      	subs	r3, #1
 8006326:	d503      	bpl.n	8006330 <__sfp+0x28>
 8006328:	6833      	ldr	r3, [r6, #0]
 800632a:	b30b      	cbz	r3, 8006370 <__sfp+0x68>
 800632c:	6836      	ldr	r6, [r6, #0]
 800632e:	e7f7      	b.n	8006320 <__sfp+0x18>
 8006330:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006334:	b9d5      	cbnz	r5, 800636c <__sfp+0x64>
 8006336:	4b16      	ldr	r3, [pc, #88]	; (8006390 <__sfp+0x88>)
 8006338:	60e3      	str	r3, [r4, #12]
 800633a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800633e:	6665      	str	r5, [r4, #100]	; 0x64
 8006340:	f000 f847 	bl	80063d2 <__retarget_lock_init_recursive>
 8006344:	f7ff ff96 	bl	8006274 <__sfp_lock_release>
 8006348:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800634c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006350:	6025      	str	r5, [r4, #0]
 8006352:	61a5      	str	r5, [r4, #24]
 8006354:	2208      	movs	r2, #8
 8006356:	4629      	mov	r1, r5
 8006358:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800635c:	f7fd fad0 	bl	8003900 <memset>
 8006360:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006364:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006368:	4620      	mov	r0, r4
 800636a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800636c:	3468      	adds	r4, #104	; 0x68
 800636e:	e7d9      	b.n	8006324 <__sfp+0x1c>
 8006370:	2104      	movs	r1, #4
 8006372:	4638      	mov	r0, r7
 8006374:	f7ff ff62 	bl	800623c <__sfmoreglue>
 8006378:	4604      	mov	r4, r0
 800637a:	6030      	str	r0, [r6, #0]
 800637c:	2800      	cmp	r0, #0
 800637e:	d1d5      	bne.n	800632c <__sfp+0x24>
 8006380:	f7ff ff78 	bl	8006274 <__sfp_lock_release>
 8006384:	230c      	movs	r3, #12
 8006386:	603b      	str	r3, [r7, #0]
 8006388:	e7ee      	b.n	8006368 <__sfp+0x60>
 800638a:	bf00      	nop
 800638c:	08008cb4 	.word	0x08008cb4
 8006390:	ffff0001 	.word	0xffff0001

08006394 <_fwalk_reent>:
 8006394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006398:	4606      	mov	r6, r0
 800639a:	4688      	mov	r8, r1
 800639c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80063a0:	2700      	movs	r7, #0
 80063a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80063a6:	f1b9 0901 	subs.w	r9, r9, #1
 80063aa:	d505      	bpl.n	80063b8 <_fwalk_reent+0x24>
 80063ac:	6824      	ldr	r4, [r4, #0]
 80063ae:	2c00      	cmp	r4, #0
 80063b0:	d1f7      	bne.n	80063a2 <_fwalk_reent+0xe>
 80063b2:	4638      	mov	r0, r7
 80063b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063b8:	89ab      	ldrh	r3, [r5, #12]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d907      	bls.n	80063ce <_fwalk_reent+0x3a>
 80063be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80063c2:	3301      	adds	r3, #1
 80063c4:	d003      	beq.n	80063ce <_fwalk_reent+0x3a>
 80063c6:	4629      	mov	r1, r5
 80063c8:	4630      	mov	r0, r6
 80063ca:	47c0      	blx	r8
 80063cc:	4307      	orrs	r7, r0
 80063ce:	3568      	adds	r5, #104	; 0x68
 80063d0:	e7e9      	b.n	80063a6 <_fwalk_reent+0x12>

080063d2 <__retarget_lock_init_recursive>:
 80063d2:	4770      	bx	lr

080063d4 <__retarget_lock_acquire_recursive>:
 80063d4:	4770      	bx	lr

080063d6 <__retarget_lock_release_recursive>:
 80063d6:	4770      	bx	lr

080063d8 <__swhatbuf_r>:
 80063d8:	b570      	push	{r4, r5, r6, lr}
 80063da:	460e      	mov	r6, r1
 80063dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063e0:	2900      	cmp	r1, #0
 80063e2:	b096      	sub	sp, #88	; 0x58
 80063e4:	4614      	mov	r4, r2
 80063e6:	461d      	mov	r5, r3
 80063e8:	da07      	bge.n	80063fa <__swhatbuf_r+0x22>
 80063ea:	2300      	movs	r3, #0
 80063ec:	602b      	str	r3, [r5, #0]
 80063ee:	89b3      	ldrh	r3, [r6, #12]
 80063f0:	061a      	lsls	r2, r3, #24
 80063f2:	d410      	bmi.n	8006416 <__swhatbuf_r+0x3e>
 80063f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063f8:	e00e      	b.n	8006418 <__swhatbuf_r+0x40>
 80063fa:	466a      	mov	r2, sp
 80063fc:	f000 f8fa 	bl	80065f4 <_fstat_r>
 8006400:	2800      	cmp	r0, #0
 8006402:	dbf2      	blt.n	80063ea <__swhatbuf_r+0x12>
 8006404:	9a01      	ldr	r2, [sp, #4]
 8006406:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800640a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800640e:	425a      	negs	r2, r3
 8006410:	415a      	adcs	r2, r3
 8006412:	602a      	str	r2, [r5, #0]
 8006414:	e7ee      	b.n	80063f4 <__swhatbuf_r+0x1c>
 8006416:	2340      	movs	r3, #64	; 0x40
 8006418:	2000      	movs	r0, #0
 800641a:	6023      	str	r3, [r4, #0]
 800641c:	b016      	add	sp, #88	; 0x58
 800641e:	bd70      	pop	{r4, r5, r6, pc}

08006420 <__smakebuf_r>:
 8006420:	898b      	ldrh	r3, [r1, #12]
 8006422:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006424:	079d      	lsls	r5, r3, #30
 8006426:	4606      	mov	r6, r0
 8006428:	460c      	mov	r4, r1
 800642a:	d507      	bpl.n	800643c <__smakebuf_r+0x1c>
 800642c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006430:	6023      	str	r3, [r4, #0]
 8006432:	6123      	str	r3, [r4, #16]
 8006434:	2301      	movs	r3, #1
 8006436:	6163      	str	r3, [r4, #20]
 8006438:	b002      	add	sp, #8
 800643a:	bd70      	pop	{r4, r5, r6, pc}
 800643c:	ab01      	add	r3, sp, #4
 800643e:	466a      	mov	r2, sp
 8006440:	f7ff ffca 	bl	80063d8 <__swhatbuf_r>
 8006444:	9900      	ldr	r1, [sp, #0]
 8006446:	4605      	mov	r5, r0
 8006448:	4630      	mov	r0, r6
 800644a:	f7ff f92f 	bl	80056ac <_malloc_r>
 800644e:	b948      	cbnz	r0, 8006464 <__smakebuf_r+0x44>
 8006450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006454:	059a      	lsls	r2, r3, #22
 8006456:	d4ef      	bmi.n	8006438 <__smakebuf_r+0x18>
 8006458:	f023 0303 	bic.w	r3, r3, #3
 800645c:	f043 0302 	orr.w	r3, r3, #2
 8006460:	81a3      	strh	r3, [r4, #12]
 8006462:	e7e3      	b.n	800642c <__smakebuf_r+0xc>
 8006464:	4b0d      	ldr	r3, [pc, #52]	; (800649c <__smakebuf_r+0x7c>)
 8006466:	62b3      	str	r3, [r6, #40]	; 0x28
 8006468:	89a3      	ldrh	r3, [r4, #12]
 800646a:	6020      	str	r0, [r4, #0]
 800646c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006470:	81a3      	strh	r3, [r4, #12]
 8006472:	9b00      	ldr	r3, [sp, #0]
 8006474:	6163      	str	r3, [r4, #20]
 8006476:	9b01      	ldr	r3, [sp, #4]
 8006478:	6120      	str	r0, [r4, #16]
 800647a:	b15b      	cbz	r3, 8006494 <__smakebuf_r+0x74>
 800647c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006480:	4630      	mov	r0, r6
 8006482:	f000 f8c9 	bl	8006618 <_isatty_r>
 8006486:	b128      	cbz	r0, 8006494 <__smakebuf_r+0x74>
 8006488:	89a3      	ldrh	r3, [r4, #12]
 800648a:	f023 0303 	bic.w	r3, r3, #3
 800648e:	f043 0301 	orr.w	r3, r3, #1
 8006492:	81a3      	strh	r3, [r4, #12]
 8006494:	89a0      	ldrh	r0, [r4, #12]
 8006496:	4305      	orrs	r5, r0
 8006498:	81a5      	strh	r5, [r4, #12]
 800649a:	e7cd      	b.n	8006438 <__smakebuf_r+0x18>
 800649c:	08006231 	.word	0x08006231

080064a0 <_raise_r>:
 80064a0:	291f      	cmp	r1, #31
 80064a2:	b538      	push	{r3, r4, r5, lr}
 80064a4:	4604      	mov	r4, r0
 80064a6:	460d      	mov	r5, r1
 80064a8:	d904      	bls.n	80064b4 <_raise_r+0x14>
 80064aa:	2316      	movs	r3, #22
 80064ac:	6003      	str	r3, [r0, #0]
 80064ae:	f04f 30ff 	mov.w	r0, #4294967295
 80064b2:	bd38      	pop	{r3, r4, r5, pc}
 80064b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80064b6:	b112      	cbz	r2, 80064be <_raise_r+0x1e>
 80064b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80064bc:	b94b      	cbnz	r3, 80064d2 <_raise_r+0x32>
 80064be:	4620      	mov	r0, r4
 80064c0:	f000 f830 	bl	8006524 <_getpid_r>
 80064c4:	462a      	mov	r2, r5
 80064c6:	4601      	mov	r1, r0
 80064c8:	4620      	mov	r0, r4
 80064ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064ce:	f000 b817 	b.w	8006500 <_kill_r>
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d00a      	beq.n	80064ec <_raise_r+0x4c>
 80064d6:	1c59      	adds	r1, r3, #1
 80064d8:	d103      	bne.n	80064e2 <_raise_r+0x42>
 80064da:	2316      	movs	r3, #22
 80064dc:	6003      	str	r3, [r0, #0]
 80064de:	2001      	movs	r0, #1
 80064e0:	e7e7      	b.n	80064b2 <_raise_r+0x12>
 80064e2:	2400      	movs	r4, #0
 80064e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80064e8:	4628      	mov	r0, r5
 80064ea:	4798      	blx	r3
 80064ec:	2000      	movs	r0, #0
 80064ee:	e7e0      	b.n	80064b2 <_raise_r+0x12>

080064f0 <raise>:
 80064f0:	4b02      	ldr	r3, [pc, #8]	; (80064fc <raise+0xc>)
 80064f2:	4601      	mov	r1, r0
 80064f4:	6818      	ldr	r0, [r3, #0]
 80064f6:	f7ff bfd3 	b.w	80064a0 <_raise_r>
 80064fa:	bf00      	nop
 80064fc:	2000004c 	.word	0x2000004c

08006500 <_kill_r>:
 8006500:	b538      	push	{r3, r4, r5, lr}
 8006502:	4d07      	ldr	r5, [pc, #28]	; (8006520 <_kill_r+0x20>)
 8006504:	2300      	movs	r3, #0
 8006506:	4604      	mov	r4, r0
 8006508:	4608      	mov	r0, r1
 800650a:	4611      	mov	r1, r2
 800650c:	602b      	str	r3, [r5, #0]
 800650e:	f7fb fcbf 	bl	8001e90 <_kill>
 8006512:	1c43      	adds	r3, r0, #1
 8006514:	d102      	bne.n	800651c <_kill_r+0x1c>
 8006516:	682b      	ldr	r3, [r5, #0]
 8006518:	b103      	cbz	r3, 800651c <_kill_r+0x1c>
 800651a:	6023      	str	r3, [r4, #0]
 800651c:	bd38      	pop	{r3, r4, r5, pc}
 800651e:	bf00      	nop
 8006520:	200002a8 	.word	0x200002a8

08006524 <_getpid_r>:
 8006524:	f7fb bcac 	b.w	8001e80 <_getpid>

08006528 <__sread>:
 8006528:	b510      	push	{r4, lr}
 800652a:	460c      	mov	r4, r1
 800652c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006530:	f000 f894 	bl	800665c <_read_r>
 8006534:	2800      	cmp	r0, #0
 8006536:	bfab      	itete	ge
 8006538:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800653a:	89a3      	ldrhlt	r3, [r4, #12]
 800653c:	181b      	addge	r3, r3, r0
 800653e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006542:	bfac      	ite	ge
 8006544:	6563      	strge	r3, [r4, #84]	; 0x54
 8006546:	81a3      	strhlt	r3, [r4, #12]
 8006548:	bd10      	pop	{r4, pc}

0800654a <__swrite>:
 800654a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800654e:	461f      	mov	r7, r3
 8006550:	898b      	ldrh	r3, [r1, #12]
 8006552:	05db      	lsls	r3, r3, #23
 8006554:	4605      	mov	r5, r0
 8006556:	460c      	mov	r4, r1
 8006558:	4616      	mov	r6, r2
 800655a:	d505      	bpl.n	8006568 <__swrite+0x1e>
 800655c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006560:	2302      	movs	r3, #2
 8006562:	2200      	movs	r2, #0
 8006564:	f000 f868 	bl	8006638 <_lseek_r>
 8006568:	89a3      	ldrh	r3, [r4, #12]
 800656a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800656e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006572:	81a3      	strh	r3, [r4, #12]
 8006574:	4632      	mov	r2, r6
 8006576:	463b      	mov	r3, r7
 8006578:	4628      	mov	r0, r5
 800657a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800657e:	f000 b817 	b.w	80065b0 <_write_r>

08006582 <__sseek>:
 8006582:	b510      	push	{r4, lr}
 8006584:	460c      	mov	r4, r1
 8006586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800658a:	f000 f855 	bl	8006638 <_lseek_r>
 800658e:	1c43      	adds	r3, r0, #1
 8006590:	89a3      	ldrh	r3, [r4, #12]
 8006592:	bf15      	itete	ne
 8006594:	6560      	strne	r0, [r4, #84]	; 0x54
 8006596:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800659a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800659e:	81a3      	strheq	r3, [r4, #12]
 80065a0:	bf18      	it	ne
 80065a2:	81a3      	strhne	r3, [r4, #12]
 80065a4:	bd10      	pop	{r4, pc}

080065a6 <__sclose>:
 80065a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065aa:	f000 b813 	b.w	80065d4 <_close_r>
	...

080065b0 <_write_r>:
 80065b0:	b538      	push	{r3, r4, r5, lr}
 80065b2:	4d07      	ldr	r5, [pc, #28]	; (80065d0 <_write_r+0x20>)
 80065b4:	4604      	mov	r4, r0
 80065b6:	4608      	mov	r0, r1
 80065b8:	4611      	mov	r1, r2
 80065ba:	2200      	movs	r2, #0
 80065bc:	602a      	str	r2, [r5, #0]
 80065be:	461a      	mov	r2, r3
 80065c0:	f7fb fc9d 	bl	8001efe <_write>
 80065c4:	1c43      	adds	r3, r0, #1
 80065c6:	d102      	bne.n	80065ce <_write_r+0x1e>
 80065c8:	682b      	ldr	r3, [r5, #0]
 80065ca:	b103      	cbz	r3, 80065ce <_write_r+0x1e>
 80065cc:	6023      	str	r3, [r4, #0]
 80065ce:	bd38      	pop	{r3, r4, r5, pc}
 80065d0:	200002a8 	.word	0x200002a8

080065d4 <_close_r>:
 80065d4:	b538      	push	{r3, r4, r5, lr}
 80065d6:	4d06      	ldr	r5, [pc, #24]	; (80065f0 <_close_r+0x1c>)
 80065d8:	2300      	movs	r3, #0
 80065da:	4604      	mov	r4, r0
 80065dc:	4608      	mov	r0, r1
 80065de:	602b      	str	r3, [r5, #0]
 80065e0:	f7fb fca9 	bl	8001f36 <_close>
 80065e4:	1c43      	adds	r3, r0, #1
 80065e6:	d102      	bne.n	80065ee <_close_r+0x1a>
 80065e8:	682b      	ldr	r3, [r5, #0]
 80065ea:	b103      	cbz	r3, 80065ee <_close_r+0x1a>
 80065ec:	6023      	str	r3, [r4, #0]
 80065ee:	bd38      	pop	{r3, r4, r5, pc}
 80065f0:	200002a8 	.word	0x200002a8

080065f4 <_fstat_r>:
 80065f4:	b538      	push	{r3, r4, r5, lr}
 80065f6:	4d07      	ldr	r5, [pc, #28]	; (8006614 <_fstat_r+0x20>)
 80065f8:	2300      	movs	r3, #0
 80065fa:	4604      	mov	r4, r0
 80065fc:	4608      	mov	r0, r1
 80065fe:	4611      	mov	r1, r2
 8006600:	602b      	str	r3, [r5, #0]
 8006602:	f7fb fca4 	bl	8001f4e <_fstat>
 8006606:	1c43      	adds	r3, r0, #1
 8006608:	d102      	bne.n	8006610 <_fstat_r+0x1c>
 800660a:	682b      	ldr	r3, [r5, #0]
 800660c:	b103      	cbz	r3, 8006610 <_fstat_r+0x1c>
 800660e:	6023      	str	r3, [r4, #0]
 8006610:	bd38      	pop	{r3, r4, r5, pc}
 8006612:	bf00      	nop
 8006614:	200002a8 	.word	0x200002a8

08006618 <_isatty_r>:
 8006618:	b538      	push	{r3, r4, r5, lr}
 800661a:	4d06      	ldr	r5, [pc, #24]	; (8006634 <_isatty_r+0x1c>)
 800661c:	2300      	movs	r3, #0
 800661e:	4604      	mov	r4, r0
 8006620:	4608      	mov	r0, r1
 8006622:	602b      	str	r3, [r5, #0]
 8006624:	f7fb fca3 	bl	8001f6e <_isatty>
 8006628:	1c43      	adds	r3, r0, #1
 800662a:	d102      	bne.n	8006632 <_isatty_r+0x1a>
 800662c:	682b      	ldr	r3, [r5, #0]
 800662e:	b103      	cbz	r3, 8006632 <_isatty_r+0x1a>
 8006630:	6023      	str	r3, [r4, #0]
 8006632:	bd38      	pop	{r3, r4, r5, pc}
 8006634:	200002a8 	.word	0x200002a8

08006638 <_lseek_r>:
 8006638:	b538      	push	{r3, r4, r5, lr}
 800663a:	4d07      	ldr	r5, [pc, #28]	; (8006658 <_lseek_r+0x20>)
 800663c:	4604      	mov	r4, r0
 800663e:	4608      	mov	r0, r1
 8006640:	4611      	mov	r1, r2
 8006642:	2200      	movs	r2, #0
 8006644:	602a      	str	r2, [r5, #0]
 8006646:	461a      	mov	r2, r3
 8006648:	f7fb fc9c 	bl	8001f84 <_lseek>
 800664c:	1c43      	adds	r3, r0, #1
 800664e:	d102      	bne.n	8006656 <_lseek_r+0x1e>
 8006650:	682b      	ldr	r3, [r5, #0]
 8006652:	b103      	cbz	r3, 8006656 <_lseek_r+0x1e>
 8006654:	6023      	str	r3, [r4, #0]
 8006656:	bd38      	pop	{r3, r4, r5, pc}
 8006658:	200002a8 	.word	0x200002a8

0800665c <_read_r>:
 800665c:	b538      	push	{r3, r4, r5, lr}
 800665e:	4d07      	ldr	r5, [pc, #28]	; (800667c <_read_r+0x20>)
 8006660:	4604      	mov	r4, r0
 8006662:	4608      	mov	r0, r1
 8006664:	4611      	mov	r1, r2
 8006666:	2200      	movs	r2, #0
 8006668:	602a      	str	r2, [r5, #0]
 800666a:	461a      	mov	r2, r3
 800666c:	f7fb fc2a 	bl	8001ec4 <_read>
 8006670:	1c43      	adds	r3, r0, #1
 8006672:	d102      	bne.n	800667a <_read_r+0x1e>
 8006674:	682b      	ldr	r3, [r5, #0]
 8006676:	b103      	cbz	r3, 800667a <_read_r+0x1e>
 8006678:	6023      	str	r3, [r4, #0]
 800667a:	bd38      	pop	{r3, r4, r5, pc}
 800667c:	200002a8 	.word	0x200002a8

08006680 <cbrt>:
 8006680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006684:	ec51 0b10 	vmov	r0, r1, d0
 8006688:	4a5b      	ldr	r2, [pc, #364]	; (80067f8 <cbrt+0x178>)
 800668a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800668e:	4293      	cmp	r3, r2
 8006690:	ed2d 8b02 	vpush	{d8}
 8006694:	ee10 2a10 	vmov	r2, s0
 8006698:	468a      	mov	sl, r1
 800669a:	d908      	bls.n	80066ae <cbrt+0x2e>
 800669c:	460b      	mov	r3, r1
 800669e:	f7f9 fdf5 	bl	800028c <__adddf3>
 80066a2:	ecbd 8b02 	vpop	{d8}
 80066a6:	ec41 0b10 	vmov	d0, r0, r1
 80066aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ae:	431a      	orrs	r2, r3
 80066b0:	d0f7      	beq.n	80066a2 <cbrt+0x22>
 80066b2:	4a52      	ldr	r2, [pc, #328]	; (80067fc <cbrt+0x17c>)
 80066b4:	ea0a 0202 	and.w	r2, sl, r2
 80066b8:	4619      	mov	r1, r3
 80066ba:	4604      	mov	r4, r0
 80066bc:	461d      	mov	r5, r3
 80066be:	2a00      	cmp	r2, #0
 80066c0:	d17b      	bne.n	80067ba <cbrt+0x13a>
 80066c2:	4b4f      	ldr	r3, [pc, #316]	; (8006800 <cbrt+0x180>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	f7f9 ff97 	bl	80005f8 <__aeabi_dmul>
 80066ca:	2203      	movs	r2, #3
 80066cc:	fbb1 f3f2 	udiv	r3, r1, r2
 80066d0:	f103 5725 	add.w	r7, r3, #692060160	; 0x29400000
 80066d4:	f507 177d 	add.w	r7, r7, #4145152	; 0x3f4000
 80066d8:	f507 5762 	add.w	r7, r7, #14464	; 0x3880
 80066dc:	4606      	mov	r6, r0
 80066de:	3713      	adds	r7, #19
 80066e0:	4632      	mov	r2, r6
 80066e2:	463b      	mov	r3, r7
 80066e4:	4630      	mov	r0, r6
 80066e6:	4639      	mov	r1, r7
 80066e8:	f7f9 ff86 	bl	80005f8 <__aeabi_dmul>
 80066ec:	4622      	mov	r2, r4
 80066ee:	462b      	mov	r3, r5
 80066f0:	f7fa f8ac 	bl	800084c <__aeabi_ddiv>
 80066f4:	4632      	mov	r2, r6
 80066f6:	463b      	mov	r3, r7
 80066f8:	f7f9 ff7e 	bl	80005f8 <__aeabi_dmul>
 80066fc:	a334      	add	r3, pc, #208	; (adr r3, 80067d0 <cbrt+0x150>)
 80066fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006702:	f7f9 fdc3 	bl	800028c <__adddf3>
 8006706:	a334      	add	r3, pc, #208	; (adr r3, 80067d8 <cbrt+0x158>)
 8006708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670c:	4680      	mov	r8, r0
 800670e:	4689      	mov	r9, r1
 8006710:	f7f9 fdbc 	bl	800028c <__adddf3>
 8006714:	4642      	mov	r2, r8
 8006716:	464b      	mov	r3, r9
 8006718:	ec41 0b18 	vmov	d8, r0, r1
 800671c:	a130      	add	r1, pc, #192	; (adr r1, 80067e0 <cbrt+0x160>)
 800671e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006722:	f7fa f893 	bl	800084c <__aeabi_ddiv>
 8006726:	4602      	mov	r2, r0
 8006728:	460b      	mov	r3, r1
 800672a:	ec51 0b18 	vmov	r0, r1, d8
 800672e:	f7f9 fdad 	bl	800028c <__adddf3>
 8006732:	4602      	mov	r2, r0
 8006734:	460b      	mov	r3, r1
 8006736:	a12c      	add	r1, pc, #176	; (adr r1, 80067e8 <cbrt+0x168>)
 8006738:	e9d1 0100 	ldrd	r0, r1, [r1]
 800673c:	f7fa f886 	bl	800084c <__aeabi_ddiv>
 8006740:	a32b      	add	r3, pc, #172	; (adr r3, 80067f0 <cbrt+0x170>)
 8006742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006746:	f7f9 fda1 	bl	800028c <__adddf3>
 800674a:	4632      	mov	r2, r6
 800674c:	463b      	mov	r3, r7
 800674e:	f7f9 ff53 	bl	80005f8 <__aeabi_dmul>
 8006752:	2600      	movs	r6, #0
 8006754:	1c4f      	adds	r7, r1, #1
 8006756:	4632      	mov	r2, r6
 8006758:	463b      	mov	r3, r7
 800675a:	4630      	mov	r0, r6
 800675c:	4639      	mov	r1, r7
 800675e:	f7f9 ff4b 	bl	80005f8 <__aeabi_dmul>
 8006762:	4602      	mov	r2, r0
 8006764:	460b      	mov	r3, r1
 8006766:	4620      	mov	r0, r4
 8006768:	4629      	mov	r1, r5
 800676a:	f7fa f86f 	bl	800084c <__aeabi_ddiv>
 800676e:	4632      	mov	r2, r6
 8006770:	463b      	mov	r3, r7
 8006772:	4680      	mov	r8, r0
 8006774:	4689      	mov	r9, r1
 8006776:	f7f9 fd87 	bl	8000288 <__aeabi_dsub>
 800677a:	4632      	mov	r2, r6
 800677c:	460d      	mov	r5, r1
 800677e:	4604      	mov	r4, r0
 8006780:	463b      	mov	r3, r7
 8006782:	4630      	mov	r0, r6
 8006784:	4639      	mov	r1, r7
 8006786:	f7f9 fd81 	bl	800028c <__adddf3>
 800678a:	4642      	mov	r2, r8
 800678c:	464b      	mov	r3, r9
 800678e:	f7f9 fd7d 	bl	800028c <__adddf3>
 8006792:	4602      	mov	r2, r0
 8006794:	460b      	mov	r3, r1
 8006796:	4620      	mov	r0, r4
 8006798:	4629      	mov	r1, r5
 800679a:	f7fa f857 	bl	800084c <__aeabi_ddiv>
 800679e:	4632      	mov	r2, r6
 80067a0:	463b      	mov	r3, r7
 80067a2:	f7f9 ff29 	bl	80005f8 <__aeabi_dmul>
 80067a6:	463b      	mov	r3, r7
 80067a8:	4632      	mov	r2, r6
 80067aa:	f7f9 fd6f 	bl	800028c <__adddf3>
 80067ae:	f00a 4300 	and.w	r3, sl, #2147483648	; 0x80000000
 80067b2:	ea43 0501 	orr.w	r5, r3, r1
 80067b6:	4629      	mov	r1, r5
 80067b8:	e773      	b.n	80066a2 <cbrt+0x22>
 80067ba:	2203      	movs	r2, #3
 80067bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80067c0:	f103 572c 	add.w	r7, r3, #721420288	; 0x2b000000
 80067c4:	f5a7 07c1 	sub.w	r7, r7, #6324224	; 0x608000
 80067c8:	2600      	movs	r6, #0
 80067ca:	f2a7 776d 	subw	r7, r7, #1901	; 0x76d
 80067ce:	e787      	b.n	80066e0 <cbrt+0x60>
 80067d0:	f15f15f1 	.word	0xf15f15f1
 80067d4:	3fe15f15 	.word	0x3fe15f15
 80067d8:	0ea0ea0f 	.word	0x0ea0ea0f
 80067dc:	3ff6a0ea 	.word	0x3ff6a0ea
 80067e0:	2532c834 	.word	0x2532c834
 80067e4:	bfe691de 	.word	0xbfe691de
 80067e8:	6db6db6e 	.word	0x6db6db6e
 80067ec:	3ff9b6db 	.word	0x3ff9b6db
 80067f0:	b6db6db7 	.word	0xb6db6db7
 80067f4:	3fd6db6d 	.word	0x3fd6db6d
 80067f8:	7fefffff 	.word	0x7fefffff
 80067fc:	7ff00000 	.word	0x7ff00000
 8006800:	43500000 	.word	0x43500000
 8006804:	00000000 	.word	0x00000000

08006808 <cos>:
 8006808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800680a:	ec53 2b10 	vmov	r2, r3, d0
 800680e:	4824      	ldr	r0, [pc, #144]	; (80068a0 <cos+0x98>)
 8006810:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006814:	4281      	cmp	r1, r0
 8006816:	dc06      	bgt.n	8006826 <cos+0x1e>
 8006818:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8006898 <cos+0x90>
 800681c:	f001 f990 	bl	8007b40 <__kernel_cos>
 8006820:	ec51 0b10 	vmov	r0, r1, d0
 8006824:	e007      	b.n	8006836 <cos+0x2e>
 8006826:	481f      	ldr	r0, [pc, #124]	; (80068a4 <cos+0x9c>)
 8006828:	4281      	cmp	r1, r0
 800682a:	dd09      	ble.n	8006840 <cos+0x38>
 800682c:	ee10 0a10 	vmov	r0, s0
 8006830:	4619      	mov	r1, r3
 8006832:	f7f9 fd29 	bl	8000288 <__aeabi_dsub>
 8006836:	ec41 0b10 	vmov	d0, r0, r1
 800683a:	b005      	add	sp, #20
 800683c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006840:	4668      	mov	r0, sp
 8006842:	f000 febd 	bl	80075c0 <__ieee754_rem_pio2>
 8006846:	f000 0003 	and.w	r0, r0, #3
 800684a:	2801      	cmp	r0, #1
 800684c:	d007      	beq.n	800685e <cos+0x56>
 800684e:	2802      	cmp	r0, #2
 8006850:	d012      	beq.n	8006878 <cos+0x70>
 8006852:	b9c0      	cbnz	r0, 8006886 <cos+0x7e>
 8006854:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006858:	ed9d 0b00 	vldr	d0, [sp]
 800685c:	e7de      	b.n	800681c <cos+0x14>
 800685e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006862:	ed9d 0b00 	vldr	d0, [sp]
 8006866:	f001 fd73 	bl	8008350 <__kernel_sin>
 800686a:	ec53 2b10 	vmov	r2, r3, d0
 800686e:	ee10 0a10 	vmov	r0, s0
 8006872:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006876:	e7de      	b.n	8006836 <cos+0x2e>
 8006878:	ed9d 1b02 	vldr	d1, [sp, #8]
 800687c:	ed9d 0b00 	vldr	d0, [sp]
 8006880:	f001 f95e 	bl	8007b40 <__kernel_cos>
 8006884:	e7f1      	b.n	800686a <cos+0x62>
 8006886:	ed9d 1b02 	vldr	d1, [sp, #8]
 800688a:	ed9d 0b00 	vldr	d0, [sp]
 800688e:	2001      	movs	r0, #1
 8006890:	f001 fd5e 	bl	8008350 <__kernel_sin>
 8006894:	e7c4      	b.n	8006820 <cos+0x18>
 8006896:	bf00      	nop
	...
 80068a0:	3fe921fb 	.word	0x3fe921fb
 80068a4:	7fefffff 	.word	0x7fefffff

080068a8 <sin>:
 80068a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80068aa:	ec53 2b10 	vmov	r2, r3, d0
 80068ae:	4826      	ldr	r0, [pc, #152]	; (8006948 <sin+0xa0>)
 80068b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80068b4:	4281      	cmp	r1, r0
 80068b6:	dc07      	bgt.n	80068c8 <sin+0x20>
 80068b8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8006940 <sin+0x98>
 80068bc:	2000      	movs	r0, #0
 80068be:	f001 fd47 	bl	8008350 <__kernel_sin>
 80068c2:	ec51 0b10 	vmov	r0, r1, d0
 80068c6:	e007      	b.n	80068d8 <sin+0x30>
 80068c8:	4820      	ldr	r0, [pc, #128]	; (800694c <sin+0xa4>)
 80068ca:	4281      	cmp	r1, r0
 80068cc:	dd09      	ble.n	80068e2 <sin+0x3a>
 80068ce:	ee10 0a10 	vmov	r0, s0
 80068d2:	4619      	mov	r1, r3
 80068d4:	f7f9 fcd8 	bl	8000288 <__aeabi_dsub>
 80068d8:	ec41 0b10 	vmov	d0, r0, r1
 80068dc:	b005      	add	sp, #20
 80068de:	f85d fb04 	ldr.w	pc, [sp], #4
 80068e2:	4668      	mov	r0, sp
 80068e4:	f000 fe6c 	bl	80075c0 <__ieee754_rem_pio2>
 80068e8:	f000 0003 	and.w	r0, r0, #3
 80068ec:	2801      	cmp	r0, #1
 80068ee:	d008      	beq.n	8006902 <sin+0x5a>
 80068f0:	2802      	cmp	r0, #2
 80068f2:	d00d      	beq.n	8006910 <sin+0x68>
 80068f4:	b9d0      	cbnz	r0, 800692c <sin+0x84>
 80068f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80068fa:	ed9d 0b00 	vldr	d0, [sp]
 80068fe:	2001      	movs	r0, #1
 8006900:	e7dd      	b.n	80068be <sin+0x16>
 8006902:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006906:	ed9d 0b00 	vldr	d0, [sp]
 800690a:	f001 f919 	bl	8007b40 <__kernel_cos>
 800690e:	e7d8      	b.n	80068c2 <sin+0x1a>
 8006910:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006914:	ed9d 0b00 	vldr	d0, [sp]
 8006918:	2001      	movs	r0, #1
 800691a:	f001 fd19 	bl	8008350 <__kernel_sin>
 800691e:	ec53 2b10 	vmov	r2, r3, d0
 8006922:	ee10 0a10 	vmov	r0, s0
 8006926:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800692a:	e7d5      	b.n	80068d8 <sin+0x30>
 800692c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006930:	ed9d 0b00 	vldr	d0, [sp]
 8006934:	f001 f904 	bl	8007b40 <__kernel_cos>
 8006938:	e7f1      	b.n	800691e <sin+0x76>
 800693a:	bf00      	nop
 800693c:	f3af 8000 	nop.w
	...
 8006948:	3fe921fb 	.word	0x3fe921fb
 800694c:	7fefffff 	.word	0x7fefffff

08006950 <tan>:
 8006950:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006952:	ec53 2b10 	vmov	r2, r3, d0
 8006956:	4814      	ldr	r0, [pc, #80]	; (80069a8 <tan+0x58>)
 8006958:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800695c:	4281      	cmp	r1, r0
 800695e:	dc05      	bgt.n	800696c <tan+0x1c>
 8006960:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 80069a0 <tan+0x50>
 8006964:	2001      	movs	r0, #1
 8006966:	f001 fdb3 	bl	80084d0 <__kernel_tan>
 800696a:	e009      	b.n	8006980 <tan+0x30>
 800696c:	480f      	ldr	r0, [pc, #60]	; (80069ac <tan+0x5c>)
 800696e:	4281      	cmp	r1, r0
 8006970:	dd09      	ble.n	8006986 <tan+0x36>
 8006972:	ee10 0a10 	vmov	r0, s0
 8006976:	4619      	mov	r1, r3
 8006978:	f7f9 fc86 	bl	8000288 <__aeabi_dsub>
 800697c:	ec41 0b10 	vmov	d0, r0, r1
 8006980:	b005      	add	sp, #20
 8006982:	f85d fb04 	ldr.w	pc, [sp], #4
 8006986:	4668      	mov	r0, sp
 8006988:	f000 fe1a 	bl	80075c0 <__ieee754_rem_pio2>
 800698c:	0040      	lsls	r0, r0, #1
 800698e:	f000 0002 	and.w	r0, r0, #2
 8006992:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006996:	ed9d 0b00 	vldr	d0, [sp]
 800699a:	f1c0 0001 	rsb	r0, r0, #1
 800699e:	e7e2      	b.n	8006966 <tan+0x16>
	...
 80069a8:	3fe921fb 	.word	0x3fe921fb
 80069ac:	7fefffff 	.word	0x7fefffff

080069b0 <pow>:
 80069b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069b4:	ec59 8b10 	vmov	r8, r9, d0
 80069b8:	ec57 6b11 	vmov	r6, r7, d1
 80069bc:	f000 f8dc 	bl	8006b78 <__ieee754_pow>
 80069c0:	4b4e      	ldr	r3, [pc, #312]	; (8006afc <pow+0x14c>)
 80069c2:	f993 3000 	ldrsb.w	r3, [r3]
 80069c6:	3301      	adds	r3, #1
 80069c8:	ec55 4b10 	vmov	r4, r5, d0
 80069cc:	d015      	beq.n	80069fa <pow+0x4a>
 80069ce:	4632      	mov	r2, r6
 80069d0:	463b      	mov	r3, r7
 80069d2:	4630      	mov	r0, r6
 80069d4:	4639      	mov	r1, r7
 80069d6:	f7fa f8a9 	bl	8000b2c <__aeabi_dcmpun>
 80069da:	b970      	cbnz	r0, 80069fa <pow+0x4a>
 80069dc:	4642      	mov	r2, r8
 80069de:	464b      	mov	r3, r9
 80069e0:	4640      	mov	r0, r8
 80069e2:	4649      	mov	r1, r9
 80069e4:	f7fa f8a2 	bl	8000b2c <__aeabi_dcmpun>
 80069e8:	2200      	movs	r2, #0
 80069ea:	2300      	movs	r3, #0
 80069ec:	b148      	cbz	r0, 8006a02 <pow+0x52>
 80069ee:	4630      	mov	r0, r6
 80069f0:	4639      	mov	r1, r7
 80069f2:	f7fa f869 	bl	8000ac8 <__aeabi_dcmpeq>
 80069f6:	2800      	cmp	r0, #0
 80069f8:	d17d      	bne.n	8006af6 <pow+0x146>
 80069fa:	ec45 4b10 	vmov	d0, r4, r5
 80069fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a02:	4640      	mov	r0, r8
 8006a04:	4649      	mov	r1, r9
 8006a06:	f7fa f85f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a0a:	b1e0      	cbz	r0, 8006a46 <pow+0x96>
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	2300      	movs	r3, #0
 8006a10:	4630      	mov	r0, r6
 8006a12:	4639      	mov	r1, r7
 8006a14:	f7fa f858 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a18:	2800      	cmp	r0, #0
 8006a1a:	d16c      	bne.n	8006af6 <pow+0x146>
 8006a1c:	ec47 6b10 	vmov	d0, r6, r7
 8006a20:	f001 ff33 	bl	800888a <finite>
 8006a24:	2800      	cmp	r0, #0
 8006a26:	d0e8      	beq.n	80069fa <pow+0x4a>
 8006a28:	2200      	movs	r2, #0
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	4630      	mov	r0, r6
 8006a2e:	4639      	mov	r1, r7
 8006a30:	f7fa f854 	bl	8000adc <__aeabi_dcmplt>
 8006a34:	2800      	cmp	r0, #0
 8006a36:	d0e0      	beq.n	80069fa <pow+0x4a>
 8006a38:	f7fc ff1e 	bl	8003878 <__errno>
 8006a3c:	2321      	movs	r3, #33	; 0x21
 8006a3e:	6003      	str	r3, [r0, #0]
 8006a40:	2400      	movs	r4, #0
 8006a42:	4d2f      	ldr	r5, [pc, #188]	; (8006b00 <pow+0x150>)
 8006a44:	e7d9      	b.n	80069fa <pow+0x4a>
 8006a46:	ec45 4b10 	vmov	d0, r4, r5
 8006a4a:	f001 ff1e 	bl	800888a <finite>
 8006a4e:	bbb8      	cbnz	r0, 8006ac0 <pow+0x110>
 8006a50:	ec49 8b10 	vmov	d0, r8, r9
 8006a54:	f001 ff19 	bl	800888a <finite>
 8006a58:	b390      	cbz	r0, 8006ac0 <pow+0x110>
 8006a5a:	ec47 6b10 	vmov	d0, r6, r7
 8006a5e:	f001 ff14 	bl	800888a <finite>
 8006a62:	b368      	cbz	r0, 8006ac0 <pow+0x110>
 8006a64:	4622      	mov	r2, r4
 8006a66:	462b      	mov	r3, r5
 8006a68:	4620      	mov	r0, r4
 8006a6a:	4629      	mov	r1, r5
 8006a6c:	f7fa f85e 	bl	8000b2c <__aeabi_dcmpun>
 8006a70:	b160      	cbz	r0, 8006a8c <pow+0xdc>
 8006a72:	f7fc ff01 	bl	8003878 <__errno>
 8006a76:	2321      	movs	r3, #33	; 0x21
 8006a78:	6003      	str	r3, [r0, #0]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	4610      	mov	r0, r2
 8006a80:	4619      	mov	r1, r3
 8006a82:	f7f9 fee3 	bl	800084c <__aeabi_ddiv>
 8006a86:	4604      	mov	r4, r0
 8006a88:	460d      	mov	r5, r1
 8006a8a:	e7b6      	b.n	80069fa <pow+0x4a>
 8006a8c:	f7fc fef4 	bl	8003878 <__errno>
 8006a90:	2322      	movs	r3, #34	; 0x22
 8006a92:	6003      	str	r3, [r0, #0]
 8006a94:	2200      	movs	r2, #0
 8006a96:	2300      	movs	r3, #0
 8006a98:	4640      	mov	r0, r8
 8006a9a:	4649      	mov	r1, r9
 8006a9c:	f7fa f81e 	bl	8000adc <__aeabi_dcmplt>
 8006aa0:	2400      	movs	r4, #0
 8006aa2:	b158      	cbz	r0, 8006abc <pow+0x10c>
 8006aa4:	ec47 6b10 	vmov	d0, r6, r7
 8006aa8:	f001 ff7a 	bl	80089a0 <rint>
 8006aac:	4632      	mov	r2, r6
 8006aae:	ec51 0b10 	vmov	r0, r1, d0
 8006ab2:	463b      	mov	r3, r7
 8006ab4:	f7fa f808 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	d0c2      	beq.n	8006a42 <pow+0x92>
 8006abc:	4d11      	ldr	r5, [pc, #68]	; (8006b04 <pow+0x154>)
 8006abe:	e79c      	b.n	80069fa <pow+0x4a>
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	4629      	mov	r1, r5
 8006ac8:	f7f9 fffe 	bl	8000ac8 <__aeabi_dcmpeq>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	d094      	beq.n	80069fa <pow+0x4a>
 8006ad0:	ec49 8b10 	vmov	d0, r8, r9
 8006ad4:	f001 fed9 	bl	800888a <finite>
 8006ad8:	2800      	cmp	r0, #0
 8006ada:	d08e      	beq.n	80069fa <pow+0x4a>
 8006adc:	ec47 6b10 	vmov	d0, r6, r7
 8006ae0:	f001 fed3 	bl	800888a <finite>
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	d088      	beq.n	80069fa <pow+0x4a>
 8006ae8:	f7fc fec6 	bl	8003878 <__errno>
 8006aec:	2322      	movs	r3, #34	; 0x22
 8006aee:	6003      	str	r3, [r0, #0]
 8006af0:	2400      	movs	r4, #0
 8006af2:	2500      	movs	r5, #0
 8006af4:	e781      	b.n	80069fa <pow+0x4a>
 8006af6:	4d04      	ldr	r5, [pc, #16]	; (8006b08 <pow+0x158>)
 8006af8:	2400      	movs	r4, #0
 8006afa:	e77e      	b.n	80069fa <pow+0x4a>
 8006afc:	20000220 	.word	0x20000220
 8006b00:	fff00000 	.word	0xfff00000
 8006b04:	7ff00000 	.word	0x7ff00000
 8006b08:	3ff00000 	.word	0x3ff00000

08006b0c <sqrt>:
 8006b0c:	b538      	push	{r3, r4, r5, lr}
 8006b0e:	ed2d 8b02 	vpush	{d8}
 8006b12:	ec55 4b10 	vmov	r4, r5, d0
 8006b16:	f000 ff5d 	bl	80079d4 <__ieee754_sqrt>
 8006b1a:	4b15      	ldr	r3, [pc, #84]	; (8006b70 <sqrt+0x64>)
 8006b1c:	eeb0 8a40 	vmov.f32	s16, s0
 8006b20:	eef0 8a60 	vmov.f32	s17, s1
 8006b24:	f993 3000 	ldrsb.w	r3, [r3]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	d019      	beq.n	8006b60 <sqrt+0x54>
 8006b2c:	4622      	mov	r2, r4
 8006b2e:	462b      	mov	r3, r5
 8006b30:	4620      	mov	r0, r4
 8006b32:	4629      	mov	r1, r5
 8006b34:	f7f9 fffa 	bl	8000b2c <__aeabi_dcmpun>
 8006b38:	b990      	cbnz	r0, 8006b60 <sqrt+0x54>
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	4620      	mov	r0, r4
 8006b40:	4629      	mov	r1, r5
 8006b42:	f7f9 ffcb 	bl	8000adc <__aeabi_dcmplt>
 8006b46:	b158      	cbz	r0, 8006b60 <sqrt+0x54>
 8006b48:	f7fc fe96 	bl	8003878 <__errno>
 8006b4c:	2321      	movs	r3, #33	; 0x21
 8006b4e:	6003      	str	r3, [r0, #0]
 8006b50:	2200      	movs	r2, #0
 8006b52:	2300      	movs	r3, #0
 8006b54:	4610      	mov	r0, r2
 8006b56:	4619      	mov	r1, r3
 8006b58:	f7f9 fe78 	bl	800084c <__aeabi_ddiv>
 8006b5c:	ec41 0b18 	vmov	d8, r0, r1
 8006b60:	eeb0 0a48 	vmov.f32	s0, s16
 8006b64:	eef0 0a68 	vmov.f32	s1, s17
 8006b68:	ecbd 8b02 	vpop	{d8}
 8006b6c:	bd38      	pop	{r3, r4, r5, pc}
 8006b6e:	bf00      	nop
 8006b70:	20000220 	.word	0x20000220
 8006b74:	00000000 	.word	0x00000000

08006b78 <__ieee754_pow>:
 8006b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b7c:	ed2d 8b06 	vpush	{d8-d10}
 8006b80:	b08d      	sub	sp, #52	; 0x34
 8006b82:	ed8d 1b02 	vstr	d1, [sp, #8]
 8006b86:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8006b8a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8006b8e:	ea56 0100 	orrs.w	r1, r6, r0
 8006b92:	ec53 2b10 	vmov	r2, r3, d0
 8006b96:	f000 84d1 	beq.w	800753c <__ieee754_pow+0x9c4>
 8006b9a:	497f      	ldr	r1, [pc, #508]	; (8006d98 <__ieee754_pow+0x220>)
 8006b9c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8006ba0:	428c      	cmp	r4, r1
 8006ba2:	ee10 8a10 	vmov	r8, s0
 8006ba6:	4699      	mov	r9, r3
 8006ba8:	dc09      	bgt.n	8006bbe <__ieee754_pow+0x46>
 8006baa:	d103      	bne.n	8006bb4 <__ieee754_pow+0x3c>
 8006bac:	b97a      	cbnz	r2, 8006bce <__ieee754_pow+0x56>
 8006bae:	42a6      	cmp	r6, r4
 8006bb0:	dd02      	ble.n	8006bb8 <__ieee754_pow+0x40>
 8006bb2:	e00c      	b.n	8006bce <__ieee754_pow+0x56>
 8006bb4:	428e      	cmp	r6, r1
 8006bb6:	dc02      	bgt.n	8006bbe <__ieee754_pow+0x46>
 8006bb8:	428e      	cmp	r6, r1
 8006bba:	d110      	bne.n	8006bde <__ieee754_pow+0x66>
 8006bbc:	b178      	cbz	r0, 8006bde <__ieee754_pow+0x66>
 8006bbe:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006bc2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006bc6:	ea54 0308 	orrs.w	r3, r4, r8
 8006bca:	f000 84b7 	beq.w	800753c <__ieee754_pow+0x9c4>
 8006bce:	4873      	ldr	r0, [pc, #460]	; (8006d9c <__ieee754_pow+0x224>)
 8006bd0:	b00d      	add	sp, #52	; 0x34
 8006bd2:	ecbd 8b06 	vpop	{d8-d10}
 8006bd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bda:	f7fe bdc1 	b.w	8005760 <nan>
 8006bde:	f1b9 0f00 	cmp.w	r9, #0
 8006be2:	da36      	bge.n	8006c52 <__ieee754_pow+0xda>
 8006be4:	496e      	ldr	r1, [pc, #440]	; (8006da0 <__ieee754_pow+0x228>)
 8006be6:	428e      	cmp	r6, r1
 8006be8:	dc51      	bgt.n	8006c8e <__ieee754_pow+0x116>
 8006bea:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8006bee:	428e      	cmp	r6, r1
 8006bf0:	f340 84af 	ble.w	8007552 <__ieee754_pow+0x9da>
 8006bf4:	1531      	asrs	r1, r6, #20
 8006bf6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006bfa:	2914      	cmp	r1, #20
 8006bfc:	dd0f      	ble.n	8006c1e <__ieee754_pow+0xa6>
 8006bfe:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8006c02:	fa20 fc01 	lsr.w	ip, r0, r1
 8006c06:	fa0c f101 	lsl.w	r1, ip, r1
 8006c0a:	4281      	cmp	r1, r0
 8006c0c:	f040 84a1 	bne.w	8007552 <__ieee754_pow+0x9da>
 8006c10:	f00c 0c01 	and.w	ip, ip, #1
 8006c14:	f1cc 0102 	rsb	r1, ip, #2
 8006c18:	9100      	str	r1, [sp, #0]
 8006c1a:	b180      	cbz	r0, 8006c3e <__ieee754_pow+0xc6>
 8006c1c:	e059      	b.n	8006cd2 <__ieee754_pow+0x15a>
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	d155      	bne.n	8006cce <__ieee754_pow+0x156>
 8006c22:	f1c1 0114 	rsb	r1, r1, #20
 8006c26:	fa46 fc01 	asr.w	ip, r6, r1
 8006c2a:	fa0c f101 	lsl.w	r1, ip, r1
 8006c2e:	42b1      	cmp	r1, r6
 8006c30:	f040 848c 	bne.w	800754c <__ieee754_pow+0x9d4>
 8006c34:	f00c 0c01 	and.w	ip, ip, #1
 8006c38:	f1cc 0102 	rsb	r1, ip, #2
 8006c3c:	9100      	str	r1, [sp, #0]
 8006c3e:	4959      	ldr	r1, [pc, #356]	; (8006da4 <__ieee754_pow+0x22c>)
 8006c40:	428e      	cmp	r6, r1
 8006c42:	d12d      	bne.n	8006ca0 <__ieee754_pow+0x128>
 8006c44:	2f00      	cmp	r7, #0
 8006c46:	da79      	bge.n	8006d3c <__ieee754_pow+0x1c4>
 8006c48:	4956      	ldr	r1, [pc, #344]	; (8006da4 <__ieee754_pow+0x22c>)
 8006c4a:	2000      	movs	r0, #0
 8006c4c:	f7f9 fdfe 	bl	800084c <__aeabi_ddiv>
 8006c50:	e016      	b.n	8006c80 <__ieee754_pow+0x108>
 8006c52:	2100      	movs	r1, #0
 8006c54:	9100      	str	r1, [sp, #0]
 8006c56:	2800      	cmp	r0, #0
 8006c58:	d13b      	bne.n	8006cd2 <__ieee754_pow+0x15a>
 8006c5a:	494f      	ldr	r1, [pc, #316]	; (8006d98 <__ieee754_pow+0x220>)
 8006c5c:	428e      	cmp	r6, r1
 8006c5e:	d1ee      	bne.n	8006c3e <__ieee754_pow+0xc6>
 8006c60:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006c64:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006c68:	ea53 0308 	orrs.w	r3, r3, r8
 8006c6c:	f000 8466 	beq.w	800753c <__ieee754_pow+0x9c4>
 8006c70:	4b4d      	ldr	r3, [pc, #308]	; (8006da8 <__ieee754_pow+0x230>)
 8006c72:	429c      	cmp	r4, r3
 8006c74:	dd0d      	ble.n	8006c92 <__ieee754_pow+0x11a>
 8006c76:	2f00      	cmp	r7, #0
 8006c78:	f280 8464 	bge.w	8007544 <__ieee754_pow+0x9cc>
 8006c7c:	2000      	movs	r0, #0
 8006c7e:	2100      	movs	r1, #0
 8006c80:	ec41 0b10 	vmov	d0, r0, r1
 8006c84:	b00d      	add	sp, #52	; 0x34
 8006c86:	ecbd 8b06 	vpop	{d8-d10}
 8006c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c8e:	2102      	movs	r1, #2
 8006c90:	e7e0      	b.n	8006c54 <__ieee754_pow+0xdc>
 8006c92:	2f00      	cmp	r7, #0
 8006c94:	daf2      	bge.n	8006c7c <__ieee754_pow+0x104>
 8006c96:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8006c9a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006c9e:	e7ef      	b.n	8006c80 <__ieee754_pow+0x108>
 8006ca0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8006ca4:	d104      	bne.n	8006cb0 <__ieee754_pow+0x138>
 8006ca6:	4610      	mov	r0, r2
 8006ca8:	4619      	mov	r1, r3
 8006caa:	f7f9 fca5 	bl	80005f8 <__aeabi_dmul>
 8006cae:	e7e7      	b.n	8006c80 <__ieee754_pow+0x108>
 8006cb0:	493e      	ldr	r1, [pc, #248]	; (8006dac <__ieee754_pow+0x234>)
 8006cb2:	428f      	cmp	r7, r1
 8006cb4:	d10d      	bne.n	8006cd2 <__ieee754_pow+0x15a>
 8006cb6:	f1b9 0f00 	cmp.w	r9, #0
 8006cba:	db0a      	blt.n	8006cd2 <__ieee754_pow+0x15a>
 8006cbc:	ec43 2b10 	vmov	d0, r2, r3
 8006cc0:	b00d      	add	sp, #52	; 0x34
 8006cc2:	ecbd 8b06 	vpop	{d8-d10}
 8006cc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cca:	f000 be83 	b.w	80079d4 <__ieee754_sqrt>
 8006cce:	2100      	movs	r1, #0
 8006cd0:	9100      	str	r1, [sp, #0]
 8006cd2:	ec43 2b10 	vmov	d0, r2, r3
 8006cd6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006cda:	f001 fdcd 	bl	8008878 <fabs>
 8006cde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ce2:	ec51 0b10 	vmov	r0, r1, d0
 8006ce6:	f1b8 0f00 	cmp.w	r8, #0
 8006cea:	d12a      	bne.n	8006d42 <__ieee754_pow+0x1ca>
 8006cec:	b12c      	cbz	r4, 8006cfa <__ieee754_pow+0x182>
 8006cee:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8006da4 <__ieee754_pow+0x22c>
 8006cf2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8006cf6:	45e6      	cmp	lr, ip
 8006cf8:	d123      	bne.n	8006d42 <__ieee754_pow+0x1ca>
 8006cfa:	2f00      	cmp	r7, #0
 8006cfc:	da05      	bge.n	8006d0a <__ieee754_pow+0x192>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	460b      	mov	r3, r1
 8006d02:	2000      	movs	r0, #0
 8006d04:	4927      	ldr	r1, [pc, #156]	; (8006da4 <__ieee754_pow+0x22c>)
 8006d06:	f7f9 fda1 	bl	800084c <__aeabi_ddiv>
 8006d0a:	f1b9 0f00 	cmp.w	r9, #0
 8006d0e:	dab7      	bge.n	8006c80 <__ieee754_pow+0x108>
 8006d10:	9b00      	ldr	r3, [sp, #0]
 8006d12:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006d16:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006d1a:	4323      	orrs	r3, r4
 8006d1c:	d108      	bne.n	8006d30 <__ieee754_pow+0x1b8>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	460b      	mov	r3, r1
 8006d22:	4610      	mov	r0, r2
 8006d24:	4619      	mov	r1, r3
 8006d26:	f7f9 faaf 	bl	8000288 <__aeabi_dsub>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	e78d      	b.n	8006c4c <__ieee754_pow+0xd4>
 8006d30:	9b00      	ldr	r3, [sp, #0]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d1a4      	bne.n	8006c80 <__ieee754_pow+0x108>
 8006d36:	4602      	mov	r2, r0
 8006d38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d3c:	4610      	mov	r0, r2
 8006d3e:	4619      	mov	r1, r3
 8006d40:	e79e      	b.n	8006c80 <__ieee754_pow+0x108>
 8006d42:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8006d46:	f10c 35ff 	add.w	r5, ip, #4294967295
 8006d4a:	950a      	str	r5, [sp, #40]	; 0x28
 8006d4c:	9d00      	ldr	r5, [sp, #0]
 8006d4e:	46ac      	mov	ip, r5
 8006d50:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006d52:	ea5c 0505 	orrs.w	r5, ip, r5
 8006d56:	d0e4      	beq.n	8006d22 <__ieee754_pow+0x1aa>
 8006d58:	4b15      	ldr	r3, [pc, #84]	; (8006db0 <__ieee754_pow+0x238>)
 8006d5a:	429e      	cmp	r6, r3
 8006d5c:	f340 80fc 	ble.w	8006f58 <__ieee754_pow+0x3e0>
 8006d60:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006d64:	429e      	cmp	r6, r3
 8006d66:	4b10      	ldr	r3, [pc, #64]	; (8006da8 <__ieee754_pow+0x230>)
 8006d68:	dd07      	ble.n	8006d7a <__ieee754_pow+0x202>
 8006d6a:	429c      	cmp	r4, r3
 8006d6c:	dc0a      	bgt.n	8006d84 <__ieee754_pow+0x20c>
 8006d6e:	2f00      	cmp	r7, #0
 8006d70:	da84      	bge.n	8006c7c <__ieee754_pow+0x104>
 8006d72:	a307      	add	r3, pc, #28	; (adr r3, 8006d90 <__ieee754_pow+0x218>)
 8006d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d78:	e795      	b.n	8006ca6 <__ieee754_pow+0x12e>
 8006d7a:	429c      	cmp	r4, r3
 8006d7c:	dbf7      	blt.n	8006d6e <__ieee754_pow+0x1f6>
 8006d7e:	4b09      	ldr	r3, [pc, #36]	; (8006da4 <__ieee754_pow+0x22c>)
 8006d80:	429c      	cmp	r4, r3
 8006d82:	dd17      	ble.n	8006db4 <__ieee754_pow+0x23c>
 8006d84:	2f00      	cmp	r7, #0
 8006d86:	dcf4      	bgt.n	8006d72 <__ieee754_pow+0x1fa>
 8006d88:	e778      	b.n	8006c7c <__ieee754_pow+0x104>
 8006d8a:	bf00      	nop
 8006d8c:	f3af 8000 	nop.w
 8006d90:	8800759c 	.word	0x8800759c
 8006d94:	7e37e43c 	.word	0x7e37e43c
 8006d98:	7ff00000 	.word	0x7ff00000
 8006d9c:	08008f7f 	.word	0x08008f7f
 8006da0:	433fffff 	.word	0x433fffff
 8006da4:	3ff00000 	.word	0x3ff00000
 8006da8:	3fefffff 	.word	0x3fefffff
 8006dac:	3fe00000 	.word	0x3fe00000
 8006db0:	41e00000 	.word	0x41e00000
 8006db4:	4b64      	ldr	r3, [pc, #400]	; (8006f48 <__ieee754_pow+0x3d0>)
 8006db6:	2200      	movs	r2, #0
 8006db8:	f7f9 fa66 	bl	8000288 <__aeabi_dsub>
 8006dbc:	a356      	add	r3, pc, #344	; (adr r3, 8006f18 <__ieee754_pow+0x3a0>)
 8006dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc2:	4604      	mov	r4, r0
 8006dc4:	460d      	mov	r5, r1
 8006dc6:	f7f9 fc17 	bl	80005f8 <__aeabi_dmul>
 8006dca:	a355      	add	r3, pc, #340	; (adr r3, 8006f20 <__ieee754_pow+0x3a8>)
 8006dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd0:	4606      	mov	r6, r0
 8006dd2:	460f      	mov	r7, r1
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	4629      	mov	r1, r5
 8006dd8:	f7f9 fc0e 	bl	80005f8 <__aeabi_dmul>
 8006ddc:	4b5b      	ldr	r3, [pc, #364]	; (8006f4c <__ieee754_pow+0x3d4>)
 8006dde:	4682      	mov	sl, r0
 8006de0:	468b      	mov	fp, r1
 8006de2:	2200      	movs	r2, #0
 8006de4:	4620      	mov	r0, r4
 8006de6:	4629      	mov	r1, r5
 8006de8:	f7f9 fc06 	bl	80005f8 <__aeabi_dmul>
 8006dec:	4602      	mov	r2, r0
 8006dee:	460b      	mov	r3, r1
 8006df0:	a14d      	add	r1, pc, #308	; (adr r1, 8006f28 <__ieee754_pow+0x3b0>)
 8006df2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006df6:	f7f9 fa47 	bl	8000288 <__aeabi_dsub>
 8006dfa:	4622      	mov	r2, r4
 8006dfc:	462b      	mov	r3, r5
 8006dfe:	f7f9 fbfb 	bl	80005f8 <__aeabi_dmul>
 8006e02:	4602      	mov	r2, r0
 8006e04:	460b      	mov	r3, r1
 8006e06:	2000      	movs	r0, #0
 8006e08:	4951      	ldr	r1, [pc, #324]	; (8006f50 <__ieee754_pow+0x3d8>)
 8006e0a:	f7f9 fa3d 	bl	8000288 <__aeabi_dsub>
 8006e0e:	4622      	mov	r2, r4
 8006e10:	4680      	mov	r8, r0
 8006e12:	4689      	mov	r9, r1
 8006e14:	462b      	mov	r3, r5
 8006e16:	4620      	mov	r0, r4
 8006e18:	4629      	mov	r1, r5
 8006e1a:	f7f9 fbed 	bl	80005f8 <__aeabi_dmul>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	460b      	mov	r3, r1
 8006e22:	4640      	mov	r0, r8
 8006e24:	4649      	mov	r1, r9
 8006e26:	f7f9 fbe7 	bl	80005f8 <__aeabi_dmul>
 8006e2a:	a341      	add	r3, pc, #260	; (adr r3, 8006f30 <__ieee754_pow+0x3b8>)
 8006e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e30:	f7f9 fbe2 	bl	80005f8 <__aeabi_dmul>
 8006e34:	4602      	mov	r2, r0
 8006e36:	460b      	mov	r3, r1
 8006e38:	4650      	mov	r0, sl
 8006e3a:	4659      	mov	r1, fp
 8006e3c:	f7f9 fa24 	bl	8000288 <__aeabi_dsub>
 8006e40:	4602      	mov	r2, r0
 8006e42:	460b      	mov	r3, r1
 8006e44:	4680      	mov	r8, r0
 8006e46:	4689      	mov	r9, r1
 8006e48:	4630      	mov	r0, r6
 8006e4a:	4639      	mov	r1, r7
 8006e4c:	f7f9 fa1e 	bl	800028c <__adddf3>
 8006e50:	2400      	movs	r4, #0
 8006e52:	4632      	mov	r2, r6
 8006e54:	463b      	mov	r3, r7
 8006e56:	4620      	mov	r0, r4
 8006e58:	460d      	mov	r5, r1
 8006e5a:	f7f9 fa15 	bl	8000288 <__aeabi_dsub>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	460b      	mov	r3, r1
 8006e62:	4640      	mov	r0, r8
 8006e64:	4649      	mov	r1, r9
 8006e66:	f7f9 fa0f 	bl	8000288 <__aeabi_dsub>
 8006e6a:	9b00      	ldr	r3, [sp, #0]
 8006e6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	4313      	orrs	r3, r2
 8006e72:	4682      	mov	sl, r0
 8006e74:	468b      	mov	fp, r1
 8006e76:	f040 81f1 	bne.w	800725c <__ieee754_pow+0x6e4>
 8006e7a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8006f38 <__ieee754_pow+0x3c0>
 8006e7e:	eeb0 8a47 	vmov.f32	s16, s14
 8006e82:	eef0 8a67 	vmov.f32	s17, s15
 8006e86:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006e8a:	2600      	movs	r6, #0
 8006e8c:	4632      	mov	r2, r6
 8006e8e:	463b      	mov	r3, r7
 8006e90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e94:	f7f9 f9f8 	bl	8000288 <__aeabi_dsub>
 8006e98:	4622      	mov	r2, r4
 8006e9a:	462b      	mov	r3, r5
 8006e9c:	f7f9 fbac 	bl	80005f8 <__aeabi_dmul>
 8006ea0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ea4:	4680      	mov	r8, r0
 8006ea6:	4689      	mov	r9, r1
 8006ea8:	4650      	mov	r0, sl
 8006eaa:	4659      	mov	r1, fp
 8006eac:	f7f9 fba4 	bl	80005f8 <__aeabi_dmul>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	4640      	mov	r0, r8
 8006eb6:	4649      	mov	r1, r9
 8006eb8:	f7f9 f9e8 	bl	800028c <__adddf3>
 8006ebc:	4632      	mov	r2, r6
 8006ebe:	463b      	mov	r3, r7
 8006ec0:	4680      	mov	r8, r0
 8006ec2:	4689      	mov	r9, r1
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	4629      	mov	r1, r5
 8006ec8:	f7f9 fb96 	bl	80005f8 <__aeabi_dmul>
 8006ecc:	460b      	mov	r3, r1
 8006ece:	4604      	mov	r4, r0
 8006ed0:	460d      	mov	r5, r1
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	4649      	mov	r1, r9
 8006ed6:	4640      	mov	r0, r8
 8006ed8:	f7f9 f9d8 	bl	800028c <__adddf3>
 8006edc:	4b1d      	ldr	r3, [pc, #116]	; (8006f54 <__ieee754_pow+0x3dc>)
 8006ede:	4299      	cmp	r1, r3
 8006ee0:	ec45 4b19 	vmov	d9, r4, r5
 8006ee4:	4606      	mov	r6, r0
 8006ee6:	460f      	mov	r7, r1
 8006ee8:	468b      	mov	fp, r1
 8006eea:	f340 82fe 	ble.w	80074ea <__ieee754_pow+0x972>
 8006eee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006ef2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006ef6:	4303      	orrs	r3, r0
 8006ef8:	f000 81f0 	beq.w	80072dc <__ieee754_pow+0x764>
 8006efc:	a310      	add	r3, pc, #64	; (adr r3, 8006f40 <__ieee754_pow+0x3c8>)
 8006efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f02:	ec51 0b18 	vmov	r0, r1, d8
 8006f06:	f7f9 fb77 	bl	80005f8 <__aeabi_dmul>
 8006f0a:	a30d      	add	r3, pc, #52	; (adr r3, 8006f40 <__ieee754_pow+0x3c8>)
 8006f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f10:	e6cb      	b.n	8006caa <__ieee754_pow+0x132>
 8006f12:	bf00      	nop
 8006f14:	f3af 8000 	nop.w
 8006f18:	60000000 	.word	0x60000000
 8006f1c:	3ff71547 	.word	0x3ff71547
 8006f20:	f85ddf44 	.word	0xf85ddf44
 8006f24:	3e54ae0b 	.word	0x3e54ae0b
 8006f28:	55555555 	.word	0x55555555
 8006f2c:	3fd55555 	.word	0x3fd55555
 8006f30:	652b82fe 	.word	0x652b82fe
 8006f34:	3ff71547 	.word	0x3ff71547
 8006f38:	00000000 	.word	0x00000000
 8006f3c:	bff00000 	.word	0xbff00000
 8006f40:	8800759c 	.word	0x8800759c
 8006f44:	7e37e43c 	.word	0x7e37e43c
 8006f48:	3ff00000 	.word	0x3ff00000
 8006f4c:	3fd00000 	.word	0x3fd00000
 8006f50:	3fe00000 	.word	0x3fe00000
 8006f54:	408fffff 	.word	0x408fffff
 8006f58:	4bd7      	ldr	r3, [pc, #860]	; (80072b8 <__ieee754_pow+0x740>)
 8006f5a:	ea03 0309 	and.w	r3, r3, r9
 8006f5e:	2200      	movs	r2, #0
 8006f60:	b92b      	cbnz	r3, 8006f6e <__ieee754_pow+0x3f6>
 8006f62:	4bd6      	ldr	r3, [pc, #856]	; (80072bc <__ieee754_pow+0x744>)
 8006f64:	f7f9 fb48 	bl	80005f8 <__aeabi_dmul>
 8006f68:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006f6c:	460c      	mov	r4, r1
 8006f6e:	1523      	asrs	r3, r4, #20
 8006f70:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006f74:	4413      	add	r3, r2
 8006f76:	9309      	str	r3, [sp, #36]	; 0x24
 8006f78:	4bd1      	ldr	r3, [pc, #836]	; (80072c0 <__ieee754_pow+0x748>)
 8006f7a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006f7e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006f82:	429c      	cmp	r4, r3
 8006f84:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006f88:	dd08      	ble.n	8006f9c <__ieee754_pow+0x424>
 8006f8a:	4bce      	ldr	r3, [pc, #824]	; (80072c4 <__ieee754_pow+0x74c>)
 8006f8c:	429c      	cmp	r4, r3
 8006f8e:	f340 8163 	ble.w	8007258 <__ieee754_pow+0x6e0>
 8006f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f94:	3301      	adds	r3, #1
 8006f96:	9309      	str	r3, [sp, #36]	; 0x24
 8006f98:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006f9c:	2400      	movs	r4, #0
 8006f9e:	00e3      	lsls	r3, r4, #3
 8006fa0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fa2:	4bc9      	ldr	r3, [pc, #804]	; (80072c8 <__ieee754_pow+0x750>)
 8006fa4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006fa8:	ed93 7b00 	vldr	d7, [r3]
 8006fac:	4629      	mov	r1, r5
 8006fae:	ec53 2b17 	vmov	r2, r3, d7
 8006fb2:	eeb0 8a47 	vmov.f32	s16, s14
 8006fb6:	eef0 8a67 	vmov.f32	s17, s15
 8006fba:	4682      	mov	sl, r0
 8006fbc:	f7f9 f964 	bl	8000288 <__aeabi_dsub>
 8006fc0:	4652      	mov	r2, sl
 8006fc2:	4606      	mov	r6, r0
 8006fc4:	460f      	mov	r7, r1
 8006fc6:	462b      	mov	r3, r5
 8006fc8:	ec51 0b18 	vmov	r0, r1, d8
 8006fcc:	f7f9 f95e 	bl	800028c <__adddf3>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	2000      	movs	r0, #0
 8006fd6:	49bd      	ldr	r1, [pc, #756]	; (80072cc <__ieee754_pow+0x754>)
 8006fd8:	f7f9 fc38 	bl	800084c <__aeabi_ddiv>
 8006fdc:	ec41 0b19 	vmov	d9, r0, r1
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	4630      	mov	r0, r6
 8006fe6:	4639      	mov	r1, r7
 8006fe8:	f7f9 fb06 	bl	80005f8 <__aeabi_dmul>
 8006fec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006ff0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ff4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	9304      	str	r3, [sp, #16]
 8006ffc:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007000:	46ab      	mov	fp, r5
 8007002:	106d      	asrs	r5, r5, #1
 8007004:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007008:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800700c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007010:	2200      	movs	r2, #0
 8007012:	4640      	mov	r0, r8
 8007014:	4649      	mov	r1, r9
 8007016:	4614      	mov	r4, r2
 8007018:	461d      	mov	r5, r3
 800701a:	f7f9 faed 	bl	80005f8 <__aeabi_dmul>
 800701e:	4602      	mov	r2, r0
 8007020:	460b      	mov	r3, r1
 8007022:	4630      	mov	r0, r6
 8007024:	4639      	mov	r1, r7
 8007026:	f7f9 f92f 	bl	8000288 <__aeabi_dsub>
 800702a:	ec53 2b18 	vmov	r2, r3, d8
 800702e:	4606      	mov	r6, r0
 8007030:	460f      	mov	r7, r1
 8007032:	4620      	mov	r0, r4
 8007034:	4629      	mov	r1, r5
 8007036:	f7f9 f927 	bl	8000288 <__aeabi_dsub>
 800703a:	4602      	mov	r2, r0
 800703c:	460b      	mov	r3, r1
 800703e:	4650      	mov	r0, sl
 8007040:	4659      	mov	r1, fp
 8007042:	f7f9 f921 	bl	8000288 <__aeabi_dsub>
 8007046:	4642      	mov	r2, r8
 8007048:	464b      	mov	r3, r9
 800704a:	f7f9 fad5 	bl	80005f8 <__aeabi_dmul>
 800704e:	4602      	mov	r2, r0
 8007050:	460b      	mov	r3, r1
 8007052:	4630      	mov	r0, r6
 8007054:	4639      	mov	r1, r7
 8007056:	f7f9 f917 	bl	8000288 <__aeabi_dsub>
 800705a:	ec53 2b19 	vmov	r2, r3, d9
 800705e:	f7f9 facb 	bl	80005f8 <__aeabi_dmul>
 8007062:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007066:	ec41 0b18 	vmov	d8, r0, r1
 800706a:	4610      	mov	r0, r2
 800706c:	4619      	mov	r1, r3
 800706e:	f7f9 fac3 	bl	80005f8 <__aeabi_dmul>
 8007072:	a37d      	add	r3, pc, #500	; (adr r3, 8007268 <__ieee754_pow+0x6f0>)
 8007074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007078:	4604      	mov	r4, r0
 800707a:	460d      	mov	r5, r1
 800707c:	f7f9 fabc 	bl	80005f8 <__aeabi_dmul>
 8007080:	a37b      	add	r3, pc, #492	; (adr r3, 8007270 <__ieee754_pow+0x6f8>)
 8007082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007086:	f7f9 f901 	bl	800028c <__adddf3>
 800708a:	4622      	mov	r2, r4
 800708c:	462b      	mov	r3, r5
 800708e:	f7f9 fab3 	bl	80005f8 <__aeabi_dmul>
 8007092:	a379      	add	r3, pc, #484	; (adr r3, 8007278 <__ieee754_pow+0x700>)
 8007094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007098:	f7f9 f8f8 	bl	800028c <__adddf3>
 800709c:	4622      	mov	r2, r4
 800709e:	462b      	mov	r3, r5
 80070a0:	f7f9 faaa 	bl	80005f8 <__aeabi_dmul>
 80070a4:	a376      	add	r3, pc, #472	; (adr r3, 8007280 <__ieee754_pow+0x708>)
 80070a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070aa:	f7f9 f8ef 	bl	800028c <__adddf3>
 80070ae:	4622      	mov	r2, r4
 80070b0:	462b      	mov	r3, r5
 80070b2:	f7f9 faa1 	bl	80005f8 <__aeabi_dmul>
 80070b6:	a374      	add	r3, pc, #464	; (adr r3, 8007288 <__ieee754_pow+0x710>)
 80070b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070bc:	f7f9 f8e6 	bl	800028c <__adddf3>
 80070c0:	4622      	mov	r2, r4
 80070c2:	462b      	mov	r3, r5
 80070c4:	f7f9 fa98 	bl	80005f8 <__aeabi_dmul>
 80070c8:	a371      	add	r3, pc, #452	; (adr r3, 8007290 <__ieee754_pow+0x718>)
 80070ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ce:	f7f9 f8dd 	bl	800028c <__adddf3>
 80070d2:	4622      	mov	r2, r4
 80070d4:	4606      	mov	r6, r0
 80070d6:	460f      	mov	r7, r1
 80070d8:	462b      	mov	r3, r5
 80070da:	4620      	mov	r0, r4
 80070dc:	4629      	mov	r1, r5
 80070de:	f7f9 fa8b 	bl	80005f8 <__aeabi_dmul>
 80070e2:	4602      	mov	r2, r0
 80070e4:	460b      	mov	r3, r1
 80070e6:	4630      	mov	r0, r6
 80070e8:	4639      	mov	r1, r7
 80070ea:	f7f9 fa85 	bl	80005f8 <__aeabi_dmul>
 80070ee:	4642      	mov	r2, r8
 80070f0:	4604      	mov	r4, r0
 80070f2:	460d      	mov	r5, r1
 80070f4:	464b      	mov	r3, r9
 80070f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070fa:	f7f9 f8c7 	bl	800028c <__adddf3>
 80070fe:	ec53 2b18 	vmov	r2, r3, d8
 8007102:	f7f9 fa79 	bl	80005f8 <__aeabi_dmul>
 8007106:	4622      	mov	r2, r4
 8007108:	462b      	mov	r3, r5
 800710a:	f7f9 f8bf 	bl	800028c <__adddf3>
 800710e:	4642      	mov	r2, r8
 8007110:	4682      	mov	sl, r0
 8007112:	468b      	mov	fp, r1
 8007114:	464b      	mov	r3, r9
 8007116:	4640      	mov	r0, r8
 8007118:	4649      	mov	r1, r9
 800711a:	f7f9 fa6d 	bl	80005f8 <__aeabi_dmul>
 800711e:	4b6c      	ldr	r3, [pc, #432]	; (80072d0 <__ieee754_pow+0x758>)
 8007120:	2200      	movs	r2, #0
 8007122:	4606      	mov	r6, r0
 8007124:	460f      	mov	r7, r1
 8007126:	f7f9 f8b1 	bl	800028c <__adddf3>
 800712a:	4652      	mov	r2, sl
 800712c:	465b      	mov	r3, fp
 800712e:	f7f9 f8ad 	bl	800028c <__adddf3>
 8007132:	9c04      	ldr	r4, [sp, #16]
 8007134:	460d      	mov	r5, r1
 8007136:	4622      	mov	r2, r4
 8007138:	460b      	mov	r3, r1
 800713a:	4640      	mov	r0, r8
 800713c:	4649      	mov	r1, r9
 800713e:	f7f9 fa5b 	bl	80005f8 <__aeabi_dmul>
 8007142:	4b63      	ldr	r3, [pc, #396]	; (80072d0 <__ieee754_pow+0x758>)
 8007144:	4680      	mov	r8, r0
 8007146:	4689      	mov	r9, r1
 8007148:	2200      	movs	r2, #0
 800714a:	4620      	mov	r0, r4
 800714c:	4629      	mov	r1, r5
 800714e:	f7f9 f89b 	bl	8000288 <__aeabi_dsub>
 8007152:	4632      	mov	r2, r6
 8007154:	463b      	mov	r3, r7
 8007156:	f7f9 f897 	bl	8000288 <__aeabi_dsub>
 800715a:	4602      	mov	r2, r0
 800715c:	460b      	mov	r3, r1
 800715e:	4650      	mov	r0, sl
 8007160:	4659      	mov	r1, fp
 8007162:	f7f9 f891 	bl	8000288 <__aeabi_dsub>
 8007166:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800716a:	f7f9 fa45 	bl	80005f8 <__aeabi_dmul>
 800716e:	4622      	mov	r2, r4
 8007170:	4606      	mov	r6, r0
 8007172:	460f      	mov	r7, r1
 8007174:	462b      	mov	r3, r5
 8007176:	ec51 0b18 	vmov	r0, r1, d8
 800717a:	f7f9 fa3d 	bl	80005f8 <__aeabi_dmul>
 800717e:	4602      	mov	r2, r0
 8007180:	460b      	mov	r3, r1
 8007182:	4630      	mov	r0, r6
 8007184:	4639      	mov	r1, r7
 8007186:	f7f9 f881 	bl	800028c <__adddf3>
 800718a:	4606      	mov	r6, r0
 800718c:	460f      	mov	r7, r1
 800718e:	4602      	mov	r2, r0
 8007190:	460b      	mov	r3, r1
 8007192:	4640      	mov	r0, r8
 8007194:	4649      	mov	r1, r9
 8007196:	f7f9 f879 	bl	800028c <__adddf3>
 800719a:	9c04      	ldr	r4, [sp, #16]
 800719c:	a33e      	add	r3, pc, #248	; (adr r3, 8007298 <__ieee754_pow+0x720>)
 800719e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a2:	4620      	mov	r0, r4
 80071a4:	460d      	mov	r5, r1
 80071a6:	f7f9 fa27 	bl	80005f8 <__aeabi_dmul>
 80071aa:	4642      	mov	r2, r8
 80071ac:	ec41 0b18 	vmov	d8, r0, r1
 80071b0:	464b      	mov	r3, r9
 80071b2:	4620      	mov	r0, r4
 80071b4:	4629      	mov	r1, r5
 80071b6:	f7f9 f867 	bl	8000288 <__aeabi_dsub>
 80071ba:	4602      	mov	r2, r0
 80071bc:	460b      	mov	r3, r1
 80071be:	4630      	mov	r0, r6
 80071c0:	4639      	mov	r1, r7
 80071c2:	f7f9 f861 	bl	8000288 <__aeabi_dsub>
 80071c6:	a336      	add	r3, pc, #216	; (adr r3, 80072a0 <__ieee754_pow+0x728>)
 80071c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071cc:	f7f9 fa14 	bl	80005f8 <__aeabi_dmul>
 80071d0:	a335      	add	r3, pc, #212	; (adr r3, 80072a8 <__ieee754_pow+0x730>)
 80071d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d6:	4606      	mov	r6, r0
 80071d8:	460f      	mov	r7, r1
 80071da:	4620      	mov	r0, r4
 80071dc:	4629      	mov	r1, r5
 80071de:	f7f9 fa0b 	bl	80005f8 <__aeabi_dmul>
 80071e2:	4602      	mov	r2, r0
 80071e4:	460b      	mov	r3, r1
 80071e6:	4630      	mov	r0, r6
 80071e8:	4639      	mov	r1, r7
 80071ea:	f7f9 f84f 	bl	800028c <__adddf3>
 80071ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80071f0:	4b38      	ldr	r3, [pc, #224]	; (80072d4 <__ieee754_pow+0x75c>)
 80071f2:	4413      	add	r3, r2
 80071f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f8:	f7f9 f848 	bl	800028c <__adddf3>
 80071fc:	4682      	mov	sl, r0
 80071fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007200:	468b      	mov	fp, r1
 8007202:	f7f9 f98f 	bl	8000524 <__aeabi_i2d>
 8007206:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007208:	4b33      	ldr	r3, [pc, #204]	; (80072d8 <__ieee754_pow+0x760>)
 800720a:	4413      	add	r3, r2
 800720c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007210:	4606      	mov	r6, r0
 8007212:	460f      	mov	r7, r1
 8007214:	4652      	mov	r2, sl
 8007216:	465b      	mov	r3, fp
 8007218:	ec51 0b18 	vmov	r0, r1, d8
 800721c:	f7f9 f836 	bl	800028c <__adddf3>
 8007220:	4642      	mov	r2, r8
 8007222:	464b      	mov	r3, r9
 8007224:	f7f9 f832 	bl	800028c <__adddf3>
 8007228:	4632      	mov	r2, r6
 800722a:	463b      	mov	r3, r7
 800722c:	f7f9 f82e 	bl	800028c <__adddf3>
 8007230:	9c04      	ldr	r4, [sp, #16]
 8007232:	4632      	mov	r2, r6
 8007234:	463b      	mov	r3, r7
 8007236:	4620      	mov	r0, r4
 8007238:	460d      	mov	r5, r1
 800723a:	f7f9 f825 	bl	8000288 <__aeabi_dsub>
 800723e:	4642      	mov	r2, r8
 8007240:	464b      	mov	r3, r9
 8007242:	f7f9 f821 	bl	8000288 <__aeabi_dsub>
 8007246:	ec53 2b18 	vmov	r2, r3, d8
 800724a:	f7f9 f81d 	bl	8000288 <__aeabi_dsub>
 800724e:	4602      	mov	r2, r0
 8007250:	460b      	mov	r3, r1
 8007252:	4650      	mov	r0, sl
 8007254:	4659      	mov	r1, fp
 8007256:	e606      	b.n	8006e66 <__ieee754_pow+0x2ee>
 8007258:	2401      	movs	r4, #1
 800725a:	e6a0      	b.n	8006f9e <__ieee754_pow+0x426>
 800725c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80072b0 <__ieee754_pow+0x738>
 8007260:	e60d      	b.n	8006e7e <__ieee754_pow+0x306>
 8007262:	bf00      	nop
 8007264:	f3af 8000 	nop.w
 8007268:	4a454eef 	.word	0x4a454eef
 800726c:	3fca7e28 	.word	0x3fca7e28
 8007270:	93c9db65 	.word	0x93c9db65
 8007274:	3fcd864a 	.word	0x3fcd864a
 8007278:	a91d4101 	.word	0xa91d4101
 800727c:	3fd17460 	.word	0x3fd17460
 8007280:	518f264d 	.word	0x518f264d
 8007284:	3fd55555 	.word	0x3fd55555
 8007288:	db6fabff 	.word	0xdb6fabff
 800728c:	3fdb6db6 	.word	0x3fdb6db6
 8007290:	33333303 	.word	0x33333303
 8007294:	3fe33333 	.word	0x3fe33333
 8007298:	e0000000 	.word	0xe0000000
 800729c:	3feec709 	.word	0x3feec709
 80072a0:	dc3a03fd 	.word	0xdc3a03fd
 80072a4:	3feec709 	.word	0x3feec709
 80072a8:	145b01f5 	.word	0x145b01f5
 80072ac:	be3e2fe0 	.word	0xbe3e2fe0
 80072b0:	00000000 	.word	0x00000000
 80072b4:	3ff00000 	.word	0x3ff00000
 80072b8:	7ff00000 	.word	0x7ff00000
 80072bc:	43400000 	.word	0x43400000
 80072c0:	0003988e 	.word	0x0003988e
 80072c4:	000bb679 	.word	0x000bb679
 80072c8:	08009118 	.word	0x08009118
 80072cc:	3ff00000 	.word	0x3ff00000
 80072d0:	40080000 	.word	0x40080000
 80072d4:	08009138 	.word	0x08009138
 80072d8:	08009128 	.word	0x08009128
 80072dc:	a3b5      	add	r3, pc, #724	; (adr r3, 80075b4 <__ieee754_pow+0xa3c>)
 80072de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e2:	4640      	mov	r0, r8
 80072e4:	4649      	mov	r1, r9
 80072e6:	f7f8 ffd1 	bl	800028c <__adddf3>
 80072ea:	4622      	mov	r2, r4
 80072ec:	ec41 0b1a 	vmov	d10, r0, r1
 80072f0:	462b      	mov	r3, r5
 80072f2:	4630      	mov	r0, r6
 80072f4:	4639      	mov	r1, r7
 80072f6:	f7f8 ffc7 	bl	8000288 <__aeabi_dsub>
 80072fa:	4602      	mov	r2, r0
 80072fc:	460b      	mov	r3, r1
 80072fe:	ec51 0b1a 	vmov	r0, r1, d10
 8007302:	f7f9 fc09 	bl	8000b18 <__aeabi_dcmpgt>
 8007306:	2800      	cmp	r0, #0
 8007308:	f47f adf8 	bne.w	8006efc <__ieee754_pow+0x384>
 800730c:	4aa4      	ldr	r2, [pc, #656]	; (80075a0 <__ieee754_pow+0xa28>)
 800730e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007312:	4293      	cmp	r3, r2
 8007314:	f340 810b 	ble.w	800752e <__ieee754_pow+0x9b6>
 8007318:	151b      	asrs	r3, r3, #20
 800731a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800731e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007322:	fa4a f303 	asr.w	r3, sl, r3
 8007326:	445b      	add	r3, fp
 8007328:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800732c:	4e9d      	ldr	r6, [pc, #628]	; (80075a4 <__ieee754_pow+0xa2c>)
 800732e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007332:	4116      	asrs	r6, r2
 8007334:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007338:	2000      	movs	r0, #0
 800733a:	ea23 0106 	bic.w	r1, r3, r6
 800733e:	f1c2 0214 	rsb	r2, r2, #20
 8007342:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007346:	fa4a fa02 	asr.w	sl, sl, r2
 800734a:	f1bb 0f00 	cmp.w	fp, #0
 800734e:	4602      	mov	r2, r0
 8007350:	460b      	mov	r3, r1
 8007352:	4620      	mov	r0, r4
 8007354:	4629      	mov	r1, r5
 8007356:	bfb8      	it	lt
 8007358:	f1ca 0a00 	rsblt	sl, sl, #0
 800735c:	f7f8 ff94 	bl	8000288 <__aeabi_dsub>
 8007360:	ec41 0b19 	vmov	d9, r0, r1
 8007364:	4642      	mov	r2, r8
 8007366:	464b      	mov	r3, r9
 8007368:	ec51 0b19 	vmov	r0, r1, d9
 800736c:	f7f8 ff8e 	bl	800028c <__adddf3>
 8007370:	2400      	movs	r4, #0
 8007372:	a379      	add	r3, pc, #484	; (adr r3, 8007558 <__ieee754_pow+0x9e0>)
 8007374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007378:	4620      	mov	r0, r4
 800737a:	460d      	mov	r5, r1
 800737c:	f7f9 f93c 	bl	80005f8 <__aeabi_dmul>
 8007380:	ec53 2b19 	vmov	r2, r3, d9
 8007384:	4606      	mov	r6, r0
 8007386:	460f      	mov	r7, r1
 8007388:	4620      	mov	r0, r4
 800738a:	4629      	mov	r1, r5
 800738c:	f7f8 ff7c 	bl	8000288 <__aeabi_dsub>
 8007390:	4602      	mov	r2, r0
 8007392:	460b      	mov	r3, r1
 8007394:	4640      	mov	r0, r8
 8007396:	4649      	mov	r1, r9
 8007398:	f7f8 ff76 	bl	8000288 <__aeabi_dsub>
 800739c:	a370      	add	r3, pc, #448	; (adr r3, 8007560 <__ieee754_pow+0x9e8>)
 800739e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a2:	f7f9 f929 	bl	80005f8 <__aeabi_dmul>
 80073a6:	a370      	add	r3, pc, #448	; (adr r3, 8007568 <__ieee754_pow+0x9f0>)
 80073a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ac:	4680      	mov	r8, r0
 80073ae:	4689      	mov	r9, r1
 80073b0:	4620      	mov	r0, r4
 80073b2:	4629      	mov	r1, r5
 80073b4:	f7f9 f920 	bl	80005f8 <__aeabi_dmul>
 80073b8:	4602      	mov	r2, r0
 80073ba:	460b      	mov	r3, r1
 80073bc:	4640      	mov	r0, r8
 80073be:	4649      	mov	r1, r9
 80073c0:	f7f8 ff64 	bl	800028c <__adddf3>
 80073c4:	4604      	mov	r4, r0
 80073c6:	460d      	mov	r5, r1
 80073c8:	4602      	mov	r2, r0
 80073ca:	460b      	mov	r3, r1
 80073cc:	4630      	mov	r0, r6
 80073ce:	4639      	mov	r1, r7
 80073d0:	f7f8 ff5c 	bl	800028c <__adddf3>
 80073d4:	4632      	mov	r2, r6
 80073d6:	463b      	mov	r3, r7
 80073d8:	4680      	mov	r8, r0
 80073da:	4689      	mov	r9, r1
 80073dc:	f7f8 ff54 	bl	8000288 <__aeabi_dsub>
 80073e0:	4602      	mov	r2, r0
 80073e2:	460b      	mov	r3, r1
 80073e4:	4620      	mov	r0, r4
 80073e6:	4629      	mov	r1, r5
 80073e8:	f7f8 ff4e 	bl	8000288 <__aeabi_dsub>
 80073ec:	4642      	mov	r2, r8
 80073ee:	4606      	mov	r6, r0
 80073f0:	460f      	mov	r7, r1
 80073f2:	464b      	mov	r3, r9
 80073f4:	4640      	mov	r0, r8
 80073f6:	4649      	mov	r1, r9
 80073f8:	f7f9 f8fe 	bl	80005f8 <__aeabi_dmul>
 80073fc:	a35c      	add	r3, pc, #368	; (adr r3, 8007570 <__ieee754_pow+0x9f8>)
 80073fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007402:	4604      	mov	r4, r0
 8007404:	460d      	mov	r5, r1
 8007406:	f7f9 f8f7 	bl	80005f8 <__aeabi_dmul>
 800740a:	a35b      	add	r3, pc, #364	; (adr r3, 8007578 <__ieee754_pow+0xa00>)
 800740c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007410:	f7f8 ff3a 	bl	8000288 <__aeabi_dsub>
 8007414:	4622      	mov	r2, r4
 8007416:	462b      	mov	r3, r5
 8007418:	f7f9 f8ee 	bl	80005f8 <__aeabi_dmul>
 800741c:	a358      	add	r3, pc, #352	; (adr r3, 8007580 <__ieee754_pow+0xa08>)
 800741e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007422:	f7f8 ff33 	bl	800028c <__adddf3>
 8007426:	4622      	mov	r2, r4
 8007428:	462b      	mov	r3, r5
 800742a:	f7f9 f8e5 	bl	80005f8 <__aeabi_dmul>
 800742e:	a356      	add	r3, pc, #344	; (adr r3, 8007588 <__ieee754_pow+0xa10>)
 8007430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007434:	f7f8 ff28 	bl	8000288 <__aeabi_dsub>
 8007438:	4622      	mov	r2, r4
 800743a:	462b      	mov	r3, r5
 800743c:	f7f9 f8dc 	bl	80005f8 <__aeabi_dmul>
 8007440:	a353      	add	r3, pc, #332	; (adr r3, 8007590 <__ieee754_pow+0xa18>)
 8007442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007446:	f7f8 ff21 	bl	800028c <__adddf3>
 800744a:	4622      	mov	r2, r4
 800744c:	462b      	mov	r3, r5
 800744e:	f7f9 f8d3 	bl	80005f8 <__aeabi_dmul>
 8007452:	4602      	mov	r2, r0
 8007454:	460b      	mov	r3, r1
 8007456:	4640      	mov	r0, r8
 8007458:	4649      	mov	r1, r9
 800745a:	f7f8 ff15 	bl	8000288 <__aeabi_dsub>
 800745e:	4604      	mov	r4, r0
 8007460:	460d      	mov	r5, r1
 8007462:	4602      	mov	r2, r0
 8007464:	460b      	mov	r3, r1
 8007466:	4640      	mov	r0, r8
 8007468:	4649      	mov	r1, r9
 800746a:	f7f9 f8c5 	bl	80005f8 <__aeabi_dmul>
 800746e:	2200      	movs	r2, #0
 8007470:	ec41 0b19 	vmov	d9, r0, r1
 8007474:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007478:	4620      	mov	r0, r4
 800747a:	4629      	mov	r1, r5
 800747c:	f7f8 ff04 	bl	8000288 <__aeabi_dsub>
 8007480:	4602      	mov	r2, r0
 8007482:	460b      	mov	r3, r1
 8007484:	ec51 0b19 	vmov	r0, r1, d9
 8007488:	f7f9 f9e0 	bl	800084c <__aeabi_ddiv>
 800748c:	4632      	mov	r2, r6
 800748e:	4604      	mov	r4, r0
 8007490:	460d      	mov	r5, r1
 8007492:	463b      	mov	r3, r7
 8007494:	4640      	mov	r0, r8
 8007496:	4649      	mov	r1, r9
 8007498:	f7f9 f8ae 	bl	80005f8 <__aeabi_dmul>
 800749c:	4632      	mov	r2, r6
 800749e:	463b      	mov	r3, r7
 80074a0:	f7f8 fef4 	bl	800028c <__adddf3>
 80074a4:	4602      	mov	r2, r0
 80074a6:	460b      	mov	r3, r1
 80074a8:	4620      	mov	r0, r4
 80074aa:	4629      	mov	r1, r5
 80074ac:	f7f8 feec 	bl	8000288 <__aeabi_dsub>
 80074b0:	4642      	mov	r2, r8
 80074b2:	464b      	mov	r3, r9
 80074b4:	f7f8 fee8 	bl	8000288 <__aeabi_dsub>
 80074b8:	460b      	mov	r3, r1
 80074ba:	4602      	mov	r2, r0
 80074bc:	493a      	ldr	r1, [pc, #232]	; (80075a8 <__ieee754_pow+0xa30>)
 80074be:	2000      	movs	r0, #0
 80074c0:	f7f8 fee2 	bl	8000288 <__aeabi_dsub>
 80074c4:	e9cd 0100 	strd	r0, r1, [sp]
 80074c8:	9b01      	ldr	r3, [sp, #4]
 80074ca:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80074ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074d2:	da2f      	bge.n	8007534 <__ieee754_pow+0x9bc>
 80074d4:	4650      	mov	r0, sl
 80074d6:	ed9d 0b00 	vldr	d0, [sp]
 80074da:	f001 faed 	bl	8008ab8 <scalbn>
 80074de:	ec51 0b10 	vmov	r0, r1, d0
 80074e2:	ec53 2b18 	vmov	r2, r3, d8
 80074e6:	f7ff bbe0 	b.w	8006caa <__ieee754_pow+0x132>
 80074ea:	4b30      	ldr	r3, [pc, #192]	; (80075ac <__ieee754_pow+0xa34>)
 80074ec:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80074f0:	429e      	cmp	r6, r3
 80074f2:	f77f af0b 	ble.w	800730c <__ieee754_pow+0x794>
 80074f6:	4b2e      	ldr	r3, [pc, #184]	; (80075b0 <__ieee754_pow+0xa38>)
 80074f8:	440b      	add	r3, r1
 80074fa:	4303      	orrs	r3, r0
 80074fc:	d00b      	beq.n	8007516 <__ieee754_pow+0x99e>
 80074fe:	a326      	add	r3, pc, #152	; (adr r3, 8007598 <__ieee754_pow+0xa20>)
 8007500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007504:	ec51 0b18 	vmov	r0, r1, d8
 8007508:	f7f9 f876 	bl	80005f8 <__aeabi_dmul>
 800750c:	a322      	add	r3, pc, #136	; (adr r3, 8007598 <__ieee754_pow+0xa20>)
 800750e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007512:	f7ff bbca 	b.w	8006caa <__ieee754_pow+0x132>
 8007516:	4622      	mov	r2, r4
 8007518:	462b      	mov	r3, r5
 800751a:	f7f8 feb5 	bl	8000288 <__aeabi_dsub>
 800751e:	4642      	mov	r2, r8
 8007520:	464b      	mov	r3, r9
 8007522:	f7f9 faef 	bl	8000b04 <__aeabi_dcmpge>
 8007526:	2800      	cmp	r0, #0
 8007528:	f43f aef0 	beq.w	800730c <__ieee754_pow+0x794>
 800752c:	e7e7      	b.n	80074fe <__ieee754_pow+0x986>
 800752e:	f04f 0a00 	mov.w	sl, #0
 8007532:	e717      	b.n	8007364 <__ieee754_pow+0x7ec>
 8007534:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007538:	4619      	mov	r1, r3
 800753a:	e7d2      	b.n	80074e2 <__ieee754_pow+0x96a>
 800753c:	491a      	ldr	r1, [pc, #104]	; (80075a8 <__ieee754_pow+0xa30>)
 800753e:	2000      	movs	r0, #0
 8007540:	f7ff bb9e 	b.w	8006c80 <__ieee754_pow+0x108>
 8007544:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007548:	f7ff bb9a 	b.w	8006c80 <__ieee754_pow+0x108>
 800754c:	9000      	str	r0, [sp, #0]
 800754e:	f7ff bb76 	b.w	8006c3e <__ieee754_pow+0xc6>
 8007552:	2100      	movs	r1, #0
 8007554:	f7ff bb60 	b.w	8006c18 <__ieee754_pow+0xa0>
 8007558:	00000000 	.word	0x00000000
 800755c:	3fe62e43 	.word	0x3fe62e43
 8007560:	fefa39ef 	.word	0xfefa39ef
 8007564:	3fe62e42 	.word	0x3fe62e42
 8007568:	0ca86c39 	.word	0x0ca86c39
 800756c:	be205c61 	.word	0xbe205c61
 8007570:	72bea4d0 	.word	0x72bea4d0
 8007574:	3e663769 	.word	0x3e663769
 8007578:	c5d26bf1 	.word	0xc5d26bf1
 800757c:	3ebbbd41 	.word	0x3ebbbd41
 8007580:	af25de2c 	.word	0xaf25de2c
 8007584:	3f11566a 	.word	0x3f11566a
 8007588:	16bebd93 	.word	0x16bebd93
 800758c:	3f66c16c 	.word	0x3f66c16c
 8007590:	5555553e 	.word	0x5555553e
 8007594:	3fc55555 	.word	0x3fc55555
 8007598:	c2f8f359 	.word	0xc2f8f359
 800759c:	01a56e1f 	.word	0x01a56e1f
 80075a0:	3fe00000 	.word	0x3fe00000
 80075a4:	000fffff 	.word	0x000fffff
 80075a8:	3ff00000 	.word	0x3ff00000
 80075ac:	4090cbff 	.word	0x4090cbff
 80075b0:	3f6f3400 	.word	0x3f6f3400
 80075b4:	652b82fe 	.word	0x652b82fe
 80075b8:	3c971547 	.word	0x3c971547
 80075bc:	00000000 	.word	0x00000000

080075c0 <__ieee754_rem_pio2>:
 80075c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075c4:	ed2d 8b02 	vpush	{d8}
 80075c8:	ec55 4b10 	vmov	r4, r5, d0
 80075cc:	4bca      	ldr	r3, [pc, #808]	; (80078f8 <__ieee754_rem_pio2+0x338>)
 80075ce:	b08b      	sub	sp, #44	; 0x2c
 80075d0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80075d4:	4598      	cmp	r8, r3
 80075d6:	4682      	mov	sl, r0
 80075d8:	9502      	str	r5, [sp, #8]
 80075da:	dc08      	bgt.n	80075ee <__ieee754_rem_pio2+0x2e>
 80075dc:	2200      	movs	r2, #0
 80075de:	2300      	movs	r3, #0
 80075e0:	ed80 0b00 	vstr	d0, [r0]
 80075e4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80075e8:	f04f 0b00 	mov.w	fp, #0
 80075ec:	e028      	b.n	8007640 <__ieee754_rem_pio2+0x80>
 80075ee:	4bc3      	ldr	r3, [pc, #780]	; (80078fc <__ieee754_rem_pio2+0x33c>)
 80075f0:	4598      	cmp	r8, r3
 80075f2:	dc78      	bgt.n	80076e6 <__ieee754_rem_pio2+0x126>
 80075f4:	9b02      	ldr	r3, [sp, #8]
 80075f6:	4ec2      	ldr	r6, [pc, #776]	; (8007900 <__ieee754_rem_pio2+0x340>)
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	ee10 0a10 	vmov	r0, s0
 80075fe:	a3b0      	add	r3, pc, #704	; (adr r3, 80078c0 <__ieee754_rem_pio2+0x300>)
 8007600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007604:	4629      	mov	r1, r5
 8007606:	dd39      	ble.n	800767c <__ieee754_rem_pio2+0xbc>
 8007608:	f7f8 fe3e 	bl	8000288 <__aeabi_dsub>
 800760c:	45b0      	cmp	r8, r6
 800760e:	4604      	mov	r4, r0
 8007610:	460d      	mov	r5, r1
 8007612:	d01b      	beq.n	800764c <__ieee754_rem_pio2+0x8c>
 8007614:	a3ac      	add	r3, pc, #688	; (adr r3, 80078c8 <__ieee754_rem_pio2+0x308>)
 8007616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761a:	f7f8 fe35 	bl	8000288 <__aeabi_dsub>
 800761e:	4602      	mov	r2, r0
 8007620:	460b      	mov	r3, r1
 8007622:	e9ca 2300 	strd	r2, r3, [sl]
 8007626:	4620      	mov	r0, r4
 8007628:	4629      	mov	r1, r5
 800762a:	f7f8 fe2d 	bl	8000288 <__aeabi_dsub>
 800762e:	a3a6      	add	r3, pc, #664	; (adr r3, 80078c8 <__ieee754_rem_pio2+0x308>)
 8007630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007634:	f7f8 fe28 	bl	8000288 <__aeabi_dsub>
 8007638:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800763c:	f04f 0b01 	mov.w	fp, #1
 8007640:	4658      	mov	r0, fp
 8007642:	b00b      	add	sp, #44	; 0x2c
 8007644:	ecbd 8b02 	vpop	{d8}
 8007648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800764c:	a3a0      	add	r3, pc, #640	; (adr r3, 80078d0 <__ieee754_rem_pio2+0x310>)
 800764e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007652:	f7f8 fe19 	bl	8000288 <__aeabi_dsub>
 8007656:	a3a0      	add	r3, pc, #640	; (adr r3, 80078d8 <__ieee754_rem_pio2+0x318>)
 8007658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765c:	4604      	mov	r4, r0
 800765e:	460d      	mov	r5, r1
 8007660:	f7f8 fe12 	bl	8000288 <__aeabi_dsub>
 8007664:	4602      	mov	r2, r0
 8007666:	460b      	mov	r3, r1
 8007668:	e9ca 2300 	strd	r2, r3, [sl]
 800766c:	4620      	mov	r0, r4
 800766e:	4629      	mov	r1, r5
 8007670:	f7f8 fe0a 	bl	8000288 <__aeabi_dsub>
 8007674:	a398      	add	r3, pc, #608	; (adr r3, 80078d8 <__ieee754_rem_pio2+0x318>)
 8007676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767a:	e7db      	b.n	8007634 <__ieee754_rem_pio2+0x74>
 800767c:	f7f8 fe06 	bl	800028c <__adddf3>
 8007680:	45b0      	cmp	r8, r6
 8007682:	4604      	mov	r4, r0
 8007684:	460d      	mov	r5, r1
 8007686:	d016      	beq.n	80076b6 <__ieee754_rem_pio2+0xf6>
 8007688:	a38f      	add	r3, pc, #572	; (adr r3, 80078c8 <__ieee754_rem_pio2+0x308>)
 800768a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768e:	f7f8 fdfd 	bl	800028c <__adddf3>
 8007692:	4602      	mov	r2, r0
 8007694:	460b      	mov	r3, r1
 8007696:	e9ca 2300 	strd	r2, r3, [sl]
 800769a:	4620      	mov	r0, r4
 800769c:	4629      	mov	r1, r5
 800769e:	f7f8 fdf3 	bl	8000288 <__aeabi_dsub>
 80076a2:	a389      	add	r3, pc, #548	; (adr r3, 80078c8 <__ieee754_rem_pio2+0x308>)
 80076a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a8:	f7f8 fdf0 	bl	800028c <__adddf3>
 80076ac:	f04f 3bff 	mov.w	fp, #4294967295
 80076b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80076b4:	e7c4      	b.n	8007640 <__ieee754_rem_pio2+0x80>
 80076b6:	a386      	add	r3, pc, #536	; (adr r3, 80078d0 <__ieee754_rem_pio2+0x310>)
 80076b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076bc:	f7f8 fde6 	bl	800028c <__adddf3>
 80076c0:	a385      	add	r3, pc, #532	; (adr r3, 80078d8 <__ieee754_rem_pio2+0x318>)
 80076c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c6:	4604      	mov	r4, r0
 80076c8:	460d      	mov	r5, r1
 80076ca:	f7f8 fddf 	bl	800028c <__adddf3>
 80076ce:	4602      	mov	r2, r0
 80076d0:	460b      	mov	r3, r1
 80076d2:	e9ca 2300 	strd	r2, r3, [sl]
 80076d6:	4620      	mov	r0, r4
 80076d8:	4629      	mov	r1, r5
 80076da:	f7f8 fdd5 	bl	8000288 <__aeabi_dsub>
 80076de:	a37e      	add	r3, pc, #504	; (adr r3, 80078d8 <__ieee754_rem_pio2+0x318>)
 80076e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e4:	e7e0      	b.n	80076a8 <__ieee754_rem_pio2+0xe8>
 80076e6:	4b87      	ldr	r3, [pc, #540]	; (8007904 <__ieee754_rem_pio2+0x344>)
 80076e8:	4598      	cmp	r8, r3
 80076ea:	f300 80d9 	bgt.w	80078a0 <__ieee754_rem_pio2+0x2e0>
 80076ee:	f001 f8c3 	bl	8008878 <fabs>
 80076f2:	ec55 4b10 	vmov	r4, r5, d0
 80076f6:	ee10 0a10 	vmov	r0, s0
 80076fa:	a379      	add	r3, pc, #484	; (adr r3, 80078e0 <__ieee754_rem_pio2+0x320>)
 80076fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007700:	4629      	mov	r1, r5
 8007702:	f7f8 ff79 	bl	80005f8 <__aeabi_dmul>
 8007706:	4b80      	ldr	r3, [pc, #512]	; (8007908 <__ieee754_rem_pio2+0x348>)
 8007708:	2200      	movs	r2, #0
 800770a:	f7f8 fdbf 	bl	800028c <__adddf3>
 800770e:	f7f9 fa23 	bl	8000b58 <__aeabi_d2iz>
 8007712:	4683      	mov	fp, r0
 8007714:	f7f8 ff06 	bl	8000524 <__aeabi_i2d>
 8007718:	4602      	mov	r2, r0
 800771a:	460b      	mov	r3, r1
 800771c:	ec43 2b18 	vmov	d8, r2, r3
 8007720:	a367      	add	r3, pc, #412	; (adr r3, 80078c0 <__ieee754_rem_pio2+0x300>)
 8007722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007726:	f7f8 ff67 	bl	80005f8 <__aeabi_dmul>
 800772a:	4602      	mov	r2, r0
 800772c:	460b      	mov	r3, r1
 800772e:	4620      	mov	r0, r4
 8007730:	4629      	mov	r1, r5
 8007732:	f7f8 fda9 	bl	8000288 <__aeabi_dsub>
 8007736:	a364      	add	r3, pc, #400	; (adr r3, 80078c8 <__ieee754_rem_pio2+0x308>)
 8007738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773c:	4606      	mov	r6, r0
 800773e:	460f      	mov	r7, r1
 8007740:	ec51 0b18 	vmov	r0, r1, d8
 8007744:	f7f8 ff58 	bl	80005f8 <__aeabi_dmul>
 8007748:	f1bb 0f1f 	cmp.w	fp, #31
 800774c:	4604      	mov	r4, r0
 800774e:	460d      	mov	r5, r1
 8007750:	dc0d      	bgt.n	800776e <__ieee754_rem_pio2+0x1ae>
 8007752:	4b6e      	ldr	r3, [pc, #440]	; (800790c <__ieee754_rem_pio2+0x34c>)
 8007754:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800775c:	4543      	cmp	r3, r8
 800775e:	d006      	beq.n	800776e <__ieee754_rem_pio2+0x1ae>
 8007760:	4622      	mov	r2, r4
 8007762:	462b      	mov	r3, r5
 8007764:	4630      	mov	r0, r6
 8007766:	4639      	mov	r1, r7
 8007768:	f7f8 fd8e 	bl	8000288 <__aeabi_dsub>
 800776c:	e00f      	b.n	800778e <__ieee754_rem_pio2+0x1ce>
 800776e:	462b      	mov	r3, r5
 8007770:	4622      	mov	r2, r4
 8007772:	4630      	mov	r0, r6
 8007774:	4639      	mov	r1, r7
 8007776:	f7f8 fd87 	bl	8000288 <__aeabi_dsub>
 800777a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800777e:	9303      	str	r3, [sp, #12]
 8007780:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007784:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8007788:	f1b8 0f10 	cmp.w	r8, #16
 800778c:	dc02      	bgt.n	8007794 <__ieee754_rem_pio2+0x1d4>
 800778e:	e9ca 0100 	strd	r0, r1, [sl]
 8007792:	e039      	b.n	8007808 <__ieee754_rem_pio2+0x248>
 8007794:	a34e      	add	r3, pc, #312	; (adr r3, 80078d0 <__ieee754_rem_pio2+0x310>)
 8007796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779a:	ec51 0b18 	vmov	r0, r1, d8
 800779e:	f7f8 ff2b 	bl	80005f8 <__aeabi_dmul>
 80077a2:	4604      	mov	r4, r0
 80077a4:	460d      	mov	r5, r1
 80077a6:	4602      	mov	r2, r0
 80077a8:	460b      	mov	r3, r1
 80077aa:	4630      	mov	r0, r6
 80077ac:	4639      	mov	r1, r7
 80077ae:	f7f8 fd6b 	bl	8000288 <__aeabi_dsub>
 80077b2:	4602      	mov	r2, r0
 80077b4:	460b      	mov	r3, r1
 80077b6:	4680      	mov	r8, r0
 80077b8:	4689      	mov	r9, r1
 80077ba:	4630      	mov	r0, r6
 80077bc:	4639      	mov	r1, r7
 80077be:	f7f8 fd63 	bl	8000288 <__aeabi_dsub>
 80077c2:	4622      	mov	r2, r4
 80077c4:	462b      	mov	r3, r5
 80077c6:	f7f8 fd5f 	bl	8000288 <__aeabi_dsub>
 80077ca:	a343      	add	r3, pc, #268	; (adr r3, 80078d8 <__ieee754_rem_pio2+0x318>)
 80077cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d0:	4604      	mov	r4, r0
 80077d2:	460d      	mov	r5, r1
 80077d4:	ec51 0b18 	vmov	r0, r1, d8
 80077d8:	f7f8 ff0e 	bl	80005f8 <__aeabi_dmul>
 80077dc:	4622      	mov	r2, r4
 80077de:	462b      	mov	r3, r5
 80077e0:	f7f8 fd52 	bl	8000288 <__aeabi_dsub>
 80077e4:	4602      	mov	r2, r0
 80077e6:	460b      	mov	r3, r1
 80077e8:	4604      	mov	r4, r0
 80077ea:	460d      	mov	r5, r1
 80077ec:	4640      	mov	r0, r8
 80077ee:	4649      	mov	r1, r9
 80077f0:	f7f8 fd4a 	bl	8000288 <__aeabi_dsub>
 80077f4:	9a03      	ldr	r2, [sp, #12]
 80077f6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	2b31      	cmp	r3, #49	; 0x31
 80077fe:	dc24      	bgt.n	800784a <__ieee754_rem_pio2+0x28a>
 8007800:	e9ca 0100 	strd	r0, r1, [sl]
 8007804:	4646      	mov	r6, r8
 8007806:	464f      	mov	r7, r9
 8007808:	e9da 8900 	ldrd	r8, r9, [sl]
 800780c:	4630      	mov	r0, r6
 800780e:	4642      	mov	r2, r8
 8007810:	464b      	mov	r3, r9
 8007812:	4639      	mov	r1, r7
 8007814:	f7f8 fd38 	bl	8000288 <__aeabi_dsub>
 8007818:	462b      	mov	r3, r5
 800781a:	4622      	mov	r2, r4
 800781c:	f7f8 fd34 	bl	8000288 <__aeabi_dsub>
 8007820:	9b02      	ldr	r3, [sp, #8]
 8007822:	2b00      	cmp	r3, #0
 8007824:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007828:	f6bf af0a 	bge.w	8007640 <__ieee754_rem_pio2+0x80>
 800782c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007830:	f8ca 3004 	str.w	r3, [sl, #4]
 8007834:	f8ca 8000 	str.w	r8, [sl]
 8007838:	f8ca 0008 	str.w	r0, [sl, #8]
 800783c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007840:	f8ca 300c 	str.w	r3, [sl, #12]
 8007844:	f1cb 0b00 	rsb	fp, fp, #0
 8007848:	e6fa      	b.n	8007640 <__ieee754_rem_pio2+0x80>
 800784a:	a327      	add	r3, pc, #156	; (adr r3, 80078e8 <__ieee754_rem_pio2+0x328>)
 800784c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007850:	ec51 0b18 	vmov	r0, r1, d8
 8007854:	f7f8 fed0 	bl	80005f8 <__aeabi_dmul>
 8007858:	4604      	mov	r4, r0
 800785a:	460d      	mov	r5, r1
 800785c:	4602      	mov	r2, r0
 800785e:	460b      	mov	r3, r1
 8007860:	4640      	mov	r0, r8
 8007862:	4649      	mov	r1, r9
 8007864:	f7f8 fd10 	bl	8000288 <__aeabi_dsub>
 8007868:	4602      	mov	r2, r0
 800786a:	460b      	mov	r3, r1
 800786c:	4606      	mov	r6, r0
 800786e:	460f      	mov	r7, r1
 8007870:	4640      	mov	r0, r8
 8007872:	4649      	mov	r1, r9
 8007874:	f7f8 fd08 	bl	8000288 <__aeabi_dsub>
 8007878:	4622      	mov	r2, r4
 800787a:	462b      	mov	r3, r5
 800787c:	f7f8 fd04 	bl	8000288 <__aeabi_dsub>
 8007880:	a31b      	add	r3, pc, #108	; (adr r3, 80078f0 <__ieee754_rem_pio2+0x330>)
 8007882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007886:	4604      	mov	r4, r0
 8007888:	460d      	mov	r5, r1
 800788a:	ec51 0b18 	vmov	r0, r1, d8
 800788e:	f7f8 feb3 	bl	80005f8 <__aeabi_dmul>
 8007892:	4622      	mov	r2, r4
 8007894:	462b      	mov	r3, r5
 8007896:	f7f8 fcf7 	bl	8000288 <__aeabi_dsub>
 800789a:	4604      	mov	r4, r0
 800789c:	460d      	mov	r5, r1
 800789e:	e75f      	b.n	8007760 <__ieee754_rem_pio2+0x1a0>
 80078a0:	4b1b      	ldr	r3, [pc, #108]	; (8007910 <__ieee754_rem_pio2+0x350>)
 80078a2:	4598      	cmp	r8, r3
 80078a4:	dd36      	ble.n	8007914 <__ieee754_rem_pio2+0x354>
 80078a6:	ee10 2a10 	vmov	r2, s0
 80078aa:	462b      	mov	r3, r5
 80078ac:	4620      	mov	r0, r4
 80078ae:	4629      	mov	r1, r5
 80078b0:	f7f8 fcea 	bl	8000288 <__aeabi_dsub>
 80078b4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80078b8:	e9ca 0100 	strd	r0, r1, [sl]
 80078bc:	e694      	b.n	80075e8 <__ieee754_rem_pio2+0x28>
 80078be:	bf00      	nop
 80078c0:	54400000 	.word	0x54400000
 80078c4:	3ff921fb 	.word	0x3ff921fb
 80078c8:	1a626331 	.word	0x1a626331
 80078cc:	3dd0b461 	.word	0x3dd0b461
 80078d0:	1a600000 	.word	0x1a600000
 80078d4:	3dd0b461 	.word	0x3dd0b461
 80078d8:	2e037073 	.word	0x2e037073
 80078dc:	3ba3198a 	.word	0x3ba3198a
 80078e0:	6dc9c883 	.word	0x6dc9c883
 80078e4:	3fe45f30 	.word	0x3fe45f30
 80078e8:	2e000000 	.word	0x2e000000
 80078ec:	3ba3198a 	.word	0x3ba3198a
 80078f0:	252049c1 	.word	0x252049c1
 80078f4:	397b839a 	.word	0x397b839a
 80078f8:	3fe921fb 	.word	0x3fe921fb
 80078fc:	4002d97b 	.word	0x4002d97b
 8007900:	3ff921fb 	.word	0x3ff921fb
 8007904:	413921fb 	.word	0x413921fb
 8007908:	3fe00000 	.word	0x3fe00000
 800790c:	08009148 	.word	0x08009148
 8007910:	7fefffff 	.word	0x7fefffff
 8007914:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007918:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800791c:	ee10 0a10 	vmov	r0, s0
 8007920:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8007924:	ee10 6a10 	vmov	r6, s0
 8007928:	460f      	mov	r7, r1
 800792a:	f7f9 f915 	bl	8000b58 <__aeabi_d2iz>
 800792e:	f7f8 fdf9 	bl	8000524 <__aeabi_i2d>
 8007932:	4602      	mov	r2, r0
 8007934:	460b      	mov	r3, r1
 8007936:	4630      	mov	r0, r6
 8007938:	4639      	mov	r1, r7
 800793a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800793e:	f7f8 fca3 	bl	8000288 <__aeabi_dsub>
 8007942:	4b22      	ldr	r3, [pc, #136]	; (80079cc <__ieee754_rem_pio2+0x40c>)
 8007944:	2200      	movs	r2, #0
 8007946:	f7f8 fe57 	bl	80005f8 <__aeabi_dmul>
 800794a:	460f      	mov	r7, r1
 800794c:	4606      	mov	r6, r0
 800794e:	f7f9 f903 	bl	8000b58 <__aeabi_d2iz>
 8007952:	f7f8 fde7 	bl	8000524 <__aeabi_i2d>
 8007956:	4602      	mov	r2, r0
 8007958:	460b      	mov	r3, r1
 800795a:	4630      	mov	r0, r6
 800795c:	4639      	mov	r1, r7
 800795e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007962:	f7f8 fc91 	bl	8000288 <__aeabi_dsub>
 8007966:	4b19      	ldr	r3, [pc, #100]	; (80079cc <__ieee754_rem_pio2+0x40c>)
 8007968:	2200      	movs	r2, #0
 800796a:	f7f8 fe45 	bl	80005f8 <__aeabi_dmul>
 800796e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007972:	ad04      	add	r5, sp, #16
 8007974:	f04f 0803 	mov.w	r8, #3
 8007978:	46a9      	mov	r9, r5
 800797a:	2600      	movs	r6, #0
 800797c:	2700      	movs	r7, #0
 800797e:	4632      	mov	r2, r6
 8007980:	463b      	mov	r3, r7
 8007982:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8007986:	46c3      	mov	fp, r8
 8007988:	3d08      	subs	r5, #8
 800798a:	f108 38ff 	add.w	r8, r8, #4294967295
 800798e:	f7f9 f89b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007992:	2800      	cmp	r0, #0
 8007994:	d1f3      	bne.n	800797e <__ieee754_rem_pio2+0x3be>
 8007996:	4b0e      	ldr	r3, [pc, #56]	; (80079d0 <__ieee754_rem_pio2+0x410>)
 8007998:	9301      	str	r3, [sp, #4]
 800799a:	2302      	movs	r3, #2
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	4622      	mov	r2, r4
 80079a0:	465b      	mov	r3, fp
 80079a2:	4651      	mov	r1, sl
 80079a4:	4648      	mov	r0, r9
 80079a6:	f000 f993 	bl	8007cd0 <__kernel_rem_pio2>
 80079aa:	9b02      	ldr	r3, [sp, #8]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	4683      	mov	fp, r0
 80079b0:	f6bf ae46 	bge.w	8007640 <__ieee754_rem_pio2+0x80>
 80079b4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80079b8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80079bc:	f8ca 3004 	str.w	r3, [sl, #4]
 80079c0:	f8da 300c 	ldr.w	r3, [sl, #12]
 80079c4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80079c8:	e73a      	b.n	8007840 <__ieee754_rem_pio2+0x280>
 80079ca:	bf00      	nop
 80079cc:	41700000 	.word	0x41700000
 80079d0:	080091c8 	.word	0x080091c8

080079d4 <__ieee754_sqrt>:
 80079d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079d8:	ec55 4b10 	vmov	r4, r5, d0
 80079dc:	4e56      	ldr	r6, [pc, #344]	; (8007b38 <__ieee754_sqrt+0x164>)
 80079de:	43ae      	bics	r6, r5
 80079e0:	ee10 0a10 	vmov	r0, s0
 80079e4:	ee10 3a10 	vmov	r3, s0
 80079e8:	4629      	mov	r1, r5
 80079ea:	462a      	mov	r2, r5
 80079ec:	d110      	bne.n	8007a10 <__ieee754_sqrt+0x3c>
 80079ee:	ee10 2a10 	vmov	r2, s0
 80079f2:	462b      	mov	r3, r5
 80079f4:	f7f8 fe00 	bl	80005f8 <__aeabi_dmul>
 80079f8:	4602      	mov	r2, r0
 80079fa:	460b      	mov	r3, r1
 80079fc:	4620      	mov	r0, r4
 80079fe:	4629      	mov	r1, r5
 8007a00:	f7f8 fc44 	bl	800028c <__adddf3>
 8007a04:	4604      	mov	r4, r0
 8007a06:	460d      	mov	r5, r1
 8007a08:	ec45 4b10 	vmov	d0, r4, r5
 8007a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a10:	2d00      	cmp	r5, #0
 8007a12:	dc10      	bgt.n	8007a36 <__ieee754_sqrt+0x62>
 8007a14:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007a18:	4330      	orrs	r0, r6
 8007a1a:	d0f5      	beq.n	8007a08 <__ieee754_sqrt+0x34>
 8007a1c:	b15d      	cbz	r5, 8007a36 <__ieee754_sqrt+0x62>
 8007a1e:	ee10 2a10 	vmov	r2, s0
 8007a22:	462b      	mov	r3, r5
 8007a24:	ee10 0a10 	vmov	r0, s0
 8007a28:	f7f8 fc2e 	bl	8000288 <__aeabi_dsub>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	460b      	mov	r3, r1
 8007a30:	f7f8 ff0c 	bl	800084c <__aeabi_ddiv>
 8007a34:	e7e6      	b.n	8007a04 <__ieee754_sqrt+0x30>
 8007a36:	1509      	asrs	r1, r1, #20
 8007a38:	d076      	beq.n	8007b28 <__ieee754_sqrt+0x154>
 8007a3a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007a3e:	07ce      	lsls	r6, r1, #31
 8007a40:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8007a44:	bf5e      	ittt	pl
 8007a46:	0fda      	lsrpl	r2, r3, #31
 8007a48:	005b      	lslpl	r3, r3, #1
 8007a4a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8007a4e:	0fda      	lsrs	r2, r3, #31
 8007a50:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8007a54:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007a58:	2000      	movs	r0, #0
 8007a5a:	106d      	asrs	r5, r5, #1
 8007a5c:	005b      	lsls	r3, r3, #1
 8007a5e:	f04f 0e16 	mov.w	lr, #22
 8007a62:	4684      	mov	ip, r0
 8007a64:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a68:	eb0c 0401 	add.w	r4, ip, r1
 8007a6c:	4294      	cmp	r4, r2
 8007a6e:	bfde      	ittt	le
 8007a70:	1b12      	suble	r2, r2, r4
 8007a72:	eb04 0c01 	addle.w	ip, r4, r1
 8007a76:	1840      	addle	r0, r0, r1
 8007a78:	0052      	lsls	r2, r2, #1
 8007a7a:	f1be 0e01 	subs.w	lr, lr, #1
 8007a7e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007a82:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007a86:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007a8a:	d1ed      	bne.n	8007a68 <__ieee754_sqrt+0x94>
 8007a8c:	4671      	mov	r1, lr
 8007a8e:	2720      	movs	r7, #32
 8007a90:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007a94:	4562      	cmp	r2, ip
 8007a96:	eb04 060e 	add.w	r6, r4, lr
 8007a9a:	dc02      	bgt.n	8007aa2 <__ieee754_sqrt+0xce>
 8007a9c:	d113      	bne.n	8007ac6 <__ieee754_sqrt+0xf2>
 8007a9e:	429e      	cmp	r6, r3
 8007aa0:	d811      	bhi.n	8007ac6 <__ieee754_sqrt+0xf2>
 8007aa2:	2e00      	cmp	r6, #0
 8007aa4:	eb06 0e04 	add.w	lr, r6, r4
 8007aa8:	da43      	bge.n	8007b32 <__ieee754_sqrt+0x15e>
 8007aaa:	f1be 0f00 	cmp.w	lr, #0
 8007aae:	db40      	blt.n	8007b32 <__ieee754_sqrt+0x15e>
 8007ab0:	f10c 0801 	add.w	r8, ip, #1
 8007ab4:	eba2 020c 	sub.w	r2, r2, ip
 8007ab8:	429e      	cmp	r6, r3
 8007aba:	bf88      	it	hi
 8007abc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007ac0:	1b9b      	subs	r3, r3, r6
 8007ac2:	4421      	add	r1, r4
 8007ac4:	46c4      	mov	ip, r8
 8007ac6:	0052      	lsls	r2, r2, #1
 8007ac8:	3f01      	subs	r7, #1
 8007aca:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007ace:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007ad2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007ad6:	d1dd      	bne.n	8007a94 <__ieee754_sqrt+0xc0>
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	d006      	beq.n	8007aea <__ieee754_sqrt+0x116>
 8007adc:	1c4c      	adds	r4, r1, #1
 8007ade:	bf13      	iteet	ne
 8007ae0:	3101      	addne	r1, #1
 8007ae2:	3001      	addeq	r0, #1
 8007ae4:	4639      	moveq	r1, r7
 8007ae6:	f021 0101 	bicne.w	r1, r1, #1
 8007aea:	1043      	asrs	r3, r0, #1
 8007aec:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007af0:	0849      	lsrs	r1, r1, #1
 8007af2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007af6:	07c2      	lsls	r2, r0, #31
 8007af8:	bf48      	it	mi
 8007afa:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007afe:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8007b02:	460c      	mov	r4, r1
 8007b04:	463d      	mov	r5, r7
 8007b06:	e77f      	b.n	8007a08 <__ieee754_sqrt+0x34>
 8007b08:	0ada      	lsrs	r2, r3, #11
 8007b0a:	3815      	subs	r0, #21
 8007b0c:	055b      	lsls	r3, r3, #21
 8007b0e:	2a00      	cmp	r2, #0
 8007b10:	d0fa      	beq.n	8007b08 <__ieee754_sqrt+0x134>
 8007b12:	02d7      	lsls	r7, r2, #11
 8007b14:	d50a      	bpl.n	8007b2c <__ieee754_sqrt+0x158>
 8007b16:	f1c1 0420 	rsb	r4, r1, #32
 8007b1a:	fa23 f404 	lsr.w	r4, r3, r4
 8007b1e:	1e4d      	subs	r5, r1, #1
 8007b20:	408b      	lsls	r3, r1
 8007b22:	4322      	orrs	r2, r4
 8007b24:	1b41      	subs	r1, r0, r5
 8007b26:	e788      	b.n	8007a3a <__ieee754_sqrt+0x66>
 8007b28:	4608      	mov	r0, r1
 8007b2a:	e7f0      	b.n	8007b0e <__ieee754_sqrt+0x13a>
 8007b2c:	0052      	lsls	r2, r2, #1
 8007b2e:	3101      	adds	r1, #1
 8007b30:	e7ef      	b.n	8007b12 <__ieee754_sqrt+0x13e>
 8007b32:	46e0      	mov	r8, ip
 8007b34:	e7be      	b.n	8007ab4 <__ieee754_sqrt+0xe0>
 8007b36:	bf00      	nop
 8007b38:	7ff00000 	.word	0x7ff00000
 8007b3c:	00000000 	.word	0x00000000

08007b40 <__kernel_cos>:
 8007b40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b44:	ec57 6b10 	vmov	r6, r7, d0
 8007b48:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007b4c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007b50:	ed8d 1b00 	vstr	d1, [sp]
 8007b54:	da07      	bge.n	8007b66 <__kernel_cos+0x26>
 8007b56:	ee10 0a10 	vmov	r0, s0
 8007b5a:	4639      	mov	r1, r7
 8007b5c:	f7f8 fffc 	bl	8000b58 <__aeabi_d2iz>
 8007b60:	2800      	cmp	r0, #0
 8007b62:	f000 8088 	beq.w	8007c76 <__kernel_cos+0x136>
 8007b66:	4632      	mov	r2, r6
 8007b68:	463b      	mov	r3, r7
 8007b6a:	4630      	mov	r0, r6
 8007b6c:	4639      	mov	r1, r7
 8007b6e:	f7f8 fd43 	bl	80005f8 <__aeabi_dmul>
 8007b72:	4b51      	ldr	r3, [pc, #324]	; (8007cb8 <__kernel_cos+0x178>)
 8007b74:	2200      	movs	r2, #0
 8007b76:	4604      	mov	r4, r0
 8007b78:	460d      	mov	r5, r1
 8007b7a:	f7f8 fd3d 	bl	80005f8 <__aeabi_dmul>
 8007b7e:	a340      	add	r3, pc, #256	; (adr r3, 8007c80 <__kernel_cos+0x140>)
 8007b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b84:	4682      	mov	sl, r0
 8007b86:	468b      	mov	fp, r1
 8007b88:	4620      	mov	r0, r4
 8007b8a:	4629      	mov	r1, r5
 8007b8c:	f7f8 fd34 	bl	80005f8 <__aeabi_dmul>
 8007b90:	a33d      	add	r3, pc, #244	; (adr r3, 8007c88 <__kernel_cos+0x148>)
 8007b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b96:	f7f8 fb79 	bl	800028c <__adddf3>
 8007b9a:	4622      	mov	r2, r4
 8007b9c:	462b      	mov	r3, r5
 8007b9e:	f7f8 fd2b 	bl	80005f8 <__aeabi_dmul>
 8007ba2:	a33b      	add	r3, pc, #236	; (adr r3, 8007c90 <__kernel_cos+0x150>)
 8007ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba8:	f7f8 fb6e 	bl	8000288 <__aeabi_dsub>
 8007bac:	4622      	mov	r2, r4
 8007bae:	462b      	mov	r3, r5
 8007bb0:	f7f8 fd22 	bl	80005f8 <__aeabi_dmul>
 8007bb4:	a338      	add	r3, pc, #224	; (adr r3, 8007c98 <__kernel_cos+0x158>)
 8007bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bba:	f7f8 fb67 	bl	800028c <__adddf3>
 8007bbe:	4622      	mov	r2, r4
 8007bc0:	462b      	mov	r3, r5
 8007bc2:	f7f8 fd19 	bl	80005f8 <__aeabi_dmul>
 8007bc6:	a336      	add	r3, pc, #216	; (adr r3, 8007ca0 <__kernel_cos+0x160>)
 8007bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bcc:	f7f8 fb5c 	bl	8000288 <__aeabi_dsub>
 8007bd0:	4622      	mov	r2, r4
 8007bd2:	462b      	mov	r3, r5
 8007bd4:	f7f8 fd10 	bl	80005f8 <__aeabi_dmul>
 8007bd8:	a333      	add	r3, pc, #204	; (adr r3, 8007ca8 <__kernel_cos+0x168>)
 8007bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bde:	f7f8 fb55 	bl	800028c <__adddf3>
 8007be2:	4622      	mov	r2, r4
 8007be4:	462b      	mov	r3, r5
 8007be6:	f7f8 fd07 	bl	80005f8 <__aeabi_dmul>
 8007bea:	4622      	mov	r2, r4
 8007bec:	462b      	mov	r3, r5
 8007bee:	f7f8 fd03 	bl	80005f8 <__aeabi_dmul>
 8007bf2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bf6:	4604      	mov	r4, r0
 8007bf8:	460d      	mov	r5, r1
 8007bfa:	4630      	mov	r0, r6
 8007bfc:	4639      	mov	r1, r7
 8007bfe:	f7f8 fcfb 	bl	80005f8 <__aeabi_dmul>
 8007c02:	460b      	mov	r3, r1
 8007c04:	4602      	mov	r2, r0
 8007c06:	4629      	mov	r1, r5
 8007c08:	4620      	mov	r0, r4
 8007c0a:	f7f8 fb3d 	bl	8000288 <__aeabi_dsub>
 8007c0e:	4b2b      	ldr	r3, [pc, #172]	; (8007cbc <__kernel_cos+0x17c>)
 8007c10:	4598      	cmp	r8, r3
 8007c12:	4606      	mov	r6, r0
 8007c14:	460f      	mov	r7, r1
 8007c16:	dc10      	bgt.n	8007c3a <__kernel_cos+0xfa>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	4650      	mov	r0, sl
 8007c1e:	4659      	mov	r1, fp
 8007c20:	f7f8 fb32 	bl	8000288 <__aeabi_dsub>
 8007c24:	460b      	mov	r3, r1
 8007c26:	4926      	ldr	r1, [pc, #152]	; (8007cc0 <__kernel_cos+0x180>)
 8007c28:	4602      	mov	r2, r0
 8007c2a:	2000      	movs	r0, #0
 8007c2c:	f7f8 fb2c 	bl	8000288 <__aeabi_dsub>
 8007c30:	ec41 0b10 	vmov	d0, r0, r1
 8007c34:	b003      	add	sp, #12
 8007c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c3a:	4b22      	ldr	r3, [pc, #136]	; (8007cc4 <__kernel_cos+0x184>)
 8007c3c:	4920      	ldr	r1, [pc, #128]	; (8007cc0 <__kernel_cos+0x180>)
 8007c3e:	4598      	cmp	r8, r3
 8007c40:	bfcc      	ite	gt
 8007c42:	4d21      	ldrgt	r5, [pc, #132]	; (8007cc8 <__kernel_cos+0x188>)
 8007c44:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007c48:	2400      	movs	r4, #0
 8007c4a:	4622      	mov	r2, r4
 8007c4c:	462b      	mov	r3, r5
 8007c4e:	2000      	movs	r0, #0
 8007c50:	f7f8 fb1a 	bl	8000288 <__aeabi_dsub>
 8007c54:	4622      	mov	r2, r4
 8007c56:	4680      	mov	r8, r0
 8007c58:	4689      	mov	r9, r1
 8007c5a:	462b      	mov	r3, r5
 8007c5c:	4650      	mov	r0, sl
 8007c5e:	4659      	mov	r1, fp
 8007c60:	f7f8 fb12 	bl	8000288 <__aeabi_dsub>
 8007c64:	4632      	mov	r2, r6
 8007c66:	463b      	mov	r3, r7
 8007c68:	f7f8 fb0e 	bl	8000288 <__aeabi_dsub>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	460b      	mov	r3, r1
 8007c70:	4640      	mov	r0, r8
 8007c72:	4649      	mov	r1, r9
 8007c74:	e7da      	b.n	8007c2c <__kernel_cos+0xec>
 8007c76:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007cb0 <__kernel_cos+0x170>
 8007c7a:	e7db      	b.n	8007c34 <__kernel_cos+0xf4>
 8007c7c:	f3af 8000 	nop.w
 8007c80:	be8838d4 	.word	0xbe8838d4
 8007c84:	bda8fae9 	.word	0xbda8fae9
 8007c88:	bdb4b1c4 	.word	0xbdb4b1c4
 8007c8c:	3e21ee9e 	.word	0x3e21ee9e
 8007c90:	809c52ad 	.word	0x809c52ad
 8007c94:	3e927e4f 	.word	0x3e927e4f
 8007c98:	19cb1590 	.word	0x19cb1590
 8007c9c:	3efa01a0 	.word	0x3efa01a0
 8007ca0:	16c15177 	.word	0x16c15177
 8007ca4:	3f56c16c 	.word	0x3f56c16c
 8007ca8:	5555554c 	.word	0x5555554c
 8007cac:	3fa55555 	.word	0x3fa55555
 8007cb0:	00000000 	.word	0x00000000
 8007cb4:	3ff00000 	.word	0x3ff00000
 8007cb8:	3fe00000 	.word	0x3fe00000
 8007cbc:	3fd33332 	.word	0x3fd33332
 8007cc0:	3ff00000 	.word	0x3ff00000
 8007cc4:	3fe90000 	.word	0x3fe90000
 8007cc8:	3fd20000 	.word	0x3fd20000
 8007ccc:	00000000 	.word	0x00000000

08007cd0 <__kernel_rem_pio2>:
 8007cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cd4:	ed2d 8b02 	vpush	{d8}
 8007cd8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8007cdc:	f112 0f14 	cmn.w	r2, #20
 8007ce0:	9308      	str	r3, [sp, #32]
 8007ce2:	9101      	str	r1, [sp, #4]
 8007ce4:	4bc6      	ldr	r3, [pc, #792]	; (8008000 <__kernel_rem_pio2+0x330>)
 8007ce6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8007ce8:	9009      	str	r0, [sp, #36]	; 0x24
 8007cea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007cee:	9304      	str	r3, [sp, #16]
 8007cf0:	9b08      	ldr	r3, [sp, #32]
 8007cf2:	f103 33ff 	add.w	r3, r3, #4294967295
 8007cf6:	bfa8      	it	ge
 8007cf8:	1ed4      	subge	r4, r2, #3
 8007cfa:	9306      	str	r3, [sp, #24]
 8007cfc:	bfb2      	itee	lt
 8007cfe:	2400      	movlt	r4, #0
 8007d00:	2318      	movge	r3, #24
 8007d02:	fb94 f4f3 	sdivge	r4, r4, r3
 8007d06:	f06f 0317 	mvn.w	r3, #23
 8007d0a:	fb04 3303 	mla	r3, r4, r3, r3
 8007d0e:	eb03 0a02 	add.w	sl, r3, r2
 8007d12:	9b04      	ldr	r3, [sp, #16]
 8007d14:	9a06      	ldr	r2, [sp, #24]
 8007d16:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8007ff0 <__kernel_rem_pio2+0x320>
 8007d1a:	eb03 0802 	add.w	r8, r3, r2
 8007d1e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007d20:	1aa7      	subs	r7, r4, r2
 8007d22:	ae20      	add	r6, sp, #128	; 0x80
 8007d24:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007d28:	2500      	movs	r5, #0
 8007d2a:	4545      	cmp	r5, r8
 8007d2c:	dd18      	ble.n	8007d60 <__kernel_rem_pio2+0x90>
 8007d2e:	9b08      	ldr	r3, [sp, #32]
 8007d30:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007d34:	aa20      	add	r2, sp, #128	; 0x80
 8007d36:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8007ff0 <__kernel_rem_pio2+0x320>
 8007d3a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007d3e:	f1c3 0301 	rsb	r3, r3, #1
 8007d42:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8007d46:	9307      	str	r3, [sp, #28]
 8007d48:	9b07      	ldr	r3, [sp, #28]
 8007d4a:	9a04      	ldr	r2, [sp, #16]
 8007d4c:	4443      	add	r3, r8
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	db2f      	blt.n	8007db2 <__kernel_rem_pio2+0xe2>
 8007d52:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007d56:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007d5a:	462f      	mov	r7, r5
 8007d5c:	2600      	movs	r6, #0
 8007d5e:	e01b      	b.n	8007d98 <__kernel_rem_pio2+0xc8>
 8007d60:	42ef      	cmn	r7, r5
 8007d62:	d407      	bmi.n	8007d74 <__kernel_rem_pio2+0xa4>
 8007d64:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007d68:	f7f8 fbdc 	bl	8000524 <__aeabi_i2d>
 8007d6c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007d70:	3501      	adds	r5, #1
 8007d72:	e7da      	b.n	8007d2a <__kernel_rem_pio2+0x5a>
 8007d74:	ec51 0b18 	vmov	r0, r1, d8
 8007d78:	e7f8      	b.n	8007d6c <__kernel_rem_pio2+0x9c>
 8007d7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d7e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007d82:	f7f8 fc39 	bl	80005f8 <__aeabi_dmul>
 8007d86:	4602      	mov	r2, r0
 8007d88:	460b      	mov	r3, r1
 8007d8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d8e:	f7f8 fa7d 	bl	800028c <__adddf3>
 8007d92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d96:	3601      	adds	r6, #1
 8007d98:	9b06      	ldr	r3, [sp, #24]
 8007d9a:	429e      	cmp	r6, r3
 8007d9c:	f1a7 0708 	sub.w	r7, r7, #8
 8007da0:	ddeb      	ble.n	8007d7a <__kernel_rem_pio2+0xaa>
 8007da2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007da6:	3508      	adds	r5, #8
 8007da8:	ecab 7b02 	vstmia	fp!, {d7}
 8007dac:	f108 0801 	add.w	r8, r8, #1
 8007db0:	e7ca      	b.n	8007d48 <__kernel_rem_pio2+0x78>
 8007db2:	9b04      	ldr	r3, [sp, #16]
 8007db4:	aa0c      	add	r2, sp, #48	; 0x30
 8007db6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007dba:	930b      	str	r3, [sp, #44]	; 0x2c
 8007dbc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007dbe:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007dc2:	9c04      	ldr	r4, [sp, #16]
 8007dc4:	930a      	str	r3, [sp, #40]	; 0x28
 8007dc6:	ab98      	add	r3, sp, #608	; 0x260
 8007dc8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007dcc:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007dd0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8007dd4:	f8cd b008 	str.w	fp, [sp, #8]
 8007dd8:	4625      	mov	r5, r4
 8007dda:	2d00      	cmp	r5, #0
 8007ddc:	dc78      	bgt.n	8007ed0 <__kernel_rem_pio2+0x200>
 8007dde:	ec47 6b10 	vmov	d0, r6, r7
 8007de2:	4650      	mov	r0, sl
 8007de4:	f000 fe68 	bl	8008ab8 <scalbn>
 8007de8:	ec57 6b10 	vmov	r6, r7, d0
 8007dec:	2200      	movs	r2, #0
 8007dee:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007df2:	ee10 0a10 	vmov	r0, s0
 8007df6:	4639      	mov	r1, r7
 8007df8:	f7f8 fbfe 	bl	80005f8 <__aeabi_dmul>
 8007dfc:	ec41 0b10 	vmov	d0, r0, r1
 8007e00:	f000 fd4e 	bl	80088a0 <floor>
 8007e04:	4b7f      	ldr	r3, [pc, #508]	; (8008004 <__kernel_rem_pio2+0x334>)
 8007e06:	ec51 0b10 	vmov	r0, r1, d0
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f7f8 fbf4 	bl	80005f8 <__aeabi_dmul>
 8007e10:	4602      	mov	r2, r0
 8007e12:	460b      	mov	r3, r1
 8007e14:	4630      	mov	r0, r6
 8007e16:	4639      	mov	r1, r7
 8007e18:	f7f8 fa36 	bl	8000288 <__aeabi_dsub>
 8007e1c:	460f      	mov	r7, r1
 8007e1e:	4606      	mov	r6, r0
 8007e20:	f7f8 fe9a 	bl	8000b58 <__aeabi_d2iz>
 8007e24:	9007      	str	r0, [sp, #28]
 8007e26:	f7f8 fb7d 	bl	8000524 <__aeabi_i2d>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	4630      	mov	r0, r6
 8007e30:	4639      	mov	r1, r7
 8007e32:	f7f8 fa29 	bl	8000288 <__aeabi_dsub>
 8007e36:	f1ba 0f00 	cmp.w	sl, #0
 8007e3a:	4606      	mov	r6, r0
 8007e3c:	460f      	mov	r7, r1
 8007e3e:	dd70      	ble.n	8007f22 <__kernel_rem_pio2+0x252>
 8007e40:	1e62      	subs	r2, r4, #1
 8007e42:	ab0c      	add	r3, sp, #48	; 0x30
 8007e44:	9d07      	ldr	r5, [sp, #28]
 8007e46:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007e4a:	f1ca 0118 	rsb	r1, sl, #24
 8007e4e:	fa40 f301 	asr.w	r3, r0, r1
 8007e52:	441d      	add	r5, r3
 8007e54:	408b      	lsls	r3, r1
 8007e56:	1ac0      	subs	r0, r0, r3
 8007e58:	ab0c      	add	r3, sp, #48	; 0x30
 8007e5a:	9507      	str	r5, [sp, #28]
 8007e5c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007e60:	f1ca 0317 	rsb	r3, sl, #23
 8007e64:	fa40 f303 	asr.w	r3, r0, r3
 8007e68:	9302      	str	r3, [sp, #8]
 8007e6a:	9b02      	ldr	r3, [sp, #8]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	dd66      	ble.n	8007f3e <__kernel_rem_pio2+0x26e>
 8007e70:	9b07      	ldr	r3, [sp, #28]
 8007e72:	2200      	movs	r2, #0
 8007e74:	3301      	adds	r3, #1
 8007e76:	9307      	str	r3, [sp, #28]
 8007e78:	4615      	mov	r5, r2
 8007e7a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007e7e:	4294      	cmp	r4, r2
 8007e80:	f300 8099 	bgt.w	8007fb6 <__kernel_rem_pio2+0x2e6>
 8007e84:	f1ba 0f00 	cmp.w	sl, #0
 8007e88:	dd07      	ble.n	8007e9a <__kernel_rem_pio2+0x1ca>
 8007e8a:	f1ba 0f01 	cmp.w	sl, #1
 8007e8e:	f000 80a5 	beq.w	8007fdc <__kernel_rem_pio2+0x30c>
 8007e92:	f1ba 0f02 	cmp.w	sl, #2
 8007e96:	f000 80c1 	beq.w	800801c <__kernel_rem_pio2+0x34c>
 8007e9a:	9b02      	ldr	r3, [sp, #8]
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	d14e      	bne.n	8007f3e <__kernel_rem_pio2+0x26e>
 8007ea0:	4632      	mov	r2, r6
 8007ea2:	463b      	mov	r3, r7
 8007ea4:	4958      	ldr	r1, [pc, #352]	; (8008008 <__kernel_rem_pio2+0x338>)
 8007ea6:	2000      	movs	r0, #0
 8007ea8:	f7f8 f9ee 	bl	8000288 <__aeabi_dsub>
 8007eac:	4606      	mov	r6, r0
 8007eae:	460f      	mov	r7, r1
 8007eb0:	2d00      	cmp	r5, #0
 8007eb2:	d044      	beq.n	8007f3e <__kernel_rem_pio2+0x26e>
 8007eb4:	4650      	mov	r0, sl
 8007eb6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8007ff8 <__kernel_rem_pio2+0x328>
 8007eba:	f000 fdfd 	bl	8008ab8 <scalbn>
 8007ebe:	4630      	mov	r0, r6
 8007ec0:	4639      	mov	r1, r7
 8007ec2:	ec53 2b10 	vmov	r2, r3, d0
 8007ec6:	f7f8 f9df 	bl	8000288 <__aeabi_dsub>
 8007eca:	4606      	mov	r6, r0
 8007ecc:	460f      	mov	r7, r1
 8007ece:	e036      	b.n	8007f3e <__kernel_rem_pio2+0x26e>
 8007ed0:	4b4e      	ldr	r3, [pc, #312]	; (800800c <__kernel_rem_pio2+0x33c>)
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	4630      	mov	r0, r6
 8007ed6:	4639      	mov	r1, r7
 8007ed8:	f7f8 fb8e 	bl	80005f8 <__aeabi_dmul>
 8007edc:	f7f8 fe3c 	bl	8000b58 <__aeabi_d2iz>
 8007ee0:	f7f8 fb20 	bl	8000524 <__aeabi_i2d>
 8007ee4:	4b4a      	ldr	r3, [pc, #296]	; (8008010 <__kernel_rem_pio2+0x340>)
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	4680      	mov	r8, r0
 8007eea:	4689      	mov	r9, r1
 8007eec:	f7f8 fb84 	bl	80005f8 <__aeabi_dmul>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	4630      	mov	r0, r6
 8007ef6:	4639      	mov	r1, r7
 8007ef8:	f7f8 f9c6 	bl	8000288 <__aeabi_dsub>
 8007efc:	f7f8 fe2c 	bl	8000b58 <__aeabi_d2iz>
 8007f00:	9b02      	ldr	r3, [sp, #8]
 8007f02:	f843 0b04 	str.w	r0, [r3], #4
 8007f06:	3d01      	subs	r5, #1
 8007f08:	9302      	str	r3, [sp, #8]
 8007f0a:	ab70      	add	r3, sp, #448	; 0x1c0
 8007f0c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f14:	4640      	mov	r0, r8
 8007f16:	4649      	mov	r1, r9
 8007f18:	f7f8 f9b8 	bl	800028c <__adddf3>
 8007f1c:	4606      	mov	r6, r0
 8007f1e:	460f      	mov	r7, r1
 8007f20:	e75b      	b.n	8007dda <__kernel_rem_pio2+0x10a>
 8007f22:	d105      	bne.n	8007f30 <__kernel_rem_pio2+0x260>
 8007f24:	1e63      	subs	r3, r4, #1
 8007f26:	aa0c      	add	r2, sp, #48	; 0x30
 8007f28:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007f2c:	15c3      	asrs	r3, r0, #23
 8007f2e:	e79b      	b.n	8007e68 <__kernel_rem_pio2+0x198>
 8007f30:	4b38      	ldr	r3, [pc, #224]	; (8008014 <__kernel_rem_pio2+0x344>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	f7f8 fde6 	bl	8000b04 <__aeabi_dcmpge>
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	d139      	bne.n	8007fb0 <__kernel_rem_pio2+0x2e0>
 8007f3c:	9002      	str	r0, [sp, #8]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	2300      	movs	r3, #0
 8007f42:	4630      	mov	r0, r6
 8007f44:	4639      	mov	r1, r7
 8007f46:	f7f8 fdbf 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f4a:	2800      	cmp	r0, #0
 8007f4c:	f000 80b4 	beq.w	80080b8 <__kernel_rem_pio2+0x3e8>
 8007f50:	f104 3bff 	add.w	fp, r4, #4294967295
 8007f54:	465b      	mov	r3, fp
 8007f56:	2200      	movs	r2, #0
 8007f58:	9904      	ldr	r1, [sp, #16]
 8007f5a:	428b      	cmp	r3, r1
 8007f5c:	da65      	bge.n	800802a <__kernel_rem_pio2+0x35a>
 8007f5e:	2a00      	cmp	r2, #0
 8007f60:	d07b      	beq.n	800805a <__kernel_rem_pio2+0x38a>
 8007f62:	ab0c      	add	r3, sp, #48	; 0x30
 8007f64:	f1aa 0a18 	sub.w	sl, sl, #24
 8007f68:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f000 80a0 	beq.w	80080b2 <__kernel_rem_pio2+0x3e2>
 8007f72:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8007ff8 <__kernel_rem_pio2+0x328>
 8007f76:	4650      	mov	r0, sl
 8007f78:	f000 fd9e 	bl	8008ab8 <scalbn>
 8007f7c:	4f23      	ldr	r7, [pc, #140]	; (800800c <__kernel_rem_pio2+0x33c>)
 8007f7e:	ec55 4b10 	vmov	r4, r5, d0
 8007f82:	46d8      	mov	r8, fp
 8007f84:	2600      	movs	r6, #0
 8007f86:	f1b8 0f00 	cmp.w	r8, #0
 8007f8a:	f280 80cf 	bge.w	800812c <__kernel_rem_pio2+0x45c>
 8007f8e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8007ff0 <__kernel_rem_pio2+0x320>
 8007f92:	465f      	mov	r7, fp
 8007f94:	f04f 0800 	mov.w	r8, #0
 8007f98:	2f00      	cmp	r7, #0
 8007f9a:	f2c0 80fd 	blt.w	8008198 <__kernel_rem_pio2+0x4c8>
 8007f9e:	ab70      	add	r3, sp, #448	; 0x1c0
 8007fa0:	f8df a074 	ldr.w	sl, [pc, #116]	; 8008018 <__kernel_rem_pio2+0x348>
 8007fa4:	ec55 4b18 	vmov	r4, r5, d8
 8007fa8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8007fac:	2600      	movs	r6, #0
 8007fae:	e0e5      	b.n	800817c <__kernel_rem_pio2+0x4ac>
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	9302      	str	r3, [sp, #8]
 8007fb4:	e75c      	b.n	8007e70 <__kernel_rem_pio2+0x1a0>
 8007fb6:	f8db 3000 	ldr.w	r3, [fp]
 8007fba:	b955      	cbnz	r5, 8007fd2 <__kernel_rem_pio2+0x302>
 8007fbc:	b123      	cbz	r3, 8007fc8 <__kernel_rem_pio2+0x2f8>
 8007fbe:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007fc2:	f8cb 3000 	str.w	r3, [fp]
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	3201      	adds	r2, #1
 8007fca:	f10b 0b04 	add.w	fp, fp, #4
 8007fce:	461d      	mov	r5, r3
 8007fd0:	e755      	b.n	8007e7e <__kernel_rem_pio2+0x1ae>
 8007fd2:	1acb      	subs	r3, r1, r3
 8007fd4:	f8cb 3000 	str.w	r3, [fp]
 8007fd8:	462b      	mov	r3, r5
 8007fda:	e7f5      	b.n	8007fc8 <__kernel_rem_pio2+0x2f8>
 8007fdc:	1e62      	subs	r2, r4, #1
 8007fde:	ab0c      	add	r3, sp, #48	; 0x30
 8007fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fe4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007fe8:	a90c      	add	r1, sp, #48	; 0x30
 8007fea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007fee:	e754      	b.n	8007e9a <__kernel_rem_pio2+0x1ca>
	...
 8007ffc:	3ff00000 	.word	0x3ff00000
 8008000:	08009310 	.word	0x08009310
 8008004:	40200000 	.word	0x40200000
 8008008:	3ff00000 	.word	0x3ff00000
 800800c:	3e700000 	.word	0x3e700000
 8008010:	41700000 	.word	0x41700000
 8008014:	3fe00000 	.word	0x3fe00000
 8008018:	080092d0 	.word	0x080092d0
 800801c:	1e62      	subs	r2, r4, #1
 800801e:	ab0c      	add	r3, sp, #48	; 0x30
 8008020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008024:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008028:	e7de      	b.n	8007fe8 <__kernel_rem_pio2+0x318>
 800802a:	a90c      	add	r1, sp, #48	; 0x30
 800802c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008030:	3b01      	subs	r3, #1
 8008032:	430a      	orrs	r2, r1
 8008034:	e790      	b.n	8007f58 <__kernel_rem_pio2+0x288>
 8008036:	3301      	adds	r3, #1
 8008038:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800803c:	2900      	cmp	r1, #0
 800803e:	d0fa      	beq.n	8008036 <__kernel_rem_pio2+0x366>
 8008040:	9a08      	ldr	r2, [sp, #32]
 8008042:	18e3      	adds	r3, r4, r3
 8008044:	18a6      	adds	r6, r4, r2
 8008046:	aa20      	add	r2, sp, #128	; 0x80
 8008048:	1c65      	adds	r5, r4, #1
 800804a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800804e:	9302      	str	r3, [sp, #8]
 8008050:	9b02      	ldr	r3, [sp, #8]
 8008052:	42ab      	cmp	r3, r5
 8008054:	da04      	bge.n	8008060 <__kernel_rem_pio2+0x390>
 8008056:	461c      	mov	r4, r3
 8008058:	e6b5      	b.n	8007dc6 <__kernel_rem_pio2+0xf6>
 800805a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800805c:	2301      	movs	r3, #1
 800805e:	e7eb      	b.n	8008038 <__kernel_rem_pio2+0x368>
 8008060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008062:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008066:	f7f8 fa5d 	bl	8000524 <__aeabi_i2d>
 800806a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800806e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008070:	46b3      	mov	fp, r6
 8008072:	461c      	mov	r4, r3
 8008074:	2700      	movs	r7, #0
 8008076:	f04f 0800 	mov.w	r8, #0
 800807a:	f04f 0900 	mov.w	r9, #0
 800807e:	9b06      	ldr	r3, [sp, #24]
 8008080:	429f      	cmp	r7, r3
 8008082:	dd06      	ble.n	8008092 <__kernel_rem_pio2+0x3c2>
 8008084:	ab70      	add	r3, sp, #448	; 0x1c0
 8008086:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800808a:	e9c3 8900 	strd	r8, r9, [r3]
 800808e:	3501      	adds	r5, #1
 8008090:	e7de      	b.n	8008050 <__kernel_rem_pio2+0x380>
 8008092:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008096:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800809a:	f7f8 faad 	bl	80005f8 <__aeabi_dmul>
 800809e:	4602      	mov	r2, r0
 80080a0:	460b      	mov	r3, r1
 80080a2:	4640      	mov	r0, r8
 80080a4:	4649      	mov	r1, r9
 80080a6:	f7f8 f8f1 	bl	800028c <__adddf3>
 80080aa:	3701      	adds	r7, #1
 80080ac:	4680      	mov	r8, r0
 80080ae:	4689      	mov	r9, r1
 80080b0:	e7e5      	b.n	800807e <__kernel_rem_pio2+0x3ae>
 80080b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80080b6:	e754      	b.n	8007f62 <__kernel_rem_pio2+0x292>
 80080b8:	ec47 6b10 	vmov	d0, r6, r7
 80080bc:	f1ca 0000 	rsb	r0, sl, #0
 80080c0:	f000 fcfa 	bl	8008ab8 <scalbn>
 80080c4:	ec57 6b10 	vmov	r6, r7, d0
 80080c8:	4b9f      	ldr	r3, [pc, #636]	; (8008348 <__kernel_rem_pio2+0x678>)
 80080ca:	ee10 0a10 	vmov	r0, s0
 80080ce:	2200      	movs	r2, #0
 80080d0:	4639      	mov	r1, r7
 80080d2:	f7f8 fd17 	bl	8000b04 <__aeabi_dcmpge>
 80080d6:	b300      	cbz	r0, 800811a <__kernel_rem_pio2+0x44a>
 80080d8:	4b9c      	ldr	r3, [pc, #624]	; (800834c <__kernel_rem_pio2+0x67c>)
 80080da:	2200      	movs	r2, #0
 80080dc:	4630      	mov	r0, r6
 80080de:	4639      	mov	r1, r7
 80080e0:	f7f8 fa8a 	bl	80005f8 <__aeabi_dmul>
 80080e4:	f7f8 fd38 	bl	8000b58 <__aeabi_d2iz>
 80080e8:	4605      	mov	r5, r0
 80080ea:	f7f8 fa1b 	bl	8000524 <__aeabi_i2d>
 80080ee:	4b96      	ldr	r3, [pc, #600]	; (8008348 <__kernel_rem_pio2+0x678>)
 80080f0:	2200      	movs	r2, #0
 80080f2:	f7f8 fa81 	bl	80005f8 <__aeabi_dmul>
 80080f6:	460b      	mov	r3, r1
 80080f8:	4602      	mov	r2, r0
 80080fa:	4639      	mov	r1, r7
 80080fc:	4630      	mov	r0, r6
 80080fe:	f7f8 f8c3 	bl	8000288 <__aeabi_dsub>
 8008102:	f7f8 fd29 	bl	8000b58 <__aeabi_d2iz>
 8008106:	f104 0b01 	add.w	fp, r4, #1
 800810a:	ab0c      	add	r3, sp, #48	; 0x30
 800810c:	f10a 0a18 	add.w	sl, sl, #24
 8008110:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008114:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8008118:	e72b      	b.n	8007f72 <__kernel_rem_pio2+0x2a2>
 800811a:	4630      	mov	r0, r6
 800811c:	4639      	mov	r1, r7
 800811e:	f7f8 fd1b 	bl	8000b58 <__aeabi_d2iz>
 8008122:	ab0c      	add	r3, sp, #48	; 0x30
 8008124:	46a3      	mov	fp, r4
 8008126:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800812a:	e722      	b.n	8007f72 <__kernel_rem_pio2+0x2a2>
 800812c:	ab70      	add	r3, sp, #448	; 0x1c0
 800812e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8008132:	ab0c      	add	r3, sp, #48	; 0x30
 8008134:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008138:	f7f8 f9f4 	bl	8000524 <__aeabi_i2d>
 800813c:	4622      	mov	r2, r4
 800813e:	462b      	mov	r3, r5
 8008140:	f7f8 fa5a 	bl	80005f8 <__aeabi_dmul>
 8008144:	4632      	mov	r2, r6
 8008146:	e9c9 0100 	strd	r0, r1, [r9]
 800814a:	463b      	mov	r3, r7
 800814c:	4620      	mov	r0, r4
 800814e:	4629      	mov	r1, r5
 8008150:	f7f8 fa52 	bl	80005f8 <__aeabi_dmul>
 8008154:	f108 38ff 	add.w	r8, r8, #4294967295
 8008158:	4604      	mov	r4, r0
 800815a:	460d      	mov	r5, r1
 800815c:	e713      	b.n	8007f86 <__kernel_rem_pio2+0x2b6>
 800815e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8008162:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8008166:	f7f8 fa47 	bl	80005f8 <__aeabi_dmul>
 800816a:	4602      	mov	r2, r0
 800816c:	460b      	mov	r3, r1
 800816e:	4620      	mov	r0, r4
 8008170:	4629      	mov	r1, r5
 8008172:	f7f8 f88b 	bl	800028c <__adddf3>
 8008176:	3601      	adds	r6, #1
 8008178:	4604      	mov	r4, r0
 800817a:	460d      	mov	r5, r1
 800817c:	9b04      	ldr	r3, [sp, #16]
 800817e:	429e      	cmp	r6, r3
 8008180:	dc01      	bgt.n	8008186 <__kernel_rem_pio2+0x4b6>
 8008182:	45b0      	cmp	r8, r6
 8008184:	daeb      	bge.n	800815e <__kernel_rem_pio2+0x48e>
 8008186:	ab48      	add	r3, sp, #288	; 0x120
 8008188:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800818c:	e9c3 4500 	strd	r4, r5, [r3]
 8008190:	3f01      	subs	r7, #1
 8008192:	f108 0801 	add.w	r8, r8, #1
 8008196:	e6ff      	b.n	8007f98 <__kernel_rem_pio2+0x2c8>
 8008198:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800819a:	2b02      	cmp	r3, #2
 800819c:	dc0b      	bgt.n	80081b6 <__kernel_rem_pio2+0x4e6>
 800819e:	2b00      	cmp	r3, #0
 80081a0:	dc6e      	bgt.n	8008280 <__kernel_rem_pio2+0x5b0>
 80081a2:	d045      	beq.n	8008230 <__kernel_rem_pio2+0x560>
 80081a4:	9b07      	ldr	r3, [sp, #28]
 80081a6:	f003 0007 	and.w	r0, r3, #7
 80081aa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80081ae:	ecbd 8b02 	vpop	{d8}
 80081b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081b6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80081b8:	2b03      	cmp	r3, #3
 80081ba:	d1f3      	bne.n	80081a4 <__kernel_rem_pio2+0x4d4>
 80081bc:	ab48      	add	r3, sp, #288	; 0x120
 80081be:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80081c2:	46d0      	mov	r8, sl
 80081c4:	46d9      	mov	r9, fp
 80081c6:	f1b9 0f00 	cmp.w	r9, #0
 80081ca:	f1a8 0808 	sub.w	r8, r8, #8
 80081ce:	dc64      	bgt.n	800829a <__kernel_rem_pio2+0x5ca>
 80081d0:	465c      	mov	r4, fp
 80081d2:	2c01      	cmp	r4, #1
 80081d4:	f1aa 0a08 	sub.w	sl, sl, #8
 80081d8:	dc7e      	bgt.n	80082d8 <__kernel_rem_pio2+0x608>
 80081da:	2000      	movs	r0, #0
 80081dc:	2100      	movs	r1, #0
 80081de:	f1bb 0f01 	cmp.w	fp, #1
 80081e2:	f300 8097 	bgt.w	8008314 <__kernel_rem_pio2+0x644>
 80081e6:	9b02      	ldr	r3, [sp, #8]
 80081e8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 80081ec:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f040 8099 	bne.w	8008328 <__kernel_rem_pio2+0x658>
 80081f6:	9b01      	ldr	r3, [sp, #4]
 80081f8:	e9c3 5600 	strd	r5, r6, [r3]
 80081fc:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8008200:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008204:	e7ce      	b.n	80081a4 <__kernel_rem_pio2+0x4d4>
 8008206:	ab48      	add	r3, sp, #288	; 0x120
 8008208:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800820c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008210:	f7f8 f83c 	bl	800028c <__adddf3>
 8008214:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008218:	f1bb 0f00 	cmp.w	fp, #0
 800821c:	daf3      	bge.n	8008206 <__kernel_rem_pio2+0x536>
 800821e:	9b02      	ldr	r3, [sp, #8]
 8008220:	b113      	cbz	r3, 8008228 <__kernel_rem_pio2+0x558>
 8008222:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008226:	4619      	mov	r1, r3
 8008228:	9b01      	ldr	r3, [sp, #4]
 800822a:	e9c3 0100 	strd	r0, r1, [r3]
 800822e:	e7b9      	b.n	80081a4 <__kernel_rem_pio2+0x4d4>
 8008230:	2000      	movs	r0, #0
 8008232:	2100      	movs	r1, #0
 8008234:	e7f0      	b.n	8008218 <__kernel_rem_pio2+0x548>
 8008236:	ab48      	add	r3, sp, #288	; 0x120
 8008238:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800823c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008240:	f7f8 f824 	bl	800028c <__adddf3>
 8008244:	3c01      	subs	r4, #1
 8008246:	2c00      	cmp	r4, #0
 8008248:	daf5      	bge.n	8008236 <__kernel_rem_pio2+0x566>
 800824a:	9b02      	ldr	r3, [sp, #8]
 800824c:	b1e3      	cbz	r3, 8008288 <__kernel_rem_pio2+0x5b8>
 800824e:	4602      	mov	r2, r0
 8008250:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008254:	9c01      	ldr	r4, [sp, #4]
 8008256:	e9c4 2300 	strd	r2, r3, [r4]
 800825a:	4602      	mov	r2, r0
 800825c:	460b      	mov	r3, r1
 800825e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8008262:	f7f8 f811 	bl	8000288 <__aeabi_dsub>
 8008266:	ad4a      	add	r5, sp, #296	; 0x128
 8008268:	2401      	movs	r4, #1
 800826a:	45a3      	cmp	fp, r4
 800826c:	da0f      	bge.n	800828e <__kernel_rem_pio2+0x5be>
 800826e:	9b02      	ldr	r3, [sp, #8]
 8008270:	b113      	cbz	r3, 8008278 <__kernel_rem_pio2+0x5a8>
 8008272:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008276:	4619      	mov	r1, r3
 8008278:	9b01      	ldr	r3, [sp, #4]
 800827a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800827e:	e791      	b.n	80081a4 <__kernel_rem_pio2+0x4d4>
 8008280:	465c      	mov	r4, fp
 8008282:	2000      	movs	r0, #0
 8008284:	2100      	movs	r1, #0
 8008286:	e7de      	b.n	8008246 <__kernel_rem_pio2+0x576>
 8008288:	4602      	mov	r2, r0
 800828a:	460b      	mov	r3, r1
 800828c:	e7e2      	b.n	8008254 <__kernel_rem_pio2+0x584>
 800828e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8008292:	f7f7 fffb 	bl	800028c <__adddf3>
 8008296:	3401      	adds	r4, #1
 8008298:	e7e7      	b.n	800826a <__kernel_rem_pio2+0x59a>
 800829a:	e9d8 4500 	ldrd	r4, r5, [r8]
 800829e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80082a2:	4620      	mov	r0, r4
 80082a4:	4632      	mov	r2, r6
 80082a6:	463b      	mov	r3, r7
 80082a8:	4629      	mov	r1, r5
 80082aa:	f7f7 ffef 	bl	800028c <__adddf3>
 80082ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082b2:	4602      	mov	r2, r0
 80082b4:	460b      	mov	r3, r1
 80082b6:	4620      	mov	r0, r4
 80082b8:	4629      	mov	r1, r5
 80082ba:	f7f7 ffe5 	bl	8000288 <__aeabi_dsub>
 80082be:	4632      	mov	r2, r6
 80082c0:	463b      	mov	r3, r7
 80082c2:	f7f7 ffe3 	bl	800028c <__adddf3>
 80082c6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80082ca:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80082ce:	ed88 7b00 	vstr	d7, [r8]
 80082d2:	f109 39ff 	add.w	r9, r9, #4294967295
 80082d6:	e776      	b.n	80081c6 <__kernel_rem_pio2+0x4f6>
 80082d8:	e9da 8900 	ldrd	r8, r9, [sl]
 80082dc:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80082e0:	4640      	mov	r0, r8
 80082e2:	4632      	mov	r2, r6
 80082e4:	463b      	mov	r3, r7
 80082e6:	4649      	mov	r1, r9
 80082e8:	f7f7 ffd0 	bl	800028c <__adddf3>
 80082ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082f0:	4602      	mov	r2, r0
 80082f2:	460b      	mov	r3, r1
 80082f4:	4640      	mov	r0, r8
 80082f6:	4649      	mov	r1, r9
 80082f8:	f7f7 ffc6 	bl	8000288 <__aeabi_dsub>
 80082fc:	4632      	mov	r2, r6
 80082fe:	463b      	mov	r3, r7
 8008300:	f7f7 ffc4 	bl	800028c <__adddf3>
 8008304:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008308:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800830c:	ed8a 7b00 	vstr	d7, [sl]
 8008310:	3c01      	subs	r4, #1
 8008312:	e75e      	b.n	80081d2 <__kernel_rem_pio2+0x502>
 8008314:	ab48      	add	r3, sp, #288	; 0x120
 8008316:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800831a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831e:	f7f7 ffb5 	bl	800028c <__adddf3>
 8008322:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008326:	e75a      	b.n	80081de <__kernel_rem_pio2+0x50e>
 8008328:	9b01      	ldr	r3, [sp, #4]
 800832a:	9a01      	ldr	r2, [sp, #4]
 800832c:	601d      	str	r5, [r3, #0]
 800832e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8008332:	605c      	str	r4, [r3, #4]
 8008334:	609f      	str	r7, [r3, #8]
 8008336:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800833a:	60d3      	str	r3, [r2, #12]
 800833c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008340:	6110      	str	r0, [r2, #16]
 8008342:	6153      	str	r3, [r2, #20]
 8008344:	e72e      	b.n	80081a4 <__kernel_rem_pio2+0x4d4>
 8008346:	bf00      	nop
 8008348:	41700000 	.word	0x41700000
 800834c:	3e700000 	.word	0x3e700000

08008350 <__kernel_sin>:
 8008350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008354:	ed2d 8b04 	vpush	{d8-d9}
 8008358:	eeb0 8a41 	vmov.f32	s16, s2
 800835c:	eef0 8a61 	vmov.f32	s17, s3
 8008360:	ec55 4b10 	vmov	r4, r5, d0
 8008364:	b083      	sub	sp, #12
 8008366:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800836a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800836e:	9001      	str	r0, [sp, #4]
 8008370:	da06      	bge.n	8008380 <__kernel_sin+0x30>
 8008372:	ee10 0a10 	vmov	r0, s0
 8008376:	4629      	mov	r1, r5
 8008378:	f7f8 fbee 	bl	8000b58 <__aeabi_d2iz>
 800837c:	2800      	cmp	r0, #0
 800837e:	d051      	beq.n	8008424 <__kernel_sin+0xd4>
 8008380:	4622      	mov	r2, r4
 8008382:	462b      	mov	r3, r5
 8008384:	4620      	mov	r0, r4
 8008386:	4629      	mov	r1, r5
 8008388:	f7f8 f936 	bl	80005f8 <__aeabi_dmul>
 800838c:	4682      	mov	sl, r0
 800838e:	468b      	mov	fp, r1
 8008390:	4602      	mov	r2, r0
 8008392:	460b      	mov	r3, r1
 8008394:	4620      	mov	r0, r4
 8008396:	4629      	mov	r1, r5
 8008398:	f7f8 f92e 	bl	80005f8 <__aeabi_dmul>
 800839c:	a341      	add	r3, pc, #260	; (adr r3, 80084a4 <__kernel_sin+0x154>)
 800839e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a2:	4680      	mov	r8, r0
 80083a4:	4689      	mov	r9, r1
 80083a6:	4650      	mov	r0, sl
 80083a8:	4659      	mov	r1, fp
 80083aa:	f7f8 f925 	bl	80005f8 <__aeabi_dmul>
 80083ae:	a33f      	add	r3, pc, #252	; (adr r3, 80084ac <__kernel_sin+0x15c>)
 80083b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b4:	f7f7 ff68 	bl	8000288 <__aeabi_dsub>
 80083b8:	4652      	mov	r2, sl
 80083ba:	465b      	mov	r3, fp
 80083bc:	f7f8 f91c 	bl	80005f8 <__aeabi_dmul>
 80083c0:	a33c      	add	r3, pc, #240	; (adr r3, 80084b4 <__kernel_sin+0x164>)
 80083c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c6:	f7f7 ff61 	bl	800028c <__adddf3>
 80083ca:	4652      	mov	r2, sl
 80083cc:	465b      	mov	r3, fp
 80083ce:	f7f8 f913 	bl	80005f8 <__aeabi_dmul>
 80083d2:	a33a      	add	r3, pc, #232	; (adr r3, 80084bc <__kernel_sin+0x16c>)
 80083d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d8:	f7f7 ff56 	bl	8000288 <__aeabi_dsub>
 80083dc:	4652      	mov	r2, sl
 80083de:	465b      	mov	r3, fp
 80083e0:	f7f8 f90a 	bl	80005f8 <__aeabi_dmul>
 80083e4:	a337      	add	r3, pc, #220	; (adr r3, 80084c4 <__kernel_sin+0x174>)
 80083e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ea:	f7f7 ff4f 	bl	800028c <__adddf3>
 80083ee:	9b01      	ldr	r3, [sp, #4]
 80083f0:	4606      	mov	r6, r0
 80083f2:	460f      	mov	r7, r1
 80083f4:	b9eb      	cbnz	r3, 8008432 <__kernel_sin+0xe2>
 80083f6:	4602      	mov	r2, r0
 80083f8:	460b      	mov	r3, r1
 80083fa:	4650      	mov	r0, sl
 80083fc:	4659      	mov	r1, fp
 80083fe:	f7f8 f8fb 	bl	80005f8 <__aeabi_dmul>
 8008402:	a325      	add	r3, pc, #148	; (adr r3, 8008498 <__kernel_sin+0x148>)
 8008404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008408:	f7f7 ff3e 	bl	8000288 <__aeabi_dsub>
 800840c:	4642      	mov	r2, r8
 800840e:	464b      	mov	r3, r9
 8008410:	f7f8 f8f2 	bl	80005f8 <__aeabi_dmul>
 8008414:	4602      	mov	r2, r0
 8008416:	460b      	mov	r3, r1
 8008418:	4620      	mov	r0, r4
 800841a:	4629      	mov	r1, r5
 800841c:	f7f7 ff36 	bl	800028c <__adddf3>
 8008420:	4604      	mov	r4, r0
 8008422:	460d      	mov	r5, r1
 8008424:	ec45 4b10 	vmov	d0, r4, r5
 8008428:	b003      	add	sp, #12
 800842a:	ecbd 8b04 	vpop	{d8-d9}
 800842e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008432:	4b1b      	ldr	r3, [pc, #108]	; (80084a0 <__kernel_sin+0x150>)
 8008434:	ec51 0b18 	vmov	r0, r1, d8
 8008438:	2200      	movs	r2, #0
 800843a:	f7f8 f8dd 	bl	80005f8 <__aeabi_dmul>
 800843e:	4632      	mov	r2, r6
 8008440:	ec41 0b19 	vmov	d9, r0, r1
 8008444:	463b      	mov	r3, r7
 8008446:	4640      	mov	r0, r8
 8008448:	4649      	mov	r1, r9
 800844a:	f7f8 f8d5 	bl	80005f8 <__aeabi_dmul>
 800844e:	4602      	mov	r2, r0
 8008450:	460b      	mov	r3, r1
 8008452:	ec51 0b19 	vmov	r0, r1, d9
 8008456:	f7f7 ff17 	bl	8000288 <__aeabi_dsub>
 800845a:	4652      	mov	r2, sl
 800845c:	465b      	mov	r3, fp
 800845e:	f7f8 f8cb 	bl	80005f8 <__aeabi_dmul>
 8008462:	ec53 2b18 	vmov	r2, r3, d8
 8008466:	f7f7 ff0f 	bl	8000288 <__aeabi_dsub>
 800846a:	a30b      	add	r3, pc, #44	; (adr r3, 8008498 <__kernel_sin+0x148>)
 800846c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008470:	4606      	mov	r6, r0
 8008472:	460f      	mov	r7, r1
 8008474:	4640      	mov	r0, r8
 8008476:	4649      	mov	r1, r9
 8008478:	f7f8 f8be 	bl	80005f8 <__aeabi_dmul>
 800847c:	4602      	mov	r2, r0
 800847e:	460b      	mov	r3, r1
 8008480:	4630      	mov	r0, r6
 8008482:	4639      	mov	r1, r7
 8008484:	f7f7 ff02 	bl	800028c <__adddf3>
 8008488:	4602      	mov	r2, r0
 800848a:	460b      	mov	r3, r1
 800848c:	4620      	mov	r0, r4
 800848e:	4629      	mov	r1, r5
 8008490:	f7f7 fefa 	bl	8000288 <__aeabi_dsub>
 8008494:	e7c4      	b.n	8008420 <__kernel_sin+0xd0>
 8008496:	bf00      	nop
 8008498:	55555549 	.word	0x55555549
 800849c:	3fc55555 	.word	0x3fc55555
 80084a0:	3fe00000 	.word	0x3fe00000
 80084a4:	5acfd57c 	.word	0x5acfd57c
 80084a8:	3de5d93a 	.word	0x3de5d93a
 80084ac:	8a2b9ceb 	.word	0x8a2b9ceb
 80084b0:	3e5ae5e6 	.word	0x3e5ae5e6
 80084b4:	57b1fe7d 	.word	0x57b1fe7d
 80084b8:	3ec71de3 	.word	0x3ec71de3
 80084bc:	19c161d5 	.word	0x19c161d5
 80084c0:	3f2a01a0 	.word	0x3f2a01a0
 80084c4:	1110f8a6 	.word	0x1110f8a6
 80084c8:	3f811111 	.word	0x3f811111
 80084cc:	00000000 	.word	0x00000000

080084d0 <__kernel_tan>:
 80084d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d4:	ed2d 8b04 	vpush	{d8-d9}
 80084d8:	ec5b ab10 	vmov	sl, fp, d0
 80084dc:	4be2      	ldr	r3, [pc, #904]	; (8008868 <__kernel_tan+0x398>)
 80084de:	b085      	sub	sp, #20
 80084e0:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 80084e4:	429f      	cmp	r7, r3
 80084e6:	ed8d 1b00 	vstr	d1, [sp]
 80084ea:	4606      	mov	r6, r0
 80084ec:	f8cd b00c 	str.w	fp, [sp, #12]
 80084f0:	dc24      	bgt.n	800853c <__kernel_tan+0x6c>
 80084f2:	ee10 0a10 	vmov	r0, s0
 80084f6:	4659      	mov	r1, fp
 80084f8:	f7f8 fb2e 	bl	8000b58 <__aeabi_d2iz>
 80084fc:	2800      	cmp	r0, #0
 80084fe:	d148      	bne.n	8008592 <__kernel_tan+0xc2>
 8008500:	1c73      	adds	r3, r6, #1
 8008502:	4652      	mov	r2, sl
 8008504:	4313      	orrs	r3, r2
 8008506:	433b      	orrs	r3, r7
 8008508:	d112      	bne.n	8008530 <__kernel_tan+0x60>
 800850a:	ec4b ab10 	vmov	d0, sl, fp
 800850e:	f000 f9b3 	bl	8008878 <fabs>
 8008512:	49d6      	ldr	r1, [pc, #856]	; (800886c <__kernel_tan+0x39c>)
 8008514:	ec53 2b10 	vmov	r2, r3, d0
 8008518:	2000      	movs	r0, #0
 800851a:	f7f8 f997 	bl	800084c <__aeabi_ddiv>
 800851e:	4682      	mov	sl, r0
 8008520:	468b      	mov	fp, r1
 8008522:	ec4b ab10 	vmov	d0, sl, fp
 8008526:	b005      	add	sp, #20
 8008528:	ecbd 8b04 	vpop	{d8-d9}
 800852c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008530:	2e01      	cmp	r6, #1
 8008532:	d0f6      	beq.n	8008522 <__kernel_tan+0x52>
 8008534:	49ce      	ldr	r1, [pc, #824]	; (8008870 <__kernel_tan+0x3a0>)
 8008536:	465b      	mov	r3, fp
 8008538:	2000      	movs	r0, #0
 800853a:	e7ee      	b.n	800851a <__kernel_tan+0x4a>
 800853c:	4bcd      	ldr	r3, [pc, #820]	; (8008874 <__kernel_tan+0x3a4>)
 800853e:	429f      	cmp	r7, r3
 8008540:	dd27      	ble.n	8008592 <__kernel_tan+0xc2>
 8008542:	9b03      	ldr	r3, [sp, #12]
 8008544:	2b00      	cmp	r3, #0
 8008546:	da0a      	bge.n	800855e <__kernel_tan+0x8e>
 8008548:	e9dd 2100 	ldrd	r2, r1, [sp]
 800854c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008550:	469b      	mov	fp, r3
 8008552:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008556:	e9cd 2300 	strd	r2, r3, [sp]
 800855a:	ee10 aa10 	vmov	sl, s0
 800855e:	4652      	mov	r2, sl
 8008560:	465b      	mov	r3, fp
 8008562:	a1a1      	add	r1, pc, #644	; (adr r1, 80087e8 <__kernel_tan+0x318>)
 8008564:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008568:	f7f7 fe8e 	bl	8000288 <__aeabi_dsub>
 800856c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008570:	4604      	mov	r4, r0
 8008572:	460d      	mov	r5, r1
 8008574:	a19e      	add	r1, pc, #632	; (adr r1, 80087f0 <__kernel_tan+0x320>)
 8008576:	e9d1 0100 	ldrd	r0, r1, [r1]
 800857a:	f7f7 fe85 	bl	8000288 <__aeabi_dsub>
 800857e:	4622      	mov	r2, r4
 8008580:	462b      	mov	r3, r5
 8008582:	f7f7 fe83 	bl	800028c <__adddf3>
 8008586:	ed9f 7b9c 	vldr	d7, [pc, #624]	; 80087f8 <__kernel_tan+0x328>
 800858a:	ed8d 7b00 	vstr	d7, [sp]
 800858e:	4682      	mov	sl, r0
 8008590:	468b      	mov	fp, r1
 8008592:	4652      	mov	r2, sl
 8008594:	465b      	mov	r3, fp
 8008596:	4650      	mov	r0, sl
 8008598:	4659      	mov	r1, fp
 800859a:	f7f8 f82d 	bl	80005f8 <__aeabi_dmul>
 800859e:	4602      	mov	r2, r0
 80085a0:	460b      	mov	r3, r1
 80085a2:	4680      	mov	r8, r0
 80085a4:	4689      	mov	r9, r1
 80085a6:	f7f8 f827 	bl	80005f8 <__aeabi_dmul>
 80085aa:	4642      	mov	r2, r8
 80085ac:	4604      	mov	r4, r0
 80085ae:	460d      	mov	r5, r1
 80085b0:	464b      	mov	r3, r9
 80085b2:	4650      	mov	r0, sl
 80085b4:	4659      	mov	r1, fp
 80085b6:	f7f8 f81f 	bl	80005f8 <__aeabi_dmul>
 80085ba:	a391      	add	r3, pc, #580	; (adr r3, 8008800 <__kernel_tan+0x330>)
 80085bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c0:	ec41 0b18 	vmov	d8, r0, r1
 80085c4:	4620      	mov	r0, r4
 80085c6:	4629      	mov	r1, r5
 80085c8:	f7f8 f816 	bl	80005f8 <__aeabi_dmul>
 80085cc:	a38e      	add	r3, pc, #568	; (adr r3, 8008808 <__kernel_tan+0x338>)
 80085ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d2:	f7f7 fe5b 	bl	800028c <__adddf3>
 80085d6:	4622      	mov	r2, r4
 80085d8:	462b      	mov	r3, r5
 80085da:	f7f8 f80d 	bl	80005f8 <__aeabi_dmul>
 80085de:	a38c      	add	r3, pc, #560	; (adr r3, 8008810 <__kernel_tan+0x340>)
 80085e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e4:	f7f7 fe52 	bl	800028c <__adddf3>
 80085e8:	4622      	mov	r2, r4
 80085ea:	462b      	mov	r3, r5
 80085ec:	f7f8 f804 	bl	80005f8 <__aeabi_dmul>
 80085f0:	a389      	add	r3, pc, #548	; (adr r3, 8008818 <__kernel_tan+0x348>)
 80085f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f6:	f7f7 fe49 	bl	800028c <__adddf3>
 80085fa:	4622      	mov	r2, r4
 80085fc:	462b      	mov	r3, r5
 80085fe:	f7f7 fffb 	bl	80005f8 <__aeabi_dmul>
 8008602:	a387      	add	r3, pc, #540	; (adr r3, 8008820 <__kernel_tan+0x350>)
 8008604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008608:	f7f7 fe40 	bl	800028c <__adddf3>
 800860c:	4622      	mov	r2, r4
 800860e:	462b      	mov	r3, r5
 8008610:	f7f7 fff2 	bl	80005f8 <__aeabi_dmul>
 8008614:	a384      	add	r3, pc, #528	; (adr r3, 8008828 <__kernel_tan+0x358>)
 8008616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861a:	f7f7 fe37 	bl	800028c <__adddf3>
 800861e:	4642      	mov	r2, r8
 8008620:	464b      	mov	r3, r9
 8008622:	f7f7 ffe9 	bl	80005f8 <__aeabi_dmul>
 8008626:	a382      	add	r3, pc, #520	; (adr r3, 8008830 <__kernel_tan+0x360>)
 8008628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862c:	ec41 0b19 	vmov	d9, r0, r1
 8008630:	4620      	mov	r0, r4
 8008632:	4629      	mov	r1, r5
 8008634:	f7f7 ffe0 	bl	80005f8 <__aeabi_dmul>
 8008638:	a37f      	add	r3, pc, #508	; (adr r3, 8008838 <__kernel_tan+0x368>)
 800863a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863e:	f7f7 fe25 	bl	800028c <__adddf3>
 8008642:	4622      	mov	r2, r4
 8008644:	462b      	mov	r3, r5
 8008646:	f7f7 ffd7 	bl	80005f8 <__aeabi_dmul>
 800864a:	a37d      	add	r3, pc, #500	; (adr r3, 8008840 <__kernel_tan+0x370>)
 800864c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008650:	f7f7 fe1c 	bl	800028c <__adddf3>
 8008654:	4622      	mov	r2, r4
 8008656:	462b      	mov	r3, r5
 8008658:	f7f7 ffce 	bl	80005f8 <__aeabi_dmul>
 800865c:	a37a      	add	r3, pc, #488	; (adr r3, 8008848 <__kernel_tan+0x378>)
 800865e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008662:	f7f7 fe13 	bl	800028c <__adddf3>
 8008666:	4622      	mov	r2, r4
 8008668:	462b      	mov	r3, r5
 800866a:	f7f7 ffc5 	bl	80005f8 <__aeabi_dmul>
 800866e:	a378      	add	r3, pc, #480	; (adr r3, 8008850 <__kernel_tan+0x380>)
 8008670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008674:	f7f7 fe0a 	bl	800028c <__adddf3>
 8008678:	4622      	mov	r2, r4
 800867a:	462b      	mov	r3, r5
 800867c:	f7f7 ffbc 	bl	80005f8 <__aeabi_dmul>
 8008680:	a375      	add	r3, pc, #468	; (adr r3, 8008858 <__kernel_tan+0x388>)
 8008682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008686:	f7f7 fe01 	bl	800028c <__adddf3>
 800868a:	4602      	mov	r2, r0
 800868c:	460b      	mov	r3, r1
 800868e:	ec51 0b19 	vmov	r0, r1, d9
 8008692:	f7f7 fdfb 	bl	800028c <__adddf3>
 8008696:	ec53 2b18 	vmov	r2, r3, d8
 800869a:	f7f7 ffad 	bl	80005f8 <__aeabi_dmul>
 800869e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086a2:	f7f7 fdf3 	bl	800028c <__adddf3>
 80086a6:	4642      	mov	r2, r8
 80086a8:	464b      	mov	r3, r9
 80086aa:	f7f7 ffa5 	bl	80005f8 <__aeabi_dmul>
 80086ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086b2:	f7f7 fdeb 	bl	800028c <__adddf3>
 80086b6:	a36a      	add	r3, pc, #424	; (adr r3, 8008860 <__kernel_tan+0x390>)
 80086b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086bc:	4604      	mov	r4, r0
 80086be:	460d      	mov	r5, r1
 80086c0:	ec51 0b18 	vmov	r0, r1, d8
 80086c4:	f7f7 ff98 	bl	80005f8 <__aeabi_dmul>
 80086c8:	4622      	mov	r2, r4
 80086ca:	462b      	mov	r3, r5
 80086cc:	f7f7 fdde 	bl	800028c <__adddf3>
 80086d0:	460b      	mov	r3, r1
 80086d2:	ec41 0b18 	vmov	d8, r0, r1
 80086d6:	4602      	mov	r2, r0
 80086d8:	4659      	mov	r1, fp
 80086da:	4650      	mov	r0, sl
 80086dc:	f7f7 fdd6 	bl	800028c <__adddf3>
 80086e0:	4b64      	ldr	r3, [pc, #400]	; (8008874 <__kernel_tan+0x3a4>)
 80086e2:	429f      	cmp	r7, r3
 80086e4:	4604      	mov	r4, r0
 80086e6:	460d      	mov	r5, r1
 80086e8:	dd3e      	ble.n	8008768 <__kernel_tan+0x298>
 80086ea:	4630      	mov	r0, r6
 80086ec:	f7f7 ff1a 	bl	8000524 <__aeabi_i2d>
 80086f0:	4622      	mov	r2, r4
 80086f2:	4680      	mov	r8, r0
 80086f4:	4689      	mov	r9, r1
 80086f6:	462b      	mov	r3, r5
 80086f8:	4620      	mov	r0, r4
 80086fa:	4629      	mov	r1, r5
 80086fc:	f7f7 ff7c 	bl	80005f8 <__aeabi_dmul>
 8008700:	4642      	mov	r2, r8
 8008702:	4606      	mov	r6, r0
 8008704:	460f      	mov	r7, r1
 8008706:	464b      	mov	r3, r9
 8008708:	4620      	mov	r0, r4
 800870a:	4629      	mov	r1, r5
 800870c:	f7f7 fdbe 	bl	800028c <__adddf3>
 8008710:	4602      	mov	r2, r0
 8008712:	460b      	mov	r3, r1
 8008714:	4630      	mov	r0, r6
 8008716:	4639      	mov	r1, r7
 8008718:	f7f8 f898 	bl	800084c <__aeabi_ddiv>
 800871c:	ec53 2b18 	vmov	r2, r3, d8
 8008720:	f7f7 fdb2 	bl	8000288 <__aeabi_dsub>
 8008724:	4602      	mov	r2, r0
 8008726:	460b      	mov	r3, r1
 8008728:	4650      	mov	r0, sl
 800872a:	4659      	mov	r1, fp
 800872c:	f7f7 fdac 	bl	8000288 <__aeabi_dsub>
 8008730:	4602      	mov	r2, r0
 8008732:	460b      	mov	r3, r1
 8008734:	f7f7 fdaa 	bl	800028c <__adddf3>
 8008738:	4602      	mov	r2, r0
 800873a:	460b      	mov	r3, r1
 800873c:	4640      	mov	r0, r8
 800873e:	4649      	mov	r1, r9
 8008740:	f7f7 fda2 	bl	8000288 <__aeabi_dsub>
 8008744:	9b03      	ldr	r3, [sp, #12]
 8008746:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800874a:	f00a 0a02 	and.w	sl, sl, #2
 800874e:	4604      	mov	r4, r0
 8008750:	f1ca 0001 	rsb	r0, sl, #1
 8008754:	460d      	mov	r5, r1
 8008756:	f7f7 fee5 	bl	8000524 <__aeabi_i2d>
 800875a:	4602      	mov	r2, r0
 800875c:	460b      	mov	r3, r1
 800875e:	4620      	mov	r0, r4
 8008760:	4629      	mov	r1, r5
 8008762:	f7f7 ff49 	bl	80005f8 <__aeabi_dmul>
 8008766:	e6da      	b.n	800851e <__kernel_tan+0x4e>
 8008768:	2e01      	cmp	r6, #1
 800876a:	d038      	beq.n	80087de <__kernel_tan+0x30e>
 800876c:	460f      	mov	r7, r1
 800876e:	4689      	mov	r9, r1
 8008770:	4602      	mov	r2, r0
 8008772:	460b      	mov	r3, r1
 8008774:	2000      	movs	r0, #0
 8008776:	493e      	ldr	r1, [pc, #248]	; (8008870 <__kernel_tan+0x3a0>)
 8008778:	f7f8 f868 	bl	800084c <__aeabi_ddiv>
 800877c:	2600      	movs	r6, #0
 800877e:	e9cd 0100 	strd	r0, r1, [sp]
 8008782:	4652      	mov	r2, sl
 8008784:	465b      	mov	r3, fp
 8008786:	4630      	mov	r0, r6
 8008788:	4639      	mov	r1, r7
 800878a:	f7f7 fd7d 	bl	8000288 <__aeabi_dsub>
 800878e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8008792:	4602      	mov	r2, r0
 8008794:	460b      	mov	r3, r1
 8008796:	ec51 0b18 	vmov	r0, r1, d8
 800879a:	f7f7 fd75 	bl	8000288 <__aeabi_dsub>
 800879e:	4632      	mov	r2, r6
 80087a0:	462b      	mov	r3, r5
 80087a2:	f7f7 ff29 	bl	80005f8 <__aeabi_dmul>
 80087a6:	46b0      	mov	r8, r6
 80087a8:	460f      	mov	r7, r1
 80087aa:	4606      	mov	r6, r0
 80087ac:	4642      	mov	r2, r8
 80087ae:	462b      	mov	r3, r5
 80087b0:	4640      	mov	r0, r8
 80087b2:	4649      	mov	r1, r9
 80087b4:	f7f7 ff20 	bl	80005f8 <__aeabi_dmul>
 80087b8:	4b2c      	ldr	r3, [pc, #176]	; (800886c <__kernel_tan+0x39c>)
 80087ba:	2200      	movs	r2, #0
 80087bc:	f7f7 fd66 	bl	800028c <__adddf3>
 80087c0:	4602      	mov	r2, r0
 80087c2:	460b      	mov	r3, r1
 80087c4:	4630      	mov	r0, r6
 80087c6:	4639      	mov	r1, r7
 80087c8:	f7f7 fd60 	bl	800028c <__adddf3>
 80087cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087d0:	f7f7 ff12 	bl	80005f8 <__aeabi_dmul>
 80087d4:	4642      	mov	r2, r8
 80087d6:	462b      	mov	r3, r5
 80087d8:	f7f7 fd58 	bl	800028c <__adddf3>
 80087dc:	e69f      	b.n	800851e <__kernel_tan+0x4e>
 80087de:	4682      	mov	sl, r0
 80087e0:	468b      	mov	fp, r1
 80087e2:	e69e      	b.n	8008522 <__kernel_tan+0x52>
 80087e4:	f3af 8000 	nop.w
 80087e8:	54442d18 	.word	0x54442d18
 80087ec:	3fe921fb 	.word	0x3fe921fb
 80087f0:	33145c07 	.word	0x33145c07
 80087f4:	3c81a626 	.word	0x3c81a626
	...
 8008800:	74bf7ad4 	.word	0x74bf7ad4
 8008804:	3efb2a70 	.word	0x3efb2a70
 8008808:	32f0a7e9 	.word	0x32f0a7e9
 800880c:	3f12b80f 	.word	0x3f12b80f
 8008810:	1a8d1068 	.word	0x1a8d1068
 8008814:	3f3026f7 	.word	0x3f3026f7
 8008818:	fee08315 	.word	0xfee08315
 800881c:	3f57dbc8 	.word	0x3f57dbc8
 8008820:	e96e8493 	.word	0xe96e8493
 8008824:	3f8226e3 	.word	0x3f8226e3
 8008828:	1bb341fe 	.word	0x1bb341fe
 800882c:	3faba1ba 	.word	0x3faba1ba
 8008830:	db605373 	.word	0xdb605373
 8008834:	bef375cb 	.word	0xbef375cb
 8008838:	a03792a6 	.word	0xa03792a6
 800883c:	3f147e88 	.word	0x3f147e88
 8008840:	f2f26501 	.word	0xf2f26501
 8008844:	3f4344d8 	.word	0x3f4344d8
 8008848:	c9560328 	.word	0xc9560328
 800884c:	3f6d6d22 	.word	0x3f6d6d22
 8008850:	8406d637 	.word	0x8406d637
 8008854:	3f9664f4 	.word	0x3f9664f4
 8008858:	1110fe7a 	.word	0x1110fe7a
 800885c:	3fc11111 	.word	0x3fc11111
 8008860:	55555563 	.word	0x55555563
 8008864:	3fd55555 	.word	0x3fd55555
 8008868:	3e2fffff 	.word	0x3e2fffff
 800886c:	3ff00000 	.word	0x3ff00000
 8008870:	bff00000 	.word	0xbff00000
 8008874:	3fe59427 	.word	0x3fe59427

08008878 <fabs>:
 8008878:	ec51 0b10 	vmov	r0, r1, d0
 800887c:	ee10 2a10 	vmov	r2, s0
 8008880:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008884:	ec43 2b10 	vmov	d0, r2, r3
 8008888:	4770      	bx	lr

0800888a <finite>:
 800888a:	b082      	sub	sp, #8
 800888c:	ed8d 0b00 	vstr	d0, [sp]
 8008890:	9801      	ldr	r0, [sp, #4]
 8008892:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008896:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800889a:	0fc0      	lsrs	r0, r0, #31
 800889c:	b002      	add	sp, #8
 800889e:	4770      	bx	lr

080088a0 <floor>:
 80088a0:	ec51 0b10 	vmov	r0, r1, d0
 80088a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088a8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80088ac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80088b0:	2e13      	cmp	r6, #19
 80088b2:	ee10 5a10 	vmov	r5, s0
 80088b6:	ee10 8a10 	vmov	r8, s0
 80088ba:	460c      	mov	r4, r1
 80088bc:	dc32      	bgt.n	8008924 <floor+0x84>
 80088be:	2e00      	cmp	r6, #0
 80088c0:	da14      	bge.n	80088ec <floor+0x4c>
 80088c2:	a333      	add	r3, pc, #204	; (adr r3, 8008990 <floor+0xf0>)
 80088c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c8:	f7f7 fce0 	bl	800028c <__adddf3>
 80088cc:	2200      	movs	r2, #0
 80088ce:	2300      	movs	r3, #0
 80088d0:	f7f8 f922 	bl	8000b18 <__aeabi_dcmpgt>
 80088d4:	b138      	cbz	r0, 80088e6 <floor+0x46>
 80088d6:	2c00      	cmp	r4, #0
 80088d8:	da57      	bge.n	800898a <floor+0xea>
 80088da:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80088de:	431d      	orrs	r5, r3
 80088e0:	d001      	beq.n	80088e6 <floor+0x46>
 80088e2:	4c2d      	ldr	r4, [pc, #180]	; (8008998 <floor+0xf8>)
 80088e4:	2500      	movs	r5, #0
 80088e6:	4621      	mov	r1, r4
 80088e8:	4628      	mov	r0, r5
 80088ea:	e025      	b.n	8008938 <floor+0x98>
 80088ec:	4f2b      	ldr	r7, [pc, #172]	; (800899c <floor+0xfc>)
 80088ee:	4137      	asrs	r7, r6
 80088f0:	ea01 0307 	and.w	r3, r1, r7
 80088f4:	4303      	orrs	r3, r0
 80088f6:	d01f      	beq.n	8008938 <floor+0x98>
 80088f8:	a325      	add	r3, pc, #148	; (adr r3, 8008990 <floor+0xf0>)
 80088fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fe:	f7f7 fcc5 	bl	800028c <__adddf3>
 8008902:	2200      	movs	r2, #0
 8008904:	2300      	movs	r3, #0
 8008906:	f7f8 f907 	bl	8000b18 <__aeabi_dcmpgt>
 800890a:	2800      	cmp	r0, #0
 800890c:	d0eb      	beq.n	80088e6 <floor+0x46>
 800890e:	2c00      	cmp	r4, #0
 8008910:	bfbe      	ittt	lt
 8008912:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008916:	fa43 f606 	asrlt.w	r6, r3, r6
 800891a:	19a4      	addlt	r4, r4, r6
 800891c:	ea24 0407 	bic.w	r4, r4, r7
 8008920:	2500      	movs	r5, #0
 8008922:	e7e0      	b.n	80088e6 <floor+0x46>
 8008924:	2e33      	cmp	r6, #51	; 0x33
 8008926:	dd0b      	ble.n	8008940 <floor+0xa0>
 8008928:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800892c:	d104      	bne.n	8008938 <floor+0x98>
 800892e:	ee10 2a10 	vmov	r2, s0
 8008932:	460b      	mov	r3, r1
 8008934:	f7f7 fcaa 	bl	800028c <__adddf3>
 8008938:	ec41 0b10 	vmov	d0, r0, r1
 800893c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008940:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008944:	f04f 33ff 	mov.w	r3, #4294967295
 8008948:	fa23 f707 	lsr.w	r7, r3, r7
 800894c:	4207      	tst	r7, r0
 800894e:	d0f3      	beq.n	8008938 <floor+0x98>
 8008950:	a30f      	add	r3, pc, #60	; (adr r3, 8008990 <floor+0xf0>)
 8008952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008956:	f7f7 fc99 	bl	800028c <__adddf3>
 800895a:	2200      	movs	r2, #0
 800895c:	2300      	movs	r3, #0
 800895e:	f7f8 f8db 	bl	8000b18 <__aeabi_dcmpgt>
 8008962:	2800      	cmp	r0, #0
 8008964:	d0bf      	beq.n	80088e6 <floor+0x46>
 8008966:	2c00      	cmp	r4, #0
 8008968:	da02      	bge.n	8008970 <floor+0xd0>
 800896a:	2e14      	cmp	r6, #20
 800896c:	d103      	bne.n	8008976 <floor+0xd6>
 800896e:	3401      	adds	r4, #1
 8008970:	ea25 0507 	bic.w	r5, r5, r7
 8008974:	e7b7      	b.n	80088e6 <floor+0x46>
 8008976:	2301      	movs	r3, #1
 8008978:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800897c:	fa03 f606 	lsl.w	r6, r3, r6
 8008980:	4435      	add	r5, r6
 8008982:	4545      	cmp	r5, r8
 8008984:	bf38      	it	cc
 8008986:	18e4      	addcc	r4, r4, r3
 8008988:	e7f2      	b.n	8008970 <floor+0xd0>
 800898a:	2500      	movs	r5, #0
 800898c:	462c      	mov	r4, r5
 800898e:	e7aa      	b.n	80088e6 <floor+0x46>
 8008990:	8800759c 	.word	0x8800759c
 8008994:	7e37e43c 	.word	0x7e37e43c
 8008998:	bff00000 	.word	0xbff00000
 800899c:	000fffff 	.word	0x000fffff

080089a0 <rint>:
 80089a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089a2:	ec51 0b10 	vmov	r0, r1, d0
 80089a6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80089aa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80089ae:	2e13      	cmp	r6, #19
 80089b0:	ee10 4a10 	vmov	r4, s0
 80089b4:	460b      	mov	r3, r1
 80089b6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80089ba:	dc58      	bgt.n	8008a6e <rint+0xce>
 80089bc:	2e00      	cmp	r6, #0
 80089be:	da2b      	bge.n	8008a18 <rint+0x78>
 80089c0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80089c4:	4302      	orrs	r2, r0
 80089c6:	d023      	beq.n	8008a10 <rint+0x70>
 80089c8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80089cc:	4302      	orrs	r2, r0
 80089ce:	4254      	negs	r4, r2
 80089d0:	4314      	orrs	r4, r2
 80089d2:	0c4b      	lsrs	r3, r1, #17
 80089d4:	0b24      	lsrs	r4, r4, #12
 80089d6:	045b      	lsls	r3, r3, #17
 80089d8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80089dc:	ea44 0103 	orr.w	r1, r4, r3
 80089e0:	4b32      	ldr	r3, [pc, #200]	; (8008aac <rint+0x10c>)
 80089e2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80089e6:	e9d3 6700 	ldrd	r6, r7, [r3]
 80089ea:	4602      	mov	r2, r0
 80089ec:	460b      	mov	r3, r1
 80089ee:	4630      	mov	r0, r6
 80089f0:	4639      	mov	r1, r7
 80089f2:	f7f7 fc4b 	bl	800028c <__adddf3>
 80089f6:	e9cd 0100 	strd	r0, r1, [sp]
 80089fa:	463b      	mov	r3, r7
 80089fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a00:	4632      	mov	r2, r6
 8008a02:	f7f7 fc41 	bl	8000288 <__aeabi_dsub>
 8008a06:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008a0a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8008a0e:	4639      	mov	r1, r7
 8008a10:	ec41 0b10 	vmov	d0, r0, r1
 8008a14:	b003      	add	sp, #12
 8008a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a18:	4a25      	ldr	r2, [pc, #148]	; (8008ab0 <rint+0x110>)
 8008a1a:	4132      	asrs	r2, r6
 8008a1c:	ea01 0702 	and.w	r7, r1, r2
 8008a20:	4307      	orrs	r7, r0
 8008a22:	d0f5      	beq.n	8008a10 <rint+0x70>
 8008a24:	0851      	lsrs	r1, r2, #1
 8008a26:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8008a2a:	4314      	orrs	r4, r2
 8008a2c:	d00c      	beq.n	8008a48 <rint+0xa8>
 8008a2e:	ea23 0201 	bic.w	r2, r3, r1
 8008a32:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008a36:	2e13      	cmp	r6, #19
 8008a38:	fa43 f606 	asr.w	r6, r3, r6
 8008a3c:	bf0c      	ite	eq
 8008a3e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8008a42:	2400      	movne	r4, #0
 8008a44:	ea42 0306 	orr.w	r3, r2, r6
 8008a48:	4918      	ldr	r1, [pc, #96]	; (8008aac <rint+0x10c>)
 8008a4a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8008a4e:	4622      	mov	r2, r4
 8008a50:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008a54:	4620      	mov	r0, r4
 8008a56:	4629      	mov	r1, r5
 8008a58:	f7f7 fc18 	bl	800028c <__adddf3>
 8008a5c:	e9cd 0100 	strd	r0, r1, [sp]
 8008a60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a64:	4622      	mov	r2, r4
 8008a66:	462b      	mov	r3, r5
 8008a68:	f7f7 fc0e 	bl	8000288 <__aeabi_dsub>
 8008a6c:	e7d0      	b.n	8008a10 <rint+0x70>
 8008a6e:	2e33      	cmp	r6, #51	; 0x33
 8008a70:	dd07      	ble.n	8008a82 <rint+0xe2>
 8008a72:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008a76:	d1cb      	bne.n	8008a10 <rint+0x70>
 8008a78:	ee10 2a10 	vmov	r2, s0
 8008a7c:	f7f7 fc06 	bl	800028c <__adddf3>
 8008a80:	e7c6      	b.n	8008a10 <rint+0x70>
 8008a82:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8008a86:	f04f 36ff 	mov.w	r6, #4294967295
 8008a8a:	40d6      	lsrs	r6, r2
 8008a8c:	4230      	tst	r0, r6
 8008a8e:	d0bf      	beq.n	8008a10 <rint+0x70>
 8008a90:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8008a94:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8008a98:	bf1f      	itttt	ne
 8008a9a:	ea24 0101 	bicne.w	r1, r4, r1
 8008a9e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8008aa2:	fa44 f202 	asrne.w	r2, r4, r2
 8008aa6:	ea41 0402 	orrne.w	r4, r1, r2
 8008aaa:	e7cd      	b.n	8008a48 <rint+0xa8>
 8008aac:	08009320 	.word	0x08009320
 8008ab0:	000fffff 	.word	0x000fffff
 8008ab4:	00000000 	.word	0x00000000

08008ab8 <scalbn>:
 8008ab8:	b570      	push	{r4, r5, r6, lr}
 8008aba:	ec55 4b10 	vmov	r4, r5, d0
 8008abe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008ac2:	4606      	mov	r6, r0
 8008ac4:	462b      	mov	r3, r5
 8008ac6:	b99a      	cbnz	r2, 8008af0 <scalbn+0x38>
 8008ac8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008acc:	4323      	orrs	r3, r4
 8008ace:	d036      	beq.n	8008b3e <scalbn+0x86>
 8008ad0:	4b39      	ldr	r3, [pc, #228]	; (8008bb8 <scalbn+0x100>)
 8008ad2:	4629      	mov	r1, r5
 8008ad4:	ee10 0a10 	vmov	r0, s0
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f7f7 fd8d 	bl	80005f8 <__aeabi_dmul>
 8008ade:	4b37      	ldr	r3, [pc, #220]	; (8008bbc <scalbn+0x104>)
 8008ae0:	429e      	cmp	r6, r3
 8008ae2:	4604      	mov	r4, r0
 8008ae4:	460d      	mov	r5, r1
 8008ae6:	da10      	bge.n	8008b0a <scalbn+0x52>
 8008ae8:	a32b      	add	r3, pc, #172	; (adr r3, 8008b98 <scalbn+0xe0>)
 8008aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aee:	e03a      	b.n	8008b66 <scalbn+0xae>
 8008af0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008af4:	428a      	cmp	r2, r1
 8008af6:	d10c      	bne.n	8008b12 <scalbn+0x5a>
 8008af8:	ee10 2a10 	vmov	r2, s0
 8008afc:	4620      	mov	r0, r4
 8008afe:	4629      	mov	r1, r5
 8008b00:	f7f7 fbc4 	bl	800028c <__adddf3>
 8008b04:	4604      	mov	r4, r0
 8008b06:	460d      	mov	r5, r1
 8008b08:	e019      	b.n	8008b3e <scalbn+0x86>
 8008b0a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008b0e:	460b      	mov	r3, r1
 8008b10:	3a36      	subs	r2, #54	; 0x36
 8008b12:	4432      	add	r2, r6
 8008b14:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008b18:	428a      	cmp	r2, r1
 8008b1a:	dd08      	ble.n	8008b2e <scalbn+0x76>
 8008b1c:	2d00      	cmp	r5, #0
 8008b1e:	a120      	add	r1, pc, #128	; (adr r1, 8008ba0 <scalbn+0xe8>)
 8008b20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b24:	da1c      	bge.n	8008b60 <scalbn+0xa8>
 8008b26:	a120      	add	r1, pc, #128	; (adr r1, 8008ba8 <scalbn+0xf0>)
 8008b28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b2c:	e018      	b.n	8008b60 <scalbn+0xa8>
 8008b2e:	2a00      	cmp	r2, #0
 8008b30:	dd08      	ble.n	8008b44 <scalbn+0x8c>
 8008b32:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008b36:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008b3a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008b3e:	ec45 4b10 	vmov	d0, r4, r5
 8008b42:	bd70      	pop	{r4, r5, r6, pc}
 8008b44:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008b48:	da19      	bge.n	8008b7e <scalbn+0xc6>
 8008b4a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008b4e:	429e      	cmp	r6, r3
 8008b50:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008b54:	dd0a      	ble.n	8008b6c <scalbn+0xb4>
 8008b56:	a112      	add	r1, pc, #72	; (adr r1, 8008ba0 <scalbn+0xe8>)
 8008b58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d1e2      	bne.n	8008b26 <scalbn+0x6e>
 8008b60:	a30f      	add	r3, pc, #60	; (adr r3, 8008ba0 <scalbn+0xe8>)
 8008b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b66:	f7f7 fd47 	bl	80005f8 <__aeabi_dmul>
 8008b6a:	e7cb      	b.n	8008b04 <scalbn+0x4c>
 8008b6c:	a10a      	add	r1, pc, #40	; (adr r1, 8008b98 <scalbn+0xe0>)
 8008b6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d0b8      	beq.n	8008ae8 <scalbn+0x30>
 8008b76:	a10e      	add	r1, pc, #56	; (adr r1, 8008bb0 <scalbn+0xf8>)
 8008b78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b7c:	e7b4      	b.n	8008ae8 <scalbn+0x30>
 8008b7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008b82:	3236      	adds	r2, #54	; 0x36
 8008b84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008b88:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008b8c:	4620      	mov	r0, r4
 8008b8e:	4b0c      	ldr	r3, [pc, #48]	; (8008bc0 <scalbn+0x108>)
 8008b90:	2200      	movs	r2, #0
 8008b92:	e7e8      	b.n	8008b66 <scalbn+0xae>
 8008b94:	f3af 8000 	nop.w
 8008b98:	c2f8f359 	.word	0xc2f8f359
 8008b9c:	01a56e1f 	.word	0x01a56e1f
 8008ba0:	8800759c 	.word	0x8800759c
 8008ba4:	7e37e43c 	.word	0x7e37e43c
 8008ba8:	8800759c 	.word	0x8800759c
 8008bac:	fe37e43c 	.word	0xfe37e43c
 8008bb0:	c2f8f359 	.word	0xc2f8f359
 8008bb4:	81a56e1f 	.word	0x81a56e1f
 8008bb8:	43500000 	.word	0x43500000
 8008bbc:	ffff3cb0 	.word	0xffff3cb0
 8008bc0:	3c900000 	.word	0x3c900000

08008bc4 <_init>:
 8008bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bc6:	bf00      	nop
 8008bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bca:	bc08      	pop	{r3}
 8008bcc:	469e      	mov	lr, r3
 8008bce:	4770      	bx	lr

08008bd0 <_fini>:
 8008bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd2:	bf00      	nop
 8008bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bd6:	bc08      	pop	{r3}
 8008bd8:	469e      	mov	lr, r3
 8008bda:	4770      	bx	lr
